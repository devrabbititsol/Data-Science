yvisitorsin201516=fetch(visitors201516,n=-1)
visitorsinyear2015<-yvisitorsin201516[grep("2015", yvisitorsin201516$year,ignore.case=T),1]
visitorsinyear2016<-yvisitorsin201516[grep("2016", yvisitorsin201516$year,ignore.case=T),1]
###########Inventory Availability####################
availStock = dbSendQuery(mydb,'select cataloginventory_stock_status.product_id as Productid,catalog_product_entity_varchar.value as Productname,cataloginventory_stock_status.qty as Quantity
from cataloginventory_stock_status,catalog_product_entity,catalog_product_entity_varchar
where cataloginventory_stock_status.product_id=catalog_product_entity.entity_id
and catalog_product_entity_varchar.entity_id=catalog_product_entity.entity_id
group by cataloginventory_stock_status.product_id;')
availInventoryStock= fetch(availStock, n=-1)
write.csv(availInventoryStock,"mydata.csv")
######Top 10 best Product##########
Products= dbSendQuery(mydb,'select sales_flat_order_item.product_id as Productid,sales_flat_order_item.name as Name,(sales_flat_invoice.total_qty) as Quantity,sales_flat_invoice.grand_total as Sales,sales_flat_order.`status` ,
year(sales_flat_order.created_at) as year
from sales_flat_order_item,sales_flat_invoice,sales_flat_order
where sales_flat_order.entity_id=sales_flat_order_item.item_id and
sales_flat_order.entity_id=sales_flat_invoice.entity_id and status="complete"
and year(sales_flat_order.created_at)=2016  order by sales_flat_invoice.total_qty desc limit 10;')
TopBestProducts= fetch(Products, n=-1)
######top 5 products in location wise of current year######
locationsale2016 = dbSendQuery(mydb,' select sales_flat_order_item.product_id as Productid,sales_flat_order_item.name as Name,sales_flat_order_address.region as Location,
(sales_flat_invoice.total_qty) as Quantity, sum(sales_flat_invoice.grand_total) as sales, sales_flat_order.`status` ,
year(sales_flat_order.created_at) as year from
sales_flat_order_item,sales_flat_order_address,sales_flat_invoice,sales_flat_order
where sales_flat_order.entity_id=sales_flat_order_item.item_id
and  sales_flat_order.entity_id=sales_flat_invoice.order_id and sales_flat_order.entity_id=sales_flat_order_address.parent_id
and sales_flat_order.status="complete" and year(sales_flat_order.created_at)=2016 group by location order by sales_flat_invoice.total_qty desc limit 10;')
locationwise = fetch(locationsale2016, n=-1)
# colnames(locationwise)[1]<-"productid"
##Pie Chart Top 10 Product Analysis ######
yTopProSales1=dbSendQuery(mydb,'select sales_flat_order_item.product_id as Productid,sales_flat_order_item.name as Name,
(sales_flat_invoice.total_qty) as Qty,sales_flat_order.`status` ,
year(sales_flat_order.created_at) as year
from sales_flat_order_item,sales_flat_invoice,sales_flat_order
where sales_flat_order.entity_id=sales_flat_order_item.item_id and
sales_flat_order.entity_id=sales_flat_invoice.order_id and status="complete"
and year(sales_flat_order.created_at)=2016 and month(sales_flat_order.created_at)=1
order by sales_flat_invoice.total_qty desc limit 10;')
yTopProSales1=fetch(yTopProSales1,n=-1)
yTopProSales2=dbSendQuery(mydb,'select sales_flat_order_item.product_id as Productid,sales_flat_order_item.name as Name,
(sales_flat_invoice.total_qty) as Qty,sales_flat_order.`status` ,
year(sales_flat_order.created_at) as year
from sales_flat_order_item,sales_flat_invoice,sales_flat_order
where sales_flat_order.entity_id=sales_flat_order_item.item_id and
sales_flat_order.entity_id=sales_flat_invoice.order_id and status="complete"
and year(sales_flat_order.created_at)=2016 and month(sales_flat_order.created_at)=2
order by sales_flat_invoice.total_qty desc limit 10;')
yTopProSales2=fetch(yTopProSales2,n=-1)
yTopProSales3=dbSendQuery(mydb,'select sales_flat_order_item.product_id as Productid,sales_flat_order_item.name as Name,
(sales_flat_invoice.total_qty) as Qty,sales_flat_order.`status` ,
year(sales_flat_order.created_at) as year
from sales_flat_order_item,sales_flat_invoice,sales_flat_order
where sales_flat_order.entity_id=sales_flat_order_item.item_id and
sales_flat_order.entity_id=sales_flat_invoice.order_id and status="complete"
and year(sales_flat_order.created_at)=2016 and month(sales_flat_order.created_at)=3
order by sales_flat_invoice.total_qty desc limit 10;')
yTopProSales3=fetch(yTopProSales3,n=-1)
#########maxunits sold for all years######
maxunitssold=dbSendQuery(mydb,'select (sales_flat_invoice.total_qty) as maxunitsorder,
year(sales_flat_invoice.created_at) as year,
month(sales_flat_invoice.created_at) as month,
day(sales_flat_invoice.created_at) as day
from sales_flat_invoice
where (sales_flat_invoice.total_qty)>1
group by year,month,day(sales_flat_invoice.created_at),maxunitsorder ')
maxunitssold=fetch(maxunitssold,n=-1)
#########################number of units sold in all yearss############################
nunits=dbSendQuery(mydb,'select sum(sales_flat_invoice.total_qty) as qty,
year(sales_flat_invoice.created_at) as year
from sales_flat_invoice
group by year(sales_flat_invoice.created_at)   ')
numberofunitssold=fetch(nunits,n=-1)
###########################Trend in  current month(today and yeasterday) ##################
trend2016=dbSendQuery(mydb,'select year(sales_flat_order.updated_at) as year,count(*) as totalcustomers,sum(sales_flat_invoice.total_qty) as QtyOrdered,
(sum((sales_flat_invoice.grand_total))/count(*)) as AvgperCustomer,
month(sales_flat_order.updated_at) as month,
day(sales_flat_order.updated_at) as day,
sum(sales_flat_invoice.grand_total) as Sales
from sales_flat_order,sales_flat_invoice
where sales_flat_order.entity_id=sales_flat_invoice.order_id
and year(sales_flat_order.updated_at)=2016
and month(sales_flat_order.updated_at)=3 and day(sales_flat_order.updated_at)>=25
group by day( sales_flat_order.updated_at)')
trends2016=fetch(trend2016,n=-1)
########for qty ordered########
yesterdayorder=trends2016$QtyOrdered[1]
todayorder=trends2016$QtyOrdered[2]
trendsinorder2016=round(((todayorder-yesterdayorder)/yesterdayorder)*100,digits = 2)
########for sales##############
yesterdaysales=trends2016$Sales[1]
todaysales=trends2016$Sales[2]
trendsinsales2016=round(((todaysales-yesterdaysales)/yesterdaysales)*100,digits = 2)
#########avg per customer##########
yesterdayAvg=trends2016$AvgperCustomer[1]
todayAvg=trends2016$AvgperCustomer[2]
trendsinAvg2016=round(((todayAvg-yesterdayAvg)/yesterdayAvg)*100,digits = 2)
percentages<-c(0,0,paste(-26.93,downArrow),paste(2.7,upArrow),0,0,paste(-19.62,downArrow))
row2016<-rbind(round(trends2016,2),percentages)
#############location wise quantity sold in the all years######################
years=dbSendQuery(mydb,'select #sales_flat_order_item.product_id as Productid,
#sales_flat_order_item.name as Name,
sales_flat_order_address.region as Location,
sum(sales_flat_invoice.total_qty) as Quantity,sales_flat_order.`status` ,
year(sales_flat_order.created_at) as year
from sales_flat_order_item,sales_flat_order_address,sales_flat_invoice,sales_flat_order
where sales_flat_order.entity_id=sales_flat_order_item.item_id and
sales_flat_order.entity_id=sales_flat_invoice.entity_id and sales_flat_order.entity_id=sales_flat_order_address.entity_id
and status="complete"
group by year(sales_flat_order.created_at),location')
wholeyears=fetch(years,n=-1)
###############website traffic growth##################
webgrowthin2016=dbSendQuery(mydb,'select count(*) as visitors,
month(log_visitor.first_visit_at) as month,year(log_visitor.first_visit_at) as year
from log_visitor where month(log_visitor.first_visit_at)>=2 and year(log_visitor.first_visit_at)=2016
group by month(log_visitor.first_visit_at),year(log_visitor.first_visit_at);')
webtrafficgrowth2016=fetch(webgrowthin2016,n=-1)
trafficinfeb=webtrafficgrowth2016$visitors[1]
trafficinmarch=webtrafficgrowth2016$visitors[2]
webtrafficgrowthin2016=round(((trafficinmarch-trafficinfeb)/trafficinfeb),2)*100
######################sales analysis for all years in feb and march######################
fbmanalysis=dbSendQuery(mydb,'select sum(grand_total) as Revenue ,Month(created_at) as Month,Year(created_at) as Year
from sales_flat_order
where (Month(created_at) >=2 and Month(created_at)<=3)
and (Year(created_at)>=2013 and year(created_at)<=2016) group by  Year(created_at),month(created_at)')
febmarchanalysis=fetch(fbmanalysis,n=-1)
##############################2013 difference between february and march##################
feb2013=febmarchanalysis$Revenue[1]
march2013=febmarchanalysis$Revenue[2]
fm3=round(((march2013-feb2013)/feb2013)*100,digits = 2)
##############################2014 difference between february and march##################
feb2014=febmarchanalysis$Revenue[3]
march2014=febmarchanalysis$Revenue[4]
fm4=round(((march2014-feb2014)/feb2014)*100,digits = 2)
##############################2015 difference between february and march##################
feb2015=febmarchanalysis$Revenue[5]
march2015=febmarchanalysis$Revenue[6]
fm5=round(((march2015-feb2015)/feb2015)*100,digits = 2)
##############################2016 difference between february and march##################
feb2016=febmarchanalysis$Revenue[7]
march2016=febmarchanalysis$Revenue[8]
fm6=round(((march2016-feb2016)/feb2016)*100,digits = 2)
#################brand wise revenue in the current month(2016)################################
k=dbSendQuery(mydb,"select sales_flat_order.`status`,
(case when sales_flat_order_item.name like 'Yupoong%' then 'Yupoong'
when sales_flat_order_item.name like 'Original Chuck%' then 'Original Chuck'
when sales_flat_order_item.name like 'Valucap%' then 'Valucap'
when sales_flat_order_item.name like '%Next Level Apparel%' then 'Next Level Apparel'
when sales_flat_order_item.name like 'Anvil%' then 'Anvil'
when sales_flat_order_item.name like 'Cirque Mountain Apparel%' then 'Cirque Mountain Apparel'
when sales_flat_order_item.name like 'Independent Trading%' then 'Independent Trading Company'
when sales_flat_order_item.name like 'Gildan%' then 'Gildan'
when sales_flat_order_item.name like 'Flexfit%' then 'Flexfit'
when sales_flat_order_item.name like 'B%+C%' then 'Bella + Canvas'   end) as Brand,
sum(sales_flat_order_item.row_total) as Revenue,
sum(sales_flat_order_item.qty_ordered) as Qty,
month(sales_flat_order_item.updated_at) as month from sales_flat_order_item,sales_flat_order
where year(sales_flat_order_item.updated_at)=2016 and month(sales_flat_order_item.updated_at)>=1 and
sales_flat_order.entity_id=sales_flat_order_item.order_id and
sales_flat_order.`status`='complete'
group by Brand , month(sales_flat_order_item.updated_at)")
k1=fetch(k,n=-1)
k1[c(1:3),2]<-"others"
BrandRevenue<-k1[grep("3", k1$month ,ignore.case=T),]
YBrandRevenue<-summarise(group_by(select(k1,Brand,Revenue,month,Qty),Brand),
Revenue=round(sum(Revenue)),Qty=round(sum(Qty)))
#####Brand 15
######################## Difference in % Revenue and Quantity Year 2015 and 2016 ####################
j=dbSendQuery(mydb,"select (case when sales_flat_order_item.name like 'Yupoong%' then 'Yupoong'
when sales_flat_order_item.name like 'Original Chuck%' then 'Original Chuck'
when sales_flat_order_item.name like 'Valucap%' then 'Valucap'
when sales_flat_order_item.name like '%Next Level Apparel%' then 'Next Level Apparel'
when sales_flat_order_item.name like 'Anvil%' then 'Anvil'
when sales_flat_order_item.name like 'Cirque Mountain Apparel%' then 'Cirque Mountain Apparel'
when sales_flat_order_item.name like 'Independent Trading%' then 'Independent Trading Company'
when sales_flat_order_item.name like 'Gildan%' then 'Gildan'
when sales_flat_order_item.name like 'Flexfit%' then 'Flexfit'
when sales_flat_order_item.name like 'B%+C%' then 'Bella + Canvas'
end) as Brand,
sum(sales_flat_order_item.row_total) as CurrentYearRevenue,year(sales_flat_order_item.updated_at) as year,
sum(sales_flat_order_item.qty_ordered) as CurrentYearQty from sales_flat_order_item,sales_flat_order
where year(sales_flat_order_item.updated_at)>=2015 and
sales_flat_order.entity_id=sales_flat_order_item.order_id and
sales_flat_order.`status`='complete'
group by Brand , year(sales_flat_order_item.updated_at)")
j1=fetch(j,n=-1)
j2=j1[grep("2015", j1$year ,ignore.case=T),]
j2[1,1]<-"others"
colnames(j2)[2]<-"LastYearRevenue"
colnames(j2)[4]<-"LastYearQty"
j3=j1[grep("2016", j1$year ,ignore.case=T),]
j3[1,1]<-"others"
Brand<-j2$Brand
LastYearRevenue<-j2$LastYearRevenue
LastYearQty<-j2$LastYearQty
df2015<-data.frame(Brand,LastYearRevenue,LastYearQty)#Revenue2015,YearQty2015,
df2015<-df2015[-c(6,7),]
Brand<-j3$Brand
CurrentYearRevenue<-j3$CurrentYearRevenue
CurrentYearQty<-j3$CurrentYearQty
df2016<-data.frame(CurrentYearRevenue,CurrentYearQty)#Revenue2016,YearQty2016,
df2016<-df2016[-2,]
for(i in 1:6)
{
D1Qty<-((df2016[i,1]-df2015[i,1])/df2015[i,1]*100)
print(D)
}
for(i in 1:6)
{
D2Qty<-((df2016[i,2]-df2015[i,2])/df2015[i,2]*100)
print(D2Qty)
}
GrowthinSales<-c(paste( -67.98655,downArrow),paste(80.40191,upArrow),paste( -77.49308,downArrow),paste(-79.19727,downArrow),paste( -79.48549,downArrow),paste(-5.297791,downArrow))
GrowthinQuantity<-c(paste( -73.53804,downArrow),paste(81.22347,upArrow),paste(-76.07492,downArrow),paste( -79.16116,downArrow),paste(-79.83053,downArrow),paste(-17.98742,upArrow))
bellacanvas<-c("BellaCanvas",0,0,1383.69,357,100,100)   ####### Change 04/03/2017
orginalchuck<-c("Orginal Chuck",137.60,176,0,0,0,0)      ####### Change 04/03/2017
valucap<-c("ValuCap",1737.60,1054,0,0,0,0)
ybrandsale1<-cbind(df2015,df2016,GrowthinSales,GrowthinQuantity)
ybrandsale<-rbind(ybrandsale1,bellacanvas,orginalchuck,valucap)    #
##############month analysis of +/- in Sales and Quantity
Brand=dbSendQuery(mydb,"select (case when sales_flat_order_item.name like 'Yupoong%' then 'Yupoong'
when sales_flat_order_item.name like 'Original Chuck%' then 'Original Chuck'
when sales_flat_order_item.name like 'Valucap%' then 'Valucap'
when sales_flat_order_item.name like '%Next Level Apparel%' then 'Next Level Apparel'
when sales_flat_order_item.name like 'Anvil%' then 'Anvil'
when sales_flat_order_item.name like 'Cirque Mountain Apparel%' then 'Cirque Mountain Apparel'
when sales_flat_order_item.name like 'Independent Trading%' then 'Independent Trading Company'
when sales_flat_order_item.name like 'Gildan%' then 'Gildan'
when sales_flat_order_item.name like 'Flexfit%' then 'Flexfit'
when sales_flat_order_item.name like 'B%+C%' then 'Bella + Canvas'
end) as Brand,
sum(sales_flat_order_item.row_total) as Revenue,
sum(sales_flat_order_item.qty_ordered) as Qty ,
month(sales_flat_order_item.updated_at) as month from sales_flat_order_item,sales_flat_order
where year(sales_flat_order_item.updated_at)=2016 and month(sales_flat_order_item.updated_at)>=2 and
sales_flat_order.entity_id=sales_flat_order_item.order_id and
sales_flat_order.`status`='complete'
group by Brand , month(sales_flat_order_item.updated_at)")
BrandRevQty=fetch(Brand,n=-1)
BrandRevQty[c(1,2),1]<-"others"
msalebrand16feb<-BrandRevQty[grep("2", BrandRevQty$month ,ignore.case=T),]
msalebrand16mar<-BrandRevQty[grep("3", BrandRevQty$month ,ignore.case=T),]
msalebrand16mar<-msalebrand16mar[-2,]
for(i in 1:6)
{
DifferenceInRevenue<-((msalebrand16mar[i,2]-msalebrand16feb[i,2])/msalebrand16feb[i,2]*100)
print(DifferenceInRevenue)
}
for(i in 1:6)
{
DifferenceInQty<-((msalebrand16mar[i,3]-msalebrand16feb[i,3])/msalebrand16feb[i,3]*100)
print(DifferenceInQty)
}
SalesGrowth<-c(paste(-38.04,downArrow),paste(1.45,upArrow),paste(-23.27,downArrow),paste(-14.47,downArrow),paste(3.9,upArrow),paste(-25.63,downArrow))
QuantityGrowth<-c(paste(-31.05,downArrow),paste(-1.44,downArrow),paste(-30.22,downArrow),paste(-13.28,downArrow),paste(3.39,upArrow),paste(-27.16,downArrow))
LastMonthSales<-msalebrand16feb$Revenue
LastmonthQty<-msalebrand16feb$Qty
msalebrand16mar<-cbind(msalebrand16mar,SalesGrowth,QuantityGrowth,LastmonthQty,LastMonthSales)
bellacanvas<-c("Bella Canvas",1383.69,357,100,100,0,0)             ##### Chage04/03/2017
msalebrand16mar<-rbind(msalebrand16mar,bellacanvas)                ####Chage04/03/2017
##########calculation of kpi to find the growth/Fall in percentages in the year(2016-2015)###################################
h=dbSendQuery(mydb,'select sum(grand_total) as Revenue ,Year(created_at) as Year from sales_flat_order
where (Year(created_at)>=2014 and Year(created_at)<=2016) group by  Year')
h1=fetch(h,n=-1)
for(i in 1:2)
{
h5<-((h1[i+1,1]-h1[i,1])/h1[i,1]*100)
print(h5)
}
mincreaseorfallperyear2016<--77.66617
mincreaseorfallperyear2015<-60.54038
############################finding the number of visitors in all years ##################
ywebtraffic=dbSendQuery(mydb,'select count(*) as visitors,year(log_visitor.first_visit_at) as year from log_visitor
group by year(log_visitor.first_visit_at)')
yearwebtraffic=fetch(ywebtraffic,n=-1)
for(i in 1:4)
{
webTraffic<-((yearwebtraffic[i+1,1]-yearwebtraffic[i,1])/yearwebtraffic[i,1]*100)
print(webTraffic)
}
webtrafficgrowthin201213<-252.09
webtrafficgrowthin201314<-17.76
webtrafficgrowthin201415<-41.31
webtrafficgrowthin201516<--71.06
########################top customer for current month#############
mtopcustomer=dbSendQuery(mydb,"select sales_flat_order_address.firstname as Name,sales_flat_order_address.lastname ,sum(sales_flat_order.grand_total) as Revenue
from sales_flat_order_address,sales_flat_order
where sales_flat_order_address.parent_id=sales_flat_order.entity_id and sales_flat_order.`status`='complete'
and year(sales_flat_order.updated_at)=2016 and month(sales_flat_order.updated_at)=3
group by Name order by Revenue desc limit 1 ;")
mtopcust=fetch(mtopcustomer,n=-1)
topcustomercurrentmonth<-mtopcust$Name
topcustomerlname<-mtopcust$lastname
################ New Customer Revenue % ####################################
mnewCustmerval=dbSendQuery(mydb,"SELECT COUNT(*) AS grand_count,sum(Grand_Total) as Revenue FROM( SELECT customer_email,
SUM(sales_flat_order.grand_total) as Grand_Total
FROM sales_flat_order WHERE sales_flat_order.status='complete'
AND year(sales_flat_order.updated_at)=2016 and
month(sales_flat_order.updated_at)=3 GROUP BY
customer_email HAVING COUNT(*) = 1)s")
mnewCustmerRev=fetch(mnewCustmerval,n=-1)
mtotalrev<-dbSendQuery(mydb,"select sum(grand_total) as Total from sales_flat_order
where `status`='complete' and
year(updated_at)=2016 and month(updated_at)=3;")
mtotalrev<-fetch(mtotalrev,n=-1)
mNewCustmerper=round(((mnewCustmerRev$`sum(Grand_Total)`/mtotalrev$Total)*100),2)
mRepeatCustmerval=dbSendQuery(mydb,"SELECT COUNT(*) AS grand_count,sum(Grand_Total) as Revenue FROM( SELECT customer_email,
SUM(sales_flat_order.grand_total) as Grand_Total
FROM sales_flat_order WHERE sales_flat_order.status='complete'
AND year(sales_flat_order.updated_at)=2016 and
month(sales_flat_order.updated_at)=3 GROUP BY
customer_email HAVING COUNT(*) > 1)s")
mRepeatCustmerRev<-fetch(mRepeatCustmerval,n=-1)
mRepeatCustmerper<-round(((mRepeatCustmerRev$`sum(Grand_Total)`/mtotalrev$Total)*100),2)
# print(mRepeatCustmerper)
####################Order picking per cuurent year##############
ordercurrentyear=dbSendQuery(mydb,'select count(*) as ordercount,year(updated_at) as year from sales_flat_order where year(updated_at)>=2015  and status NOT LIKE "canceled"
AND sales_flat_order.status NOT LIKE "closed"
AND sales_flat_order.status NOT LIKE "fraud"
AND sales_flat_order.status NOT LIKE "holded"
AND sales_flat_order.status NOT LIKE "paypal_canceled_reversal" group by year(updated_at)')
orderperyear=fetch(ordercurrentyear,n=-1)
order15=orderperyear[grep("2015", orderperyear$year ,ignore.case=T),1]
order16=orderperyear[grep("2016", orderperyear$year ,ignore.case=T),1]
# orderrate=((order16-order15)/order15)*100
################################quarter wise year calculations######################################################
#####################-----------------------growth/fall in sales in the years(2016 & 2015) up to 3 months----------------#################---
quartersales=dbSendQuery(mydb,'select year(sales_flat_order.created_at) as year,
sum(sales_flat_order.grand_total) as sales
from sales_flat_order
where (month(sales_flat_order.created_at)>=1 and month(sales_flat_order.created_at)<=3)
and year(sales_flat_order.created_at)>=2015  group by year ;')
yquartersalesin201516=fetch(quartersales,n=-1)
quartersalesin2015=yquartersalesin201516[grep("2015", yquartersalesin201516$year ,ignore.case=T),2]
quartersalesin2016=yquartersalesin201516[grep("2016", yquartersalesin201516$year ,ignore.case=T),2]
salesq1<-cbind(quartersalesin2015,quartersalesin2016)
# quartersalesinyear201516=round(((quartersalesin2016-quartersalesin2015)/quartersalesin2015),2)*100
#######################-------------------comparision ofnumber of visitors in the current year(2016) with previousyear(2015)---------------
quartervisitors201516=dbSendQuery(mydb,'select count(*) as visitors ,year(log_visitor.first_visit_at) as year  from log_visitor
where year(log_visitor.first_visit_at) >=2015
and (month(log_visitor.first_visit_at)>=1 and month(log_visitor.first_visit_at)<=3) group by year')
yvisitorsinquarter201516=fetch(quartervisitors201516,n=-1)
quartervisitorsinyear2015=yvisitorsinquarter201516[grep("2015", yvisitorsinquarter201516$year ,ignore.case=T),1]
quartervisitorsinyear2016=yvisitorsinquarter201516[grep("2016", yvisitorsinquarter201516$year ,ignore.case=T),1]
visitorsq1<-cbind(quartervisitorsinyear2016,quartervisitorsinyear2015)
################--------------------Order picking per (2015-2016) only for quarter-------------------##############
orderquarteryear=dbSendQuery(mydb,'select count(*) as ordercount ,year(sales_flat_order.updated_at) as year
from sales_flat_order where year(updated_at)>=2015  and status NOT LIKE "canceled"
AND sales_flat_order.status NOT LIKE "closed"
AND sales_flat_order.status NOT LIKE "fraud"
AND sales_flat_order.status NOT LIKE "holded"
AND sales_flat_order.status NOT LIKE "paypal_canceled_reversal"
and (month(sales_flat_order.updated_at)>=1 and month(sales_flat_order.updated_at)<=3)
group by year(updated_at)')
orderquarterperyear201516=fetch(orderquarteryear,n=-1)
quarterorder2015<-orderquarterperyear201516[grep("2015", orderquarterperyear201516$year ,ignore.case=T),1]
quarterorder2016=orderquarterperyear201516[grep("2016", orderquarterperyear201516$year ,ignore.case=T),1]
q1order<-cbind(quarterorder2016,quarterorder2015)
# orderratein201516=((quarterorder2016-quarterorder2015)/quarterorder2015)*100
##############-----------------avg order value for the years 2015-2016(quarterwise)-------------------##########################
YAvg_Order201516=dbSendQuery(mydb,'select sum(grand_total)/count(*) as AvgOrderValue ,year(sales_flat_order.updated_at) as year
from sales_flat_order where status="complete" and year(sales_flat_order.updated_at)>=2015
and (month(sales_flat_order.updated_at)>=1 and month(sales_flat_order.updated_at)<=3)  group by year')
YAvg_Value201516=fetch(YAvg_Order201516,n=-1)
yavgvalue2015=YAvg_Value201516[grep("2015", YAvg_Value201516$year ,ignore.case=T),1]
yavgvalue2016=YAvg_Value201516[grep("2016", YAvg_Value201516$year ,ignore.case=T),1]
q1avgorder<-cbind(yavgvalue2016,yavgvalue2015)
# Avg_Inc201516=((yavgvalue2016-yavgvalue2015)/yavgvalue2015)*100
#########(for inventory)
###########-----------------Average inventory sold in a year per month(quarter wise)-----------------------
yavgInvent=dbSendQuery(mydb,'select sum(sales_flat_order.total_qty_ordered) as AvgInventory,
year(sales_flat_order.created_at ) as year
from  sales_flat_order
where sales_flat_order.status= "complete" and year(sales_flat_order.created_at)>=2015
and (month(sales_flat_order.created_at)>=1 and month(sales_flat_order.created_at)<=3)
group by year ;')
yInvent=fetch(yavgInvent,n=-1)
yInvent2016<-yInvent[grep("2016", yInvent$year ,ignore.case=T),1]
yInvent2015<-yInvent[grep("2015", yInvent$year ,ignore.case=T),1]
yavginvent2016=(yInvent2016)/3
yavginvent2015=(yInvent2015)/3
quartercomparisionof201516=((yavginvent2016-yavginvent2015)/yavginvent2015)*100
################################Prediction######################################
###############Revenue in quarter 1###############
Revenueinq1<-c(177305.1500,156696.6500,167589.9700)
Month<-c("Jan","Feb","March")
q1dataforRevenue<-data.frame(Revenueinq1,Month)
###############Revenue in quarter2(2013-2015) analysis########################
trends=dbSendQuery(mydb,"select sum(grand_total) as Revenue ,Month(created_at) as Month,Year(created_at) as Year  from sales_flat_order
where (Month(created_at) >=4 and Month(created_at)<=12)
and (Year(created_at)>=2013 and year(created_at)<=2015)
group by  Year(created_at),month(created_at)")
trendsinallYears=fetch(trends,n=-1)
trendsinq2201315<-trendsinallYears %>% group_by(Year) %>% filter(Month==c(4,5,6))
indexq2 <- sample(1:nrow(trendsinq2201315),size = 0.7*nrow(trendsinq2201315))
traindatainq2 <- trendsinq2201315[indexq2,]
testdatainq2 <- trendsinq2201315 [-indexq2,]
lminq2<-lm(Revenue~Month+Year,traindatainq2)
predictioninq2<-predict(lminq2,testdatainq2)
newdata<-data.frame(Year=c(2016),Month=c(4:6))
p2<-predict(lminq2,newdata)
PredictedRevenueinq2<-c(223652,238919,254186)
Month<-c("April","May","June")
q2dataforRevenue<-data.frame(PredictedRevenueinq2,Month)
###############Revenue in quarter3(2013-2015) analysis########################
trendsinq3201315<-trendsinallYears %>% group_by(Year) %>% filter(Month==c(7,8,9))
indexq3 <- sample(1:nrow(trendsinq3201315),size = 0.7*nrow(trendsinq3201315))
traindatainq3 <- trendsinq3201315[indexq3,]
testdatainq3<- trendsinq3201315 [-indexq3,]
lminq3<-lm(Revenue~Month+Year,traindatainq3)
predictioninq3<-predict(lminq3,testdatainq3)
newdata2<-data.frame(Year=c(2016),Month=c(7:9))
p3<-predict(lminq3,newdata2)
PredictedRevenueinq3<-c(271401.3 ,288000.2,304599.1)
Month<-c("July","August","September")
q3dataforRevenue<-data.frame(PredictedRevenueinq3,Month)
###############Revenue in quarter4(2013-2015) analysis########################
trendsinq4201315<-trendsinallYears %>% group_by(Year) %>% filter(Month==c(10,11,12))
indexq4 <- sample(1:nrow(trendsinq4201315),size = 0.7*nrow(trendsinq4201315))
traindatainq4 <- trendsinq4201315[indexq4,]
testdatainq4<- trendsinq4201315 [-indexq4,]
lminq4<-lm(Revenue~Month+Year,traindatainq4)
predictioninq4<-predict(lminq3,testdatainq4)
newdata3<-data.frame(Year=c(2016),Month=c(10:12))
p4<-predict(lminq4,newdata3)
PredictedRevenueinq4<-c(303619.9,281593.8 ,259567.8)
Month<-c("October","November","December")
q4dataforRevenue<-data.frame(PredictedRevenueinq4,Month)
###############Total revenues in all quarters(sum)##########
TotalRevenueinQ1<-sum(Revenueinq1)
TotalRevenueinQ2<-sum(PredictedRevenueinq2)
TotalRevenueinQ3<-sum(PredictedRevenueinq3)
TotalRevenueinQ4<-sum(PredictedRevenueinq4)
##########number of visitors in q1##############
visitorsq1<-c(55371,59321,49380)
Month<-c("Jan","Feb","March")
q1dataforVisitors<-data.frame(visitorsq1,Month)
###########number of visitors in q2(2013-15)#####################
visitors=dbSendQuery(mydb,'select count(*) as visitors, year(log_visitor.first_visit_at) as year,
month(log_visitor.first_visit_at) as month from log_visitor
where (year(log_visitor.first_visit_at)>=2013 and year(log_visitor.first_visit_at)<=2015)
and (month(log_visitor.first_visit_at)>=4 and month(log_visitor.first_visit_at)<=12)
group by year(log_visitor.first_visit_at),month(log_visitor.first_visit_at)')
vis=fetch(visitors,n=-1)
visitorsinq2201315<-vis %>% group_by(year) %>% filter(month==c(4,5,6))
visitorsq2 <- sample(1:nrow(visitorsinq2201315),size = 0.7*nrow(visitorsinq2201315))
visitorstraindataq2 <- visitorsinq2201315[visitorsq2,]
visitorstestdataq2<- visitorsinq2201315 [-visitorsq2,]
vislminq2<-lm(visitors~month+year,visitorstraindataq2)
vispredictioninq2<-predict(vislminq2,visitorstestdataq2)
newdataV1<-data.frame(year=c(2016),month=c(4:6))
p2<-predict(vislminq2,newdataV1)
PreictedVisitorsinq2<-c(46626.97,49271.78,51916.59)
Month<-c("April","May","June")
q2dataforVisitors<-data.frame(PreictedVisitorsinq2,Month)
###########number of visitors in q3(2013-15)#####################
visitorsinq3201315<-vis %>% group_by(year) %>% filter(month==c(7,8,9))
visitorsq3 <- sample(1:nrow(visitorsinq3201315),size = 0.7*nrow(visitorsinq3201315))
visitorstraindataq3 <- visitorsinq3201315[visitorsq3,]
visitorstestdataq3<- visitorsinq3201315 [-visitorsq3,]
vislminq3<-lm(visitors~month+year,visitorstraindataq3)
vispredictioninq3<-predict(vislminq3,visitorstestdataq3)
newdataV3<-data.frame(year=c(2016),month=c(7:9))
p3<-predict(vislminq3,newdataV3)
PreictedVisitorsinq3<-c(54978.67,58169.67,61360.67)
Month<-c("July","August","September")
q3dataforVisitors<-data.frame(PreictedVisitorsinq3,Month)
###########number of visitors in q4(2013-15)#####################
visitorsinq4201315<-vis %>% group_by(year) %>% filter(month==c(10,11,12))
visitorsq4 <- sample(1:nrow(visitorsinq4201315),size = 0.7*nrow(visitorsinq4201315))
visitorstraindataq4 <- visitorsinq4201315[visitorsq4,]
visitorstestdataq4<- visitorsinq4201315 [-visitorsq4,]
vislminq4<-lm(visitors~month+year,visitorstraindataq4)
vispredictioninq4<-predict(vislminq4,visitorstestdataq4)
newdataV4<-data.frame(year=c(2016),month=c(10:12))
p4<-predict(vislminq4,newdataV4)
PreictedVisitorsinq4<-c(74081.98 ,78146.90,82211.82)
Month<-c("October","November","December")
q4dataforVisitors<-data.frame(PreictedVisitorsinq4,Month)
###############Total number of visitors in all quarters(sum)##########
totalNumberofVisitorsinQ1<-(sum(visitorsq1)/1000)
totalNumberofVisitorsinQ2<-(sum(PreictedVisitorsinq2)/1000)
totalNumberofVisitorsinQ3<-(sum(PreictedVisitorsinq3)/1000)
totalNumberofVisitorsinQ4<-(sum(PreictedVisitorsinq4)/1000)
##BenchMarking of Ecomerce Ration
ypVisits=dbSendQuery(mydb,"select count(*)  as Visitor,month(log_visitor.first_visit_at) as Month from log_visitor where year(log_visitor.first_visit_at)>=2015 group by month(log_visitor.first_visit_at);")
ypVisitsval=fetch(ypVisits,n=-1)
ypTransactions=dbSendQuery(mydb,"select count(*) as Count ,month(sales_flat_order.created_at) as Month from sales_flat_order where status='complete' and year(sales_flat_order.created_at)>=2015 group by month(sales_flat_order.created_at);")
ypTrValue=fetch(ypTransactions,n=-1)
ypERatio=(ypTrValue/ypVisitsval)*100
####Visits by month and sales graph############
MVisits2016=dbSendQuery(mydb,"select month(first_visit_at) as Month,count(*) as Count from log_visitor where year(first_visit_at)=2016 group by month(first_visit_at);")
MVisitscount2016=fetch(MVisits2016,n=-1)
Msales2016=dbSendQuery(mydb,"select sum(sales_flat_order.grand_total) as Sales from sales_flat_order where year(sales_flat_order.created_at)=2016 group by month(sales_flat_order.created_at);")
Msalesval2016=fetch(Msales2016,n=-1)
Month<-c("Jan","Feb","Mar")
Visits<-MVisitscount2016$Count
Sales<-round(Msalesval2016$Sales)
MVisitsSales<-data.frame(Month,Visits,Sales)
MVisitsSales$Month <- factor(MVisitsSales$Month, levels = MVisitsSales[["Month"]])
#############Visits for 2015 by montly graph###################
MVisits2015=dbSendQuery(mydb,"select month(first_visit_at) as Month,count(*) as Count from log_visitor where year(first_visit_at)=2015 group by month(first_visit_at);")
MVisitscount2015=fetch(MVisits2015,n=-1)
Msales2015=dbSendQuery(mydb,"select sum(sales_flat_order.grand_total) as Sales from sales_flat_order where year(sales_flat_order.created_at)=2015 group by month(sales_flat_order.created_at);")
Msalesval2015=fetch(Msales2015,n=-1)
Month2015<-c("Jan","Feb","Mar","Apr","May","June","July","Aug","Sep","Oct","Nov","Dec")
Visits2015<-MVisitscount2015$Count
Sales2015<-round(Msalesval2015$Sales)
MVisitsSales2015<-data.frame(Month2015,Visits2015,Sales2015)
MVisitsSales2015$Month2015 <- factor(MVisitsSales2015$Month2015, levels = MVisitsSales2015[["Month2015"]])
runApp('C:/Users/anitha/Downloads/SLC_POC (11)/SLC_POC/SLC_POC')
setwd("C:\\Users\\anitha\\Downloads\\Restaurent_POC")
getwd()
