{
    "collab_server" : "",
    "contents" : "---\ntitle: \" RealEstate_Poc\"\noutput: \n  flexdashboard::flex_dashboard:\n   orientation: rows\n   \n---\n\n```{r}\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(plyr)\nlibrary(flexdashboard)\nlibrary(knitr)\nlibrary(d3heatmap)\nlibrary(highcharter)\nlibrary(purrr)\nlibrary(dplyr)\nlibrary(plyr)\nlibrary(treemap)\nlibrary(viridisLite)\nlibrary(maps)\nlibrary(ggplot2)\nlibrary(dygraphs)\nlibrary(data.table)\nlibrary(DT)\nlibrary(rbokeh)\nlibrary(rhandsontable)\nlibrary(rsconnect)\nlibrary(shiny)\nlibrary(shinystan)\n```\n\n---\n\nCurrentMonth House Prices\n=====================================\nrow 1\n-----------------------------------------------------------------------\n\n### Home Value\n```{r}\nlibrary(plotly)\n  library(ggplot2)\nlibrary(flexdashboard)\nlibrary(flexdashboard)\nlibrary(sqldf)\nlibrary(gsubfn)\nlibrary(proto)\ndb <- dbConnect(SQLite(), dbname='Test1.sqlite')\nhCurMonth<-dbReadTable(db, 'current-month-summary')\n\nhCurMonVal<-hCurMonth$Zhvi\nvalueBox(hCurMonVal,\n         icon = \"fa fa-dollar\",\n         color = ifelse(hCurMonVal > 10, \"warning\", \"primary\"))\n```\n\n### Percent Fall from Peak\n```{r}\nlibrary(flexdashboard)\nlibrary(sqldf)\nlibrary(gsubfn)\nlibrary(proto)\ndb <- dbConnect(SQLite(), dbname='Test1.sqlite')\nhCurMonth<-dbReadTable(db, 'current-month-summary') \nhCurPerFall<-hCurMonth$PctFallFromPeak\nhCurPerFall<-round((hCurPerFall*100),2)\ngauge(hCurPerFall, min = -10, max = 10, symbol = \"%\",\n      gaugeSectors(success = c(0, 10), warning = c(-3, 0), danger = c(-10, -3)))\n```\n\n### Current Month Growth\n```{r}\nlibrary(flexdashboard)\nhCurMonGro<-hCurMonth$MoM\nhCurMonGro<-round((hCurMonGro*100),2)\ngauge(hCurMonGro, min = 0, max = 4, symbol = \"%\",\n      gaugeSectors(success = c(2, 4), warning = c(1, 2), danger = c(0, 1)\n))\n```\n\n### Current Qurter Growth\n```{r}\nlibrary(flexdashboard)\nhQuGro<-hCurMonth$QoQ\nhQuGro<-round(hQuGro*100,2)\ngauge(hQuGro, min = 0, max = 5, symbol = \"%\",\n      gaugeSectors(success = c(4, 5), warning = c(2, 3), danger = c(1, 2)))\n```\n\n### Current Year Growth\n```{r}\nlibrary(flexdashboard)\nhYeVal<-hCurMonth$YoY\nhYeGrowth<-round(hYeVal*100,2)\ngauge(hYeGrowth, min = 0, max = 10, symbol = \"%\",\n      gaugeSectors(success = c(6, 10), warning = c(3, 5), danger = c(0, 2)))\n\n```\n\n### Peak Home Value\n```{r}\nlibrary(flexdashboard)\nhCurPekVal<-hCurMonth$PeakZHVI\nvalueBox(hCurPekVal,\n         icon = \"fa fa-long-arrow-up\",\n         color = ifelse(hCurMonVal > 10, \"warning\", \"primary\"))\n\n```\n\nROW\n--------------------------\n### Peak Month\n```{r}\nlibrary(flexdashboard)\nhCurPekMon<-hCurMonth$PeakMonth\nvalueBox(hCurPekMon,icon = \"fa fa-arrow-circle-o-up\",color = \"blue\")\n```\n\n### Top Metro\n```{r}\nlibrary(flexdashboard)\n#hCurrMonMet<-read.csv(\"metroCurrMon.csv\")\nhCurrMonMet<-dbReadTable(db, 'metro_current_month')\nhTopMetro<-hCurrMonMet$RegionName[1]\nhTopMetVal<-hCurrMonMet$Zhvi[1]/1000\nvalueBox(hTopMetro,icon = \"fa fa-hand-o-left\",paste0(\"Top Metro:$  \",hTopMetVal, \"K\"),color = \"danger\")\n```\n\n###Top County\n```{r}\nlibrary(flexdashboard)\n#hCurMonCou<-read.csv(\"countycurmnth.csv\")\nhCurMonCou<-dbReadTable(db,'county-current-month')\nhCurMonCouTop<-max(hCurMonCou$Zhvi)\n# hCurMonCou$Zhvi<-sort(hCurMonCou$Zhvi)\nhCurMonCouTop<-hCurMonCouTop/1000\nhTopCounty<-hCurMonCou$RegionName[1]\nvalueBox(hTopCounty,icon = \"fa-pencil\", paste0(\"Top County:$  \",hCurMonCouTop,\"K\"),color=\"green\")\n\n```\n\n###Top City\n```{r}\nlibrary(flexdashboard)\n#hCurMonCity<-read.csv(\"citycurmnth.csv\")\nhCurMonCity<-dbReadTable(db,'city-current-month')\nhTopCityValue<-max(hCurMonCity$Zhvi)\n# hCurMonCity$Zhvi<-sort(CityCM$Zhvi)\nhCurMonCityVal<-hTopCityValue/1000\nhCurMonTopCity<-hCurMonCity$RegionName[1]\nvalueBox(hCurMonTopCity,icon = \"fa fa-hand-o-left\", paste0(\"Top City:$   \",hTopCityValue,\"K\"),\n         color=ifelse(hCurMonCityVal == hCurMonVal, \"warnings\",\"danger\"))\n```\n\n### Peak Quarter\n```{r}\nhCurrMonPeakQu<-hCurMonth$PeakQuarter\nvalueBox(hCurrMonPeakQu,icon = \"fa fa-caret-square-o-up\",color = \"blue\")\n```\n\nrow \n----------\n### Home Values for Counties\n```{r}\nlibrary(highcharter)\n#hCurMonCounty <- read.csv(\"county_cuurentmnth_HVandPHV.csv\")\n#data(countycurrmnth)\nhCurMonCounty<-dbReadTable(db,'county_currentmnth_HVandPHV')\nhc <- highchart() %>% \n  hc_xAxis(categories = hCurMonCounty$RegionName) %>% \n    hc_add_series(name = \"Home_Value\", data = hCurMonCounty$Zhvi) %>% \n   hc_add_series(name = \"Peak_Home_Value\", data = hCurMonCounty$PeakZHVI)\n  hc\n```\n\n### Home Values for Metros\n```{r }\n#hCurrMonMetro<-read.csv(\"metro_single1.csv\")\nhCurrMonMetro<-dbReadTable(db,'metro-single1')\nhCurMonRegion<-hCurrMonMetro$RegionName\nhCurrMonAvg_2017<-round(hCurrMonMetro$AHV_2017)\n plot_ly(hCurrMonMetro,x=hCurMonRegion,y=hCurrMonAvg_2017,mode=\"markers\",color = as.factor(hCurrMonAvg_2017))\n\n```\n\nSingle Family Residences {data-navmenu=\"House Prices\"}\n===================================== \nrow\n--------------------------\n### Current Year Top County in Growth\n```{r}\n#CCM<-read.csv(\"countycurmnth.csv\")\nCCM<-dbReadTable(db,'county-current-month')\ntopyoy<-round(max(CCM$YoY)*100,2)\ngauge(topyoy, min = 0, max = 50, symbol=\"%\",label = paste0(\"Siskiyou \"),\n      gaugeSectors(success = c(30, 50), warning = c(20, 30), danger = c(0, 20)\n))\n```\n\n### Current Quarter Top County in Growth\n```{r}\ntopqoq<-round(max(CCM$QoQ)*100,2)\ngauge(topqoq, min = 0, max = 10, symbol=\"%\",label = paste(\"TopQGrowth:Marin\"),gaugeSectors(\n  success = c(6, 10), warning = c(3, 6), danger = c(0, 3)\n))\n```\n\n### Current Month Top County in Growth\n```{r}\ntopmom<-round(max(CCM$MoM)*100,2)\ngauge(topmom, min = 0, max = 5, symbol=\"%\",label = paste(\"TopGrowth:Mariposa\"),gaugeSectors(\n  success = c(4, 5), warning = c(2, 4), danger = c(0, 2)\n))\n```\n\n\nRow {.tabset .tabset-fade}\n-------------------------------------\n\n### Average Home Values for Cities  \n```{r}\nlibrary(highcharter)\nlibrary(highr)\n#book<-read.csv(\"citywise_HV_allyears_single.csv\")\nbook<-dbReadTable(db,'City-wise-HV-allyears-single')\n\nhc <- highchart() %>% \n  hc_xAxis(categories =book$RegionName) %>% \n  hc_add_series(name = \"AHV_2010\", data = book$AHV_2010) %>% \n  hc_add_series(name = \"AHV_2011\", data = book$AHV_2011) %>% \n   hc_add_series(name = \"AHV_2012\", data = book$AHV_2012) %>% \n   hc_add_series(name = \"AHV_2013\", data = book$AHV_2013) %>% \n   hc_add_series(name = \"AHV_2014\", data = book$AHV_2014) %>% \n   hc_add_series(name = \"AHV_2015\", data = book$AHV_2015) %>% \n   hc_add_series(name = \"AHV_2016\", data = book$AHV_2016)  \n   \n   hc\n```\n\n### Average Home Values for Counties\n```{r}\nlibrary(d3heatmap)\nlibrary(RColorBrewer)\nlibrary(flexdashboard)\nlibrary(sqldf)\nlibrary(gsubfn)\nlibrary(proto)\n#db <- dbConnect(SQLite(), dbname='Test1.sqlite')\ncountyallyearsheat <- read.csv(\"Countywiseallyearsheat.csv\",row.names=1)\n#countyallyearsheat<-dbReadTable(db,'year-sheet')\n\n\nd3heatmap(countyallyearsheat, scale = \"column\",width=2000)\n\n```\n\n\n### Home Values of Metros For Current Year\n```{r}\n#curyr<-read.csv(\"metrocurrentyr.csv\")\ncuryr<-dbReadTable(db,'metro-current-year')\ncolnames(curyr)<-c(\"RegionName\",\"Jan\",\"Feb\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"Sep\",\"Oct\",\"Nov\",\"Dec\")\nDT::datatable(curyr, options = list(\n  pageLength = 20\n))\n \n```\n\n### Growth  of Home values  for Metros\n```{r}\n#metroHVSFR<-read.csv(\"metroHVSFR.csv\",row.names = 1)\nmetroHVSFR<-dbReadTable(db,'metro-HVSFR')\nplot_ly(metroHVSFR,y=metroHVSFR$RegionName) %>%\n  add_lines(x = metroHVSFR$PerGrowth.fall2013, name = \"Growth_2013\" ) %>%\n  add_bars(x = metroHVSFR$PerGrowth.fall2014, name = \"Growth_2014\", visible = T) %>%\n  add_markers(x = metroHVSFR$PerGrowth.fall2015, name = \"Growth_2015\", visible = T) %>%\n  add_bars(x = metroHVSFR$PerGrowth.fall2016, name = \"Growth_2016\", visible = T)  \n\n```\n\n1 BH's {data-navmenu=\"House Prices\"}\n===================================== \nROW {.tabset .tabset-fade}\n---------------------------\n###  Home Values for  Counties \n```{r}\n#county_1BH<-read.csv(\"countywise_1BH.csv\")\ncounty_1BH<-dbReadTable(db,'county_wise_1BH')\nRegion<-county_1BH$RegionName\nHome_Values<-county_1BH$Avr_coHV_2012\nav_2013<-county_1BH$Avg_coHV_2013\nav_2014<-county_1BH$Avg_coHV_2014\nav_2015<-county_1BH$Avg_coHV_2015\nav_2016<-county_1BH$Avg_coHV_2016\nplot_ly(county_1BH,x=~Region) %>%\n  add_bars(y = ~Home_Values, name = \"AHV_2012\" ) %>%\n  add_bars(y = ~av_2013, name = \"AHV_2013\", visible = T) %>%\n  add_bars(y = ~av_2014, name = \"AHV_2014\", visible = T) %>%\n  add_bars(y = ~av_2015, name = \"AHV_2015\", visible = T) %>%\n  add_bars(y = ~av_2016, name = \"AHV_2016\", visible = T) \n\n```\n\n\n\nROW {.tabset .tabset-fade}\n---------------------------\n### Home Values for Metros \n```{r}\nlibrary(htmltools)\nlibrary(htmlwidgets)\nlibrary(metricsgraphics)\nlibrary(RColorBrewer)\nlibrary(plotly)\n#MA1BH<-read.csv(\"metrowise1BH.csv\")\nMA1BH<-dbReadTable(db,'metro-wise-1Bh')\n\n\nRegionname<-MA1BH$RegionName\nHomeValues<-MA1BH$Avg_meHV_2012\nAvg2013<-MA1BH$Avg_meHV_2013\nAvg2014<-MA1BH$Avg_meHV_2014\nAvg2015<-MA1BH$Avg_meHV_2015\nAvg2016<-MA1BH$Avg_meHV_2016\nplot_ly(MA1BH,x=~Regionname) %>%\n  add_lines(y = ~HomeValues, name = \"AHV_2012\" ) %>%\n  add_lines(y= ~Avg2013, name = \"AHV_2013\", visible = T) %>%\n  add_lines(y = ~Avg2014, name = \"AHV_2014\", visible = T) %>%\n  add_lines(y = ~Avg2015, name = \"AHV_2015\", visible = T) %>%\n  add_lines(y = ~Avg2016, name = \"AHV_2016\", visible = T) \n\n```\n\n### Growth of Home values  for Metros\n```{r}\nRegion<-MA1BH$RegionName\nGrowth_Values<-MA1BH$PerGrowth_2013\nPerGrowth_2014<-MA1BH$PerGrowth_2014\nPerGrowth_2015<-MA1BH$PerGrowth_2015\nPerGrowth_2016<-MA1BH$PerGrowth_2016\nplot_ly(MA1BH,x=~Region) %>%\n  add_bars(y = ~Growth_Values, name = \"Growth_2013\" ) %>%\n  add_bars(y = ~PerGrowth_2014, name = \"Growth_2014\") %>%\n  add_bars(y = ~PerGrowth_2015, name = \"Growth_2015\") %>%\n  add_bars(y = ~PerGrowth_2016, name = \"Growth_2016\") \n  \n\n```\n\nROW {.tabset .tabset-fade}\n---------------------------\n### Home  Values for cities\n```{r}\n#citywise1BH<-read.csv(\"citywise1BH.csv\")\ncitywise1BH<-dbReadTable(db,'city-wise-1BH')\nRegion<-citywise1BH$RegionName\nHomeValues<-citywise1BH$Avg_ciHV_2012\nCiav_2013<-citywise1BH$Avg_ciHV_2013\nCiav_2014<-citywise1BH$Avg_ciHV_2014\nCiav_2015<-citywise1BH$Avg_ciHV_2015\nCiav_2016<-citywise1BH$Avg_ciHV_2016\nCiav_2017<-citywise1BH$X2017.01\n\nplot_ly(citywise1BH,x=~Region) %>%\n  add_markers(y = ~HomeValues, name = \"AHV_2012\" ) %>%\n  add_markers(y = ~Ciav_2013, name = \"AHV_2013\", visible = T) %>%\n  add_markers(y = ~Ciav_2014, name = \"AHV_2014\", visible = T) %>%\n  add_markers(y = ~Ciav_2015, name = \"AHV_2015\", visible = T) %>%\n  add_markers(y = ~Ciav_2016, name = \"AHV_2016\", visible = T) %>%\n  add_markers(y = ~Ciav_2017, name = \"AHV_2017\", visible = T) \n\n\n```\n\n### Growth of Home values  for Cities\n```{r}\nRegion<-as.list(citywise1BH$RegionName)\nPerGrowth_2013<-as.list(citywise1BH$PerGrowth_2013)\nPerGrowth_2014<-as.list(citywise1BH$PerGrowth_2014)\nPerGrowth_2015<-as.list(citywise1BH$PerGrowth_2015)\nPerGrowth_2016<-as.list(citywise1BH$PerGrowth_2016)\n\n\nplot_ly(citywise1BH,x=~Region) %>%\n  add_lines(y = ~PerGrowth_2013,name = \"2012\" ) %>%\n  add_markers(y = ~PerGrowth_2014, name = \"2013\", visible = T) %>%\n  add_markers(y = ~PerGrowth_2015, name = \"2014\", visible = T) %>%\n  add_markers(y = ~PerGrowth_2016, name = \"2015\", visible = T)\n\n\n\n```\n\n2 BH's {data-navmenu=\"House Prices\"}\n=====================================\nRow {.tabset .tabset-fade}\n-------------------------------------\n###  Home Values for Counties\n```{r}\n\n#county_2bh<-read.csv(\"countywise2BH.csv\")\ncounty_2bh<-dbReadTable(db,'county-wise-2BH')\n\n\nplot_ly(county_2bh,\n             type = \"area\",        # all \"scatter\" attributes: https://plot.ly/r/reference/#scatter\n             x = ~RegionName,               # more about scatter's \"x\": /r/reference/#scatter-x\n             y = ~HV2012,            # more about scatter's \"y\": /r/reference/#scatter-y\n             name = \"AHV_2012\",\n            \n             marker = list(           # marker is a named list, valid keys: /r/reference/#scatter-marker\n               color=\"purple\"        # more about marker's \"color\" attribute: /r/reference/#scatter-marker-color\n             )) %>%\n\n  add_bars(x = ~RegionName,                                         \n            y = ~HV2013,\n            type=\"Box\",\n            name=\"AHV_2013\",\n            mode = 'markers', \n           \n            line = list(                                       # line is a named list, valid keys: /r/reference/#scatter-line\n              color = \"blue\"                              # line's \"color\": /r/reference/#scatter-line-color\n                                               # line's \"dash\" property: /r/reference/#scatter-line-dash\n            )\n  ) %>%\n  add_lines(x = ~RegionName,                                         # scatter's \"x\": /r/reference/#scatter-x\n            y = ~HV2014,\n            name=\"AHV_2014\",\n            mode = 'markers', \n         \n            line = list(                                       # line is a named list, valid keys: /r/reference/#scatter-line\n              color = \"red\",                               # line's \"color\": /r/reference/#scatter-line-color\n              dash = \"dashed\"                                  # line's \"dash\" property: /r/reference/#scatter-line-dash\n            )\n  ) %>%\nadd_lines(x = ~RegionName,                                         # scatter's \"x\": /r/reference/#scatter-x\n            y = ~HV2015,\n            name=\"AHV_2015\",\n            mode = 'bars',\n           \n            line = list(                                       # line is a named list, valid keys: /r/reference/#scatter-line\n              color = \"green\"                               # line's \"color\": /r/reference/#scatter-line-color\n                                              # line's \"dash\" property: /r/reference/#scatter-line-dash\n            )\n  ) %>%\nadd_lines(x = ~RegionName,                                         # scatter's \"x\": /r/reference/#scatter-x\n            y = ~HV2016,\n            name=\"AHV_2016\",\n            mode = 'bars', \n         \n            line = list(                                       # line is a named list, valid keys: /r/reference/#scatter-line\n              color = \"pink\" ,\n              dash = \"dashed\"    # line's \"color\": /r/reference/#scatter-line-color\n                                               # line's \"dash\" property: /r/reference/#scatter-line-dash\n            )\n  ) %>%\n\n\n  layout(                        # all of layout's properties: /r/reference/#layout\n         title = \" Home Values for Counties\", # layout's title: /r/reference/#layout-title\n         xaxis = list(           # layout's xaxis is a named list. List of valid keys: /r/reference/#layout-xaxis\n            title = \"Region\",      # xaxis's title: /r/reference/#layout-xaxis-title\n            showgrid = T),       # xaxis's showgrid: /r/reference/#layout-xaxis-showgrid\n         yaxis = list(           # layout's yaxis is a named list. List of valid keys: /r/reference/#layout-yaxis\n            title = \"Home Value\")    # yaxis's title: /r/reference/#layout-yaxis-title\n  \n \n          \n )\n\n\n```\n\n### Growth of Home values  for Counties\n```{r}\n#county_2bh<-read.csv(\"countywise2BH.csv\")\ncounty_2bh<-dbReadTable(db,'county-wise-2BH')\nhc <- highchart() %>% \n  hc_xAxis(categories = county_2bh$RegionName) %>%\n  hc_add_series(name = \"AHV_2013\", data = county_2bh$PctGrowth_2013) %>% \n  hc_add_series(name = \"AHV_2014\", data = county_2bh$PctGrowth_2014) %>% \n  hc_add_series(name = \"AHV_2015\", data = county_2bh$PctGrowth_2015) %>% \n  hc_add_series(name = \"AHV_2016\", data = county_2bh$PctGrowth_2016)\nhc\n\n```\n\n###  Home Values for Cities\n```{r}\n#df <- read.csv(\"citywise2bh.csv\")\ndf<-dbReadTable(db,'city-wise-2BH')\nhighchart() %>%\n  hc_chart(type = \"bubble\") %>%\n  hc_xAxis(categories=df$RegionName) %>%\n  hc_add_series(name = \"AHV_2012\", data =df$Avg_city_2BH_2012) %>%\n  hc_add_series(name = \"AHV_2013\", data = df$Avg_city_2bh_2013) %>%\n  hc_add_series(name = \"AHV_2014\",data = df$Avg_city_2014) %>%\n  hc_add_series(name = \"AHV_2015\",data = df$Avg_city_2015) %>%\n  hc_add_series(name = \"AHV_2016\",data = df$Avg_city_2016)\n```\n\n### Growth of Home values  for Cities\n```{r}\n#city2BH<-read.csv(\"citywise2bh.csv\")\ncity2BH<-dbReadTable(db,'city-wise-2BH')\nregion1<-as.list(city2BH$RegionName)\nGrowth_Values<-as.list(city2BH$PctGrowth_2013)\ncityGP2<-as.list(city2BH$PctGrowth_2014)\ncityGP3<-as.list(city2BH$PctGrowth_2015)\ncityGP4<-as.list(city2BH$PctGrowth_2016)\nplot_ly(city2BH, x = ~region1) %>%\n  add_polygons(y=~Growth_Values, name = \"AHV_2013\") %>%\n  add_bars(y=~PctGrowth_2014, name = \"AHV_2014\", visible = T) %>%\n  add_lines(y=~PctGrowth_2015, name = \"AHV_2015\", visible = T) %>%\n  add_paths(y=~PctGrowth_2016, name = \"AHV_2016\", visible = T)\n\n``` \n\ncolumn {.tabset .tabset-fade}\n------------------------------\n### Homes Values for Metros\n```{r}\n#metro_2bh<-read.csv(\"metro_wise_2bh.csv\")\nmetro_2bh<-dbReadTable(db,'metro-wise-2BH')\np1 <- plot_ly(metro_2bh, x = ~RegionName, y = ~Avg_met_2013) %>%\n  add_bars(name = ~\"AHV_2013\")\np2 <- plot_ly(metro_2bh, x = ~RegionName, y = ~Avg_met_2014) %>%\n  add_lines(name = ~\"AHV_2014\")\n p3 <- plot_ly(metro_2bh, x = ~RegionName, y = ~Avg_met_2015) %>%\n   add_lines(name = ~\"AHV_2015\")\n p4 <- plot_ly(metro_2bh, x = ~RegionName, y = ~Avg_met_2016) %>%\n   add_bars(name = ~\"AHV_2016\")\np <- subplot(p1, p2,p3,p4,nrows=2,margin = 0.05)\np\n\n```\n\n\nCurrentMonth Rental Prices\n=====================================\nROW\n---------------------------------------\n###  Rental Value\n```{r}\n#rCurMonth <- read.csv(\"currmonthstate_zri.csv\")\nrCurMonth<-dbReadTable(db,'current-month-state-zri')\nrCurMonVal<-rCurMonth$Zri\nvalueBox(rCurMonVal,icon = \"fa-dollar\", color = ifelse(rCurMonVal > 10, \"warning\", \"primary\"))\n```\n\n### Current Month Rental Growth\n```{r}\nrCurMonGro<-rCurMonth$MoM\nrCurMonGro<-round((rCurMonGro*100),2)\ngauge(rCurMonGro, min = 0, max = 4, symbol = \"%\",\n      gaugeSectors(success = c(2, 4), warning = c(1, 2), danger = c(0, 1)\n))\n```\n\n### Current Qurter Rental Growth\n```{r}\nrCurMonQuVal<-rCurMonth$QoQ\nrCurMonQuVal<-round(rCurMonQuVal*100,2)\ngauge(rCurMonQuVal, min = 0, max = 5, symbol = \"%\",\n      gaugeSectors(success = c(3, 5), warning = c(1, 3), danger = c(0, 1)))\n```\n\n### Current Year Rental Growth\n```{r}\nrcurMonYeVal<-rCurMonth$YoY\nrcurMonYeVal<-round(rcurMonYeVal*100,2)\n\ngauge(rcurMonYeVal, min = 0, max = 10, symbol = \"%\",\n      gaugeSectors(success = c(6, 10), warning = c(3, 5), danger = c(0, 2)))\n```\n\nROW\n--------------------------\n### Peak Month\n```{r}\nvalueBox(\"2016-07\",icon = \"fa fa-arrow-circle-o-up\",color = \"danger\")\n```\n\n### Top Metro\n```{r}\n#rCurMonMetro<-read.csv(\"metrocurr_zri.csv\")\nrCurMonMetro<-dbReadTable(db,'metro_current-zri')\nrCurMonTopMetro<-rCurMonMetro$RegionName[1]\nrCurMonTopMetVal<-rCurMonMetro$Zri[1]\nvalueBox(rCurMonTopMetro,icon = \"fa fa-hand-o-left\",paste0(\"Top Metro:$   \",rCurMonTopMetVal),color = \"blue\")\n\n```\n\n###Top County\n```{r}\n#rCurMonCounty<-read.csv(\"county_rental_zri.csv\")\nrCurMonCounty<-dbReadTable(db,'county-rental-zri')\nrCurMonTopCouVal<-rCurMonCounty$Zri[1]\nrCurMonTopCounty<-rCurMonCounty$RegionName[1]\nvalueBox(rCurMonTopCounty,icon = \"fa-pencil\", paste0(\"Top County:$   \",rCurMonTopCouVal),color=\"green\")\n```\n\n###Top City\n```{r}\n#rCurMonCity<-read.csv(\"Citywise_rental_Zri.csv\")\nrCurMonCity<-dbReadTable(db, 'city_wise_rental-Zri')\nrCurMonTopCityVal<-rCurMonCity$Zri[1]\nrCurMonTopCity<-rCurMonCity$RegionName[1]\nvalueBox(rCurMonTopCity,icon = \"fa fa-hand-o-left\", paste0(\"Top City:$   \",rCurMonTopCityVal),color=\"blue\")\n```\n\n### Peak Quarter\n```{r}\nvalueBox(\"2016-Q3\",icon = \"fa fa-caret-square-o-up\",color = \"danger\")\n```\n\nRow \n-------------------------------------\n### Rental Values for Cities\n```{r}\n#rCurMonCitySF<-read.csv(\"cityrentalSFR.csv\")\nrCurMonCitySF<-dbReadTable(db,'city-rental-SFR')\n# set.seed(100)\nplot_ly(rCurMonCitySF, x = ~rCurMonCitySF$RegionName, y = ~rCurMonCitySF$Avg2016, color = ~rCurMonCitySF$RegionName,\n         text = ~paste(\"Region: \", rCurMonCitySF$RegionName))%>%\n   layout(xaxis = list(title =\"Regions\"),\n         yaxis = list(title =\"RentalValues\"))\n\n```\n\n### Rental Values for Metros\n```{r}\n#rCurMonMet <- read.csv(\"metrocurr_zri.csv\")\nrCurMonMet<-dbReadTable(db,'metro_current-zri')\nRental_Values<-rCurMonMet$Zri\nplot_ly(rCurMonMet,x=rCurMonMet$RegionName,y=rCurMonMet$Zri,color = as.factor(rCurMonMet$RegionName),type = \"scatter\")\n\n```\n\nSingle Family {data-navmenu=\"Rental Prices\"}\n===================================== \nROW \n------------------------------\n### Rental Values for Metros\n```{r}\nlibrary(flexdashboard)\nlibrary(rbokeh)\n#ren_Met_Sfr<-read.csv(\"Metro_Rent_SFR.csv\")\nren_Met_Sfr<-dbReadTable(db,'Metro-Rental-SFR')\n\"RV_2012\"<-ren_Met_Sfr$Avg_Met_SFR_2012\n\"RV_2013\"<-ren_Met_Sfr$Avg_Met_SFR_2013\n\"RV_2014\"<-ren_Met_Sfr$Avg_Met_SFR_2014\n\"RV_2015\"<-ren_Met_Sfr$Avg_Met_SFR_2015\n\"RV_2016\"<-ren_Met_Sfr$Avg_Met_SFR_2016\n\ngmap(lat = 36.5, lng = -119.462, zoom = 7,height = 2000,width = 2000) %>%\n  ly_points(log, lat, data = ren_Met_Sfr, alpha = 0.8, col = \"red\",\n    hover = c(RegionName, `RV_2012`,`RV_2013`,`RV_2014`,`RV_2015`,`RV_2016`))\n```\n\n\n\n### Rental Values for Counties\n```{r}\n\n#CRSFR<-read.csv(\"CountyZRISFR.csv\",row.names = 1)\nCRSFR<-dbReadTable(db, 'county_ZRISFR')\nplot_ly(CRSFR, labels = CRSFR$RegionName, values = CRSFR$Avg2016, type = \"pie\",name = \"Avg2012\", showlegend = T) %>%\n  layout(title = \"Rental Values For Single Home Residency(2016)\",xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))\n```\n\n1 BH's {data-navmenu=\"Rental Prices\"}\n=====================================\nRow {.tabset .tabset-fade}\n-------------------------------------\n###  Rental Values for Cities  \n```{r }\n#map('state', region = c('california'), xlim=c(-130,-90), ylim=c(30,60), fill=TRUE, col=\"gray95\")\n#rental_1BH<-read.csv(\"rental_1BH.csv\")\nrental_1BH<-dbReadTable(db, 'rental-1BH')\nRental_Values<-rental_1BH$RV_2012\nplot_ly(rental_1BH, x = ~RegionName, y = ~Rental_Values) %>%\n  add_lines(x = ~RegionName,                                        \n            y = ~Rental_Values,\n            name=\"RV_2012\",\n            mode = 'bars',\n           \n            line = list(                                      \n              color = \"green\"                             \n                                            \n            )\n  ) %>%\n  \n  add_lines(x = ~RegionName,                                         \n            y = ~RV_2013,\n            name=\"RV_2013\",\n            mode = 'bars',\n           \n            line = list(                                      \n              color = \"green\"                          \n                                              \n            )\n  ) %>%\n  add_lines(x = ~RegionName,                                        \n            y = ~RV_2014,\n            name=\"RV_2014\",\n            mode = 'bars',\n           \n            line = list(                                       \n              color = \"yellow\"                               \n                                            \n            )\n  ) %>%\n  add_lines(x = ~RegionName,                                        \n            y = ~RV_2015,\n            name=\"RV_2015\",\n            mode = 'bars',\n           \n            line = list(                                       \n              color = \"red\"                           \n                                             \n            )\n  ) %>%\n  add_lines(x = ~RegionName,                                         \n            y = ~RV_2016,\n            name=\"RV_2016\",\n            mode = 'bars',\n           \n            line = list(                           \n              color = \"black\"                             \n                                           \n            )\n  ) \n\n```\n\n### Current Year Rental Growth for Counties\n```{r}\n#county<-read.csv(\"rental_coun_1bh.csv\")\ncounty<-dbReadTable(db,'rental-county-1BH')\nregion<-as.list(county$RegionName)\nGrowth_2012<-as.list(county$per_12)\nGrowth_2013<-as.list(county$per_13)\nGrowth_2014<-as.list(county$per_14)\nGrowth_2015<-as.list(county$per_15)\nGrowth_2016<-as.list(county$per_16)\nhc <- highchart() %>% \n  hc_xAxis(categories =county$RegionName) %>% \n  hc_add_series(name = \"Growth_2012\", data = county$per_12) %>% \n  hc_add_series(name = \"Growth_2013\", data = county$per_13) %>% \n   hc_add_series(name = \"Growth_2014\", data = county$per_14) %>% \n   hc_add_series(name = \"Growth_2015\", data = county$per_15) %>% \n   hc_add_series(name = \"Growth_2016\", data = county$per_16) \nhc\n```\n\nRow {.tabset .tabset-fade}\n-------------------------------------\n###  Rental Values for Counties\n```{r}\n#Rentalcounty1BH<-read.csv(\"Rental_county_1_BH.csv\")\nlibrary(flexdashboard)\nlibrary(sqldf)\nlibrary(gsubfn)\nlibrary(dplyr)\nlibrary(proto)\nlibrary(plotly)\n db <- dbConnect(SQLite(), dbname='Test1.sqlite')\nRentalcounty1BH<-dbReadTable(db,'Rental')\n\n\nregion<-Rentalcounty1BH$RegionName\nRen1BH16<-Rentalcounty1BH$Rental_16\np<-plot_ly(Rentalcounty1BH,labels = ~region, values = ~Ren1BH16) %>%\n  add_pie(hole = 0.6) %>%\n  layout(title = \"County wise Rental Values for 1BH 2016\",  showlegend = T,\n         xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),\n         yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))\np\n```\n\nTop5 Rental and Home Values\n=====================================\nrow {.tabset .tabset-fade}\n----------------\n### Top And Least  Metros\n```{r}\n#MTLHV<-read.csv(\"metrotoplowhomevalues.csv\")\nMTLHV<-dbReadTable(db,'metro-top-low-homevalues')\nMTHV<-data.frame(MTLHV[c(1:5),c(1,4,12)])\ncolnames(MTHV)<-c(\"RegionName\",\"Zhvi\",\"PeakZHVI\")\nMLHV<-data.frame(MTLHV[c(6:10),c(1,4,12)])\ncolnames(MLHV)<-c(\"RegionName\",\"Zhvi\",\"PeakZHVI\")\np <- plot_ly() %>%\n  add_pie(data = MTHV, labels = MTHV$RegionName, values = MTHV$Zhvi,hole = 0.6,\n          name = \"Top5Metros\", domain = list(x = c(0, 0.4), y = c(0.4, 1))) %>%\n  add_pie(data =MLHV , labels = MLHV$RegionName, values = MLHV$Zhvi,\n          name = \"Least5Metros\", domain = list(x = c(0.6, 1), y = c(0.4, 1))) %>%\n\n  layout(title = \"Top and Least Metros\", showlegend = T,\n         xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),\n         yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))\np\n\n```\n\n### Top And Least 5 Counties\n```{r}\n#CTLHV<-read.csv(\"countytopnlowhomevalues.csv\")\nCTLHV<-dbReadTable(db,'county-top-nlow-homevalues')\nCTHV<-data.frame(CTLHV[c(1:5),c(1:3)])\ncolnames(CTHV)<-c(\"RegionName\",\"Zhvi\",\"PeakZHVI\")\nCLHV<-data.frame(CTLHV[c(6:10),c(1:3)])\ncolnames(CLHV)<-c(\"RegionName\",\"Zhvi\",\"PeakZHVI\")\np <- plot_ly() %>%\n  add_pie(data = CTHV, labels = CTHV$RegionName, values = CTHV$Zhvi,hole = 0.6,\n          name = \"Top5Counties\", domain = list(x = c(0, 0.4), y = c(0.4, 1))) %>%\n  add_pie(data =CLHV , labels = CLHV$RegionName, values = CLHV$Zhvi,\n          name = \"Least5Counties\", domain = list(x = c(0.6, 1), y = c(0.4, 1))) %>%\n\n  layout(title = \"Top and Least Counties\", showlegend = T,\n         xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),\n         yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))\np\n```\n\n### Top and Least 5 Cities\n```{r}\n#CityTLHV<-read.csv(\"citytopnlowHV.csv\")\nCityTLHV<-dbReadTable(db,'city-top-nlowHV')\nCityTHV<-data.frame(CityTLHV[c(1:5),c(1:3)])\ncolnames(CityTHV)<-c(\"RegionName\",\"Zhvi\",\"PeakZHVI\")\nCityLHV<-data.frame(CityTLHV[c(6:10),c(1:3)])\ncolnames(CityLHV)<-c(\"RegionName\",\"Zhvi\",\"PeakZHVI\")\np <- plot_ly() %>%\n  add_pie(data = CityTHV, labels = CityTHV$RegionName, values = CityTHV$Zhvi,hole = 0.6,\n          name = \"Top5Cities\", domain = list(x = c(0, 0.4), y = c(0.4, 1))) %>%\n  add_pie(data =CityLHV , labels = CityLHV$RegionName, values = CityLHV$Zhvi,\n          name = \"Least5Cities\", domain = list(x = c(0.6, 1), y = c(0.4, 1))) %>%\n\n  layout(title = \"Top and Least Cities\", showlegend = T,\n         xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),\n         yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))\np\n```\n\nrow {.tabset .tabset-fade}\n-------------------\n###  Renatal Values for Cities\n```{r}\n\n#top5cityrental<-read.csv(\"rental_city_top.csv\")\ntop5cityrental<-dbReadTable(db,'renatl-city-top')\nDT::datatable(top5cityrental, options = list(\n  pageLength = 20\n))\n  \n\n```\n\n###Least Renatal Values for Cities\n```{r}\n#least5cityrental<-read.csv(\"rental_city_least.csv\")\nleast5cityrental<-dbReadTable(db,'reantal-city-least')\nDT::datatable(least5cityrental, options = list(\n  pageLength = 20\n))\n```\n\n###  Top and Least  Rental Values for Metros\n```{r}\n#top5metrorental<-read.csv(\"rental_metro_top.csv\")\ntop5metrorental<- dbReadTable(db,'rental-metro-top')\n\n#least5metrorental<-read.csv(\"rental_metro_least.csv\")\nleast5metrorental<- dbReadTable(db,'rental-metro-least')\n\n\np <- plot_ly() %>%\n  add_pie(data = top5metrorental, labels = top5metrorental$RegionName, values = top5metrorental$Zri,hole = 0.6,\n          name = \"Top5Metros\", domain = list(x = c(0, 0.4), y = c(0.4, 1))) %>%\n  add_pie(data =least5metrorental , labels = least5metrorental$RegionName, values = least5metrorental$Zri,\n          name = \"Least5Metros\", domain = list(x = c(0.6, 1), y = c(0.4, 1))) %>%\n  \n  layout(title = \"Top and Least Counties\", showlegend = T,\n         xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),\n         yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))\np\n```\n\nMetro {data-navmenu=\"Forecasting\"}\n===================================== \nrow \n----------\n### Home Values for \"Sanfransisco\"(Metro) \n```{r}\nlibrary(highcharter)\nlibrary(plotly)\n#metro_sanfrans <- read.csv(\"predict.csv\")\nmetro_sanfrans<-dbReadTable(db,'predict')\n#data(countycurrmnth)\nhc <- highchart() %>%\n  hc_xAxis(categories =metro_sanfrans$Month ) %>%\n\n   hc_add_series(name = \"Home_Value\", data =metro_sanfrans$HomeValue)\n  hc\n\n# san_metro_months<-metro_sanfrans$Month\n# san_metro_values<-round(metro_sanfrans$HomeValue)\n#  plot_ly(metro_sanfrans,x=san_metro_months,y=san_metro_values,mode=\"markers\",color = as.factor(san_metro_values))\n```\n\nrow \n----------\n### Home Values for LosAngels(Metro)\n```{r}\nlibrary(highcharter)\nlibrary(plotly)\n#metro_losangle<- read.csv(\"predicteddataforlosangels.csv\")\nmetro_losangle<-dbReadTable(db, 'LosAngels-Predicted-Values') \n\n month <- c('January', 'February', 'March', 'April', 'May', 'June', 'July',\n               'August', 'September', 'October', 'November', 'December')\n \n  metro_losangle<-cbind(metro_losangle,month)  \n\n  metro_losangle$month <- factor(metro_losangle$month, levels = metro_losangle[[\"month\"]])\n# los_metro_months<-metro_losangle$Months\n# los_metro_values<-round(metro_losangle$Home_Values)\n#  plot_ly(metro_losangle,x=los_metro_months,y=los_metro_values,mode=\"markers\",color = as.factor(los_metro_values))\n p <- plot_ly(metro_losangle, x = ~month, y = ~Home_Values,type=\"box\",mode=\"markers\", name = 'Home_Values',color = \"yellow\") %>%\n             \n\n             layout(title = 'Los_Angles Home_Values ',\n                   xaxis = list(title = 'Months'),\n                   yaxis = list(title = 'Home Values'),\n                   linemode = 'relative')\n    \n              p\n    \n```\nROW\n---------\n\n### Metro Wise Home Values for \"Napa\" \n```{r}\nlibrary(sqldf)\n#napapredict<-read.csv(\"Napapredict.csv\")\n\nnapapredict<-dbReadTable(db,'Napa-predict')\n\np <- plot_ly() %>%\n  add_pie(data = napapredict, labels = napapredict$Months, values = napapredict$HomeValues,hole = 0.6,\n          name = \"NapaHomeValues\", domain = list(x = c(0, 0.4), y = c(0.4, 1))) %>%\n  \n\n  layout(title = \"Napa Home Values\", showlegend = T,\n         xaxis = list(showgrid = TRUE, zeroline = FALSE, showticklabels = FALSE),\n         yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))\np\n```\n\n### Metro Wise Home Values for \"SanJose\"\n```{r}\n#sanjose<-read.csv(\"sanjosepre.csv\",row.names = 1)\nsanjose<-dbReadTable(db, 'SanJose') \nsanjose1 <- sample(1:nrow(sanjose),size = 0.8*nrow(sanjose))\n\ntrainSJ <- sanjose[sanjose1,] \n\ntestSJ <- sanjose[-sanjose1,]\n\n\nsjlm<-lm(HomeValues~Year+Month,trainSJ)\n\ntesting<-predict(sjlm,testSJ)\n\nsjpre<-predict(sjlm)\n\nnewdata<-data.frame(Year=c(2017),Month=c(1:12))\n\nsjpre1<-predict(sjlm,newdata=newdata)\n\n#predsjvalues<-write.csv(sjpre1,\"sjpredvalues.csv\")\npredsjvalues<-dbReadTable(db,'SanJose-Predicted-Values')\n#sjpredvalues<-read.csv(\"sjpredvalues.csv\")\nsjpredvalues<-dbReadTable(db,'SanJose-Predicted-Values')\nmonth <- c('January', 'February', 'March', 'April', 'May', 'June', 'July',\n               'August', 'September', 'October', 'November', 'December')\n \n  sjpredvalues<-cbind(sjpredvalues,month) \n  \n\n  sjpredvalues$month <- factor(sjpredvalues$month, levels = sjpredvalues[[\"month\"]])\n\n#colnames(sjpredvalues)<-c(\"Month\",\"HomeValues\",\"month\")\n\nplot_ly(sjpredvalues, x = ~sjpredvalues$month, y = ~sjpredvalues$HomeValues, color = ~sjpredvalues$month,\n         text = ~paste(\"Month: \", sjpredvalues$month))%>%\n   layout(title = \"SanJose HomeValues(2017)\",\n         xaxis = list(title =\"Months\"),\n         yaxis = list(title =\"HomeValues\"))\n\n```\n\n\n\n###Metro Wise Home Values for \"SantaCruz\"\n\n```{r}\nlibrary(plotly)\n\n#SantaCruz<-read.csv(\"SantaCruzDataFrom2010-2016.csv\")\nSantaCruz<-dbReadTable(db, 'SantaCruz') \n\nCruz <- sample(1:nrow(SantaCruz),size = 0.8*nrow(SantaCruz)) \n\ntrainCruz <- SantaCruz[Cruz,] \n\n\ntestCruz <- SantaCruz [-Cruz,]\n\n\nmetroCruz<-lm(SantaCruz~Year+Months,trainCruz)\n\nmetroCruztestdata<-predict(metroCruz,testCruz)\n\nmetroSantaCruz <- predict(metroCruz)\n\nnewdata2<-data.frame(Year=c(2017),Months=c(1,2,3,4,5,6,7,8,9,10,11,12))\n\nSantaCruzPredictedValues <- predict(metroCruz,newdata2)\n\n#predictedCruz<-write.csv(SantaCruzPredictedValues,\"SantaCruzPredictedValues.csv\")\npredictedCruz<-dbReadTable(db, 'SantaCruz-Predicted-Values') \n#pc<-read.csv(\"SantaCruzPredictedValues.csv\")\npc<-dbReadTable(db,'SantaCruz-Predicted-Values')\nmonth <- c('January', 'February', 'March', 'April', 'May', 'June', 'July',\n               'August', 'September', 'October', 'November', 'December')\n \n  pc<-cbind(pc,month) \n  \n\n  pc$month <- factor(pc$month, levels = pc[[\"month\"]])\n#colnames(pc)<-c(\"Month\",\"HomeValues\",\"month\")\n p <- plot_ly(pc, x = ~month, y = ~pc$HomeValues, name = ' HomeValues', type = 'scatter', mode = 'lines',\n         marker = list(color = 'rgb(153, 0, 102 )')  ) %>%\n\n layout(title = \"Santa Cruz Home Values\",\n                                    xaxis = list(title = \"Months\"),\n                                   yaxis = list (title = \"Home Values\"),\n                                   barmode = 'relative')\n                          \np\n    \n   \n\n```\n\n\nCounty {data-navmenu=\"Forecasting\"}\n===================================== \nrow\n-------------------\n### Home Values for \"Santaclara\"(County)\n```{r}\nlibrary(highcharter)\n#santaclara<-read.csv(\"santaclarapredco4.csv\",row.names = 1)\nsantaclara<- dbReadTable(db,'SantaClaraData')\n\nsantaclarasample <- sample(1:nrow(santaclara),size = 0.8*nrow(santaclara))\ntrainSC <- santaclara[santaclarasample,] \ntestSC <- santaclara[-santaclarasample,]\nsclm<-lm(HomeValues~Year+Month,trainSC)\npredictionsc<-predict(sclm,testSC)\nscpre<-predict(sclm)\n\nnewdatasc<-data.frame(Year=c(2017),Month=c(1:12))\nscpre1<-predict(sclm,newdata=newdatasc)\n\n#predscvalues<-write.csv(scpre1,\"scpredvalues.csv\")\npredscvalues<-dbReadTable(db,'SantaClara-Predicted-Values')\n\n#scpredvalues<-read.csv(\"scpredvalues.csv\")\n   scpredvalues<-dbReadTable(db,'SantaClara-Predicted-Values')\n\nmonth <- c('January', 'February', 'March', 'April', 'May', 'June', 'July',\n               'August', 'September', 'October', 'November', 'December')\nscpredvalues<-cbind(scpredvalues,month) \nscpredvalues$month <- factor(scpredvalues$month, levels = scpredvalues[[\"month\"]])\ncolnames(scpredvalues)<-c(\"x\",\"HomeValues\",\"month\")\nplot_ly(scpredvalues, x = ~scpredvalues$month, y = ~scpredvalues$HomeValues, #color = ~scpredvalues$month,\n        type = 'scatter', mode = 'lines',marker = list(color = ~scpredvalues$month)\n        ,text = ~paste(\"Month: \", scpredvalues$month))%>%\n        layout(title = \"SantaClara HomeValues(2017)\",\n         xaxis = list(title =\"Months\"),\n         yaxis = list(title =\"HomeValues\"))\n      \n \n```\n\n\n### Home Values for \"Sanmateo\"(County)\n```{r}\n#sanmateo<-read.csv(\"sanmateopred.csv\",row.names = 1)\nsanmateo<-dbReadTable(db,'SanMateo-Data')\nsanmateosample <- sample(1:nrow(sanmateo),size = 0.8*nrow(sanmateo)) \ntrainsanmateo <- sanmateo[sanmateosample,] \n\ntestsanmateo <- sanmateo [-sanmateosample,]\nsanmateomodel<-lm(HomeValues~Year+Month,trainsanmateo)\nsanmateopred<-predict(sanmateomodel,testsanmateo)\n\nnewdataSM<-data.frame(Year=c(2017),Month=c(1,2,3,4,5,6,7,8,9,10,11,12))\nsanmateopredictedvalues <- predict(sanmateomodel,newdataSM)\n#sanmateopredictedvaluescsv<-write.csv(sanmateopredictedvalues,\"sanmateopredictedvalues.csv\")\nsanmateopredictedvaluescsv<-dbReadTable(db,'SanMateo-predicted-values')\n#SMpredvalues<-read.csv(\"sanmateopredictedvalues.csv\")\nSMpredvalues<-dbReadTable(db,'SanMateo-predicted-values')\nmonth <- c('January', 'February', 'March', 'April', 'May', 'June', 'July',\n               'August', 'September', 'October', 'November', 'December')\n SMpredvalues<-cbind(SMpredvalues,month) \nSMpredvalues$month <- factor(SMpredvalues$month, levels = SMpredvalues[[\"month\"]])\ncolnames(SMpredvalues)<-c(\"Month\",\"HomeValues\",\"month\")\n p <- plot_ly(SMpredvalues, x = ~month, y = ~SMpredvalues$HomeValues, name = ' HomeValues', type ='scatter',\n    mode=\"lines\", marker = list(color = 'rgb( 147, 34, 141  )')  ) %>%\n     layout(title = \"San Mateo Home Values\",\n           xaxis = list(title = \"Months\"),\n          yaxis = list (title = \"Home Values\"),\n          barmode = 'relative')\n\n p\n    \n``` \n\n\nrow\n----------\n\n### Home Values for \"Marin\"(County)\n```{r}\n#marin<-read.csv(\"marinprediction.csv\",row.names = 1)\nmarin<-dbReadTable(db,'Marin-data')\n \nmarinsample <- sample(1:nrow(marin),size = 0.8*nrow(marin)) \ntrainmarin <- marin[marinsample,] \n\ntestmarin  <- marin [-marinsample,]\nmarinmodel<-lm(HomeValues~Year+Month,trainmarin)\nmarinpred<-predict(marinmodel,testmarin)\n\nnewdatamarin<-data.frame(Year=c(2017),Month=c(1,2,3,4,5,6,7,8,9,10,11,12))\nmarinpredictedvalues <- predict(marinmodel,newdatamarin)\n#marinpredictedvaluescsv<-write.csv(marinpredictedvalues,\"marinpredictedvalues.csv\")\nmarinpredictedvaluescsv<- dbReadTable(db,'Marin-predicted-values')\n \n#marinpredvalues<-read.csv(\"marinpredictedvalues.csv\")\n marinpredvalues<-dbReadTable(db,'Marin-predicted-values')\n \nmonth <- c('January', 'February', 'March', 'April', 'May', 'June', 'July',\n               'August', 'September', 'October', 'November', 'December')\nmarinpredvalues<-cbind(marinpredvalues,month) \nmarinpredvalues$month <- factor(marinpredvalues$month, levels = marinpredvalues[[\"month\"]])\ncolnames(marinpredvalues)<-c(\"Month\",\"HomeValues\",\"month\")\nhighchart() %>%\n  hc_chart(type = \"line\") %>%\n  hc_xAxis(categories=marinpredvalues$month) %>%\n  hc_add_series(name = \"HomeValue\", data =marinpredvalues$HomeValues,color = \"#B71C1C\") \n\n```\n\n\n### Home Values for \"Alameda\"(County)\n\n\n```{r}\nlibrary(highcharter)\n#alameda<-read.csv(\"AlamedaDataFrom2012-2016.csv\",row.names = 1)\n\nalameda<-dbReadTable(db,'AlamedaData')\n \nalamedasample <- sample(1:nrow(alameda),size = 0.8*nrow(alameda)) \ntrainalameda <- alameda[alamedasample,] \n#alamedatraindata<-write.csv(trainalameda,\"alamedatraindata.csv\")\ntestalameda  <- alameda [-alamedasample,]\nalamedamodel<-lm(HomeValues~Year+Month,trainalameda)\nalamedapred<-predict(alamedamodel,testalameda)\n\nnewdataalameda<-data.frame(Year=c(2017),Month=c(1,2,3,4,5,6,7,8,9,10,11,12))\nalamedapredictedvalues <- predict(alamedamodel,newdataalameda)\n#alameda2017valuescsv<-write.csv(alamedapredictedvalues,\"alameda2017values.csv\")\n#alameda2017predvalues<-read.csv(\"alameda2017values.csv\")\nalameda2017predvalues<- dbReadTable(db,'Alameda-Predicted-Values')\n \nmonth <- c('January', 'February', 'March', 'April', 'May', 'June', 'July',\n               'August', 'September', 'October', 'November', 'December')\nalameda2017predvalues<-cbind(alameda2017predvalues,month) \nalameda2017predvalues$month <- factor(alameda2017predvalues$month, levels = alameda2017predvalues[[\"month\"]])\ncolnames(alameda2017predvalues)<-c(\"x\",\"HomeValues\",\"month\")\n\n     highchart() %>% \n  hc_title(text = \"Prediction for Alameda\") %>%\n   \n  hc_xAxis(categories = alameda2017predvalues$month) %>% \n  \n  hc_add_series_labels_values(alameda2017predvalues$month, alameda2017predvalues$HomeValues, type = \"column\",\n                              colorByPoint = TRUE, center = c('35%', '10%'),\n                             size = 100, dataLabels = list(enabled = FALSE)) \n  \n     \n```\n\n\n### Home Values for \"SanFransisco\"(County)\n```{r}\nlibrary(highcharter)\n#sanfrancisco<-read.csv(\"SanFranciscoDataFrom2012-2016.csv\",row.names = 1)\nsanfrancisco<-dbReadTable(db,'SanFransiscoData')\nsanfranciscosample <- sample(1:nrow(sanfrancisco),size = 0.8*nrow(sanfrancisco)) \ntrainsanfrancisco <- sanfrancisco[sanfranciscosample,] \n#sanfranciscotraindata<-write.csv(trainsanfrancisco,\"sanfranciscotraindata.csv\")\ntestsanfrancisco  <- sanfrancisco [-sanfranciscosample,]\nsanfranciscomodel<-lm(HomeValues~Year+Month,trainsanfrancisco)\nsanfranciscopred<-predict(sanfranciscomodel,testsanfrancisco)\n\nnewdatasanfrancisco<-data.frame(Year=c(2017),Month=c(1,2,3,4,5,6,7,8,9,10,11,12))\nsanfranciscopredictedvalues <- predict(sanfranciscomodel,newdatasanfrancisco)\n#sanfrancisco2017valuescsv<-write.csv(sanfranciscopredictedvalues,\"sanfrancisco2017values.csv\")\n#sanfrancisco2017predvalues<-read.csv(\"sanfrancisco2017values.csv\")\nsanfrancisco2017predvalues<- dbReadTable(db,'Sanfransisco-Predicted-Values')\n \nmonth <- c('January', 'February', 'March', 'April', 'May', 'June', 'July',\n               'August', 'September', 'October', 'November', 'December')\nsanfrancisco2017predvalues<-cbind(sanfrancisco2017predvalues,month) \nsanfrancisco2017predvalues$month <- factor(sanfrancisco2017predvalues$month, levels = sanfrancisco2017predvalues[[\"month\"]])\ncolnames(sanfrancisco2017predvalues)<-c(\"x\",\"HomeValues\",\"month\")\n\nhighchart(width = 400, height = 400) %>% \n  hc_title(text = \"Prediction Values\") %>%\n  hc_subtitle(text = \"SanFrancisco\") %>% \n  hc_chart(type = \"pie\", options3d = list(enabled = TRUE, alpha = 70, beta = 0)) %>% \n  hc_plotOptions(pie = list(depth = 70)) %>% \n  hc_add_series_labels_values(sanfrancisco2017predvalues$month, sanfrancisco2017predvalues$HomeValues) %>% \n  hc_add_theme(hc_theme(\n    chart = list(\n      backgroundColor = NULL,\n      divBackgroundImage = \"https://media.giphy.com/media/Yy26NRbpB9lDi/giphy.gif\"\n    )\n  ))\n```",
    "created" : 1491131674519.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2567180625",
    "id" : "8B7E4FEA",
    "lastKnownWriteTime" : 1491066568,
    "last_content_update" : 1491131738036,
    "path" : "C:/Users/ADMIN/Desktop/RealEstate_poc1/realestate_poc.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}