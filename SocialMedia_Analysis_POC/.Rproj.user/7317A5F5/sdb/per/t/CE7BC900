{
    "collab_server" : "",
    "contents" : "library(leaflet)\nlibrary(shiny)\nlibrary(shinydashboard)\nlibrary(plotrix)\nlibrary(plotly)\nlibrary(metricsgraphics)\nlibrary(googleVis)\nlibrary(highcharter)\nlibrary(gender)\nlibrary(genderizeR)\n\n  \n\nserver <- function(input, output, session) {\n  \n  \n  \n  output$lastweekposts <- renderValueBox({\n    valueBox(\n      paste(lastweekposts1), \"Last Week Posts\",icon = icon(\"glyphicon glyphicon-list-alt\",lib=\"glyphicon\"),\n      color = \"green\"\n      \n    )\n  })\n  \n  output$lastweeklikes <- renderValueBox({\n    valueBox(\n      paste(lastweeklikes), \"Last Week Likes\",icon = icon(\"glyphicon glyphicon-thumbs-up\",lib=\"glyphicon\"),\n      color = \"red\"\n      \n    )\n  })\n  \n  output$lastweekcmnts <- renderValueBox({\n    valueBox(\n      paste(lastweekcomments), \"Last Week Comments\",icon = icon(\"glyphicon glyphicon-comment\",lib=\"glyphicon\"),\n      color = \"teal\"\n      \n    )\n  })\n  \n  output$lastweekshares <- renderValueBox({\n    valueBox(\n      paste(lastweekshares), \"Last Week Shares\",icon = icon(\"glyphicon glyphicon-send\",lib=\"glyphicon\"),\n      color = \"yellow\"\n      \n    )\n  })\n  \n  \n\n  observeEvent(input$Map_marker_click, { # update the map markers and view on map clicks\n    p <- input$Map_marker_click\n    proxy <- leafletProxy(\"mymap\")\n    if(p$id==\"Selected\"){\n      proxy %>% removeMarker(layerId=\"Selected\")\n    } else {\n      proxy %>% setView(lng=p$lng, lat=p$lat, input$Map_zoom) %>% acm_defaults(p$lng, p$lat)\n    }\n  })\n  observeEvent(input$Map_marker_click, { # update the location selectInput on map clicks\n    p <- input$Map_marker_click\n    if(!is.null(p$id)){\n      if(is.null(input$location) || input$location!=p$id) updateSelectInput(session, \"location\", selected=p$id)\n    }\n  })\n  \n\n\n  \n    output$mymap <- renderLeaflet({\n      \n      \n      \n     longlat<-longlat\n      \n   \n     leaflet(data=longlat) %>%\n       addTiles(urlTemplate = \"//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png\",\n                                       \n                                       attribution = 'Maps by <a href=\"http://www.mapbox.com/\">Mapbox</a>') %>%\n        \n        addMarkers(data =longlat, lng = longlat$lon, lat = longlat$lat, popup = longlat$cities) %>%\n        \n       setView(lng = -93.85, lat = 37.45, zoom = 4) %>%\n       addProviderTiles(providers$Stamen.TonerLite,\n                        options = providerTileOptions(noWrap = TRUE))\n      \n    })\n    \n   \n  \n  output$mymap1 <- renderLeaflet({\n    \n    df1<-longlat1\n    leaflet(data=quakes1) %>%addTiles(urlTemplate = \"//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png\",\n                                      \n                                      attribution = 'Maps by <a href=\"http://www.mapbox.com/\">Mapbox</a>') %>%\n addCircleMarkers(data = df1, lat = ~ latt, lng = ~ longg) %>%\n      setView(lng = -93.85, lat = 37.45, zoom = 4) %>%\n     addProviderTiles(providers$Stamen.TonerLite,\n                      options = providerTileOptions(noWrap = TRUE))\n\n\n  })\n  output$mymap3<- renderPlotly({\n\n   slices<-slices\n\n    #colors <- c('rgb(211,94,96)', 'rgb(128,133,133)', 'rgb(144,103,167)', 'rgb(171,104,87)', 'rgb(114,147,203)')\n\n    p <- plot_ly(slices2, labels = ~Gender, values = ~gender_pctg, type = 'pie') %>%\n    layout(title = 'Gender wise Posts on Facebook for ebay ',\n           xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),\n           yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))\n    \n           p\n  })\n  \n  output$mymap8<- renderHighchart({\n    \n    highchart(width = 300, height = 300) %>% \n      \n      \n      hc_chart(type = \"pie\", options3d = list(enabled = TRUE, alpha = 70, beta = 0)) %>% \n      hc_plotOptions(pie = list(depth = 70)) %>% \n      hc_add_series_labels_values(slices$gender1, slices$Gender_pct) %>% \n      hc_add_theme(hc_theme(\n        chart = list(\n          backgroundColor = NULL\n         \n        )\n      ))\n    \n    \n    \n  })\n  output$hour<-renderHighchart({\n    \n      \n   \n    highchart() %>%\n      hc_add_series_boxplot(x = count_hour$Freq, by = count_hour$time, name = \"Tweets per Hour\")\n    \n     \n      \n})\n\n \n  \n  \n  output$mymap6<- renderHighchart({\n\n    highchart() %>%\n      hc_chart(type = \"line\") %>%\n      hc_xAxis(categories=count_df$Time) %>%\n      hc_add_series(name = \"Number of Posts\", data =count_df$Freq,color = \"#B71C1C\") \n })\n  \n  \n \n  \n  output$myChart <- renderPlotly({\n    plot_ly(page1) %>%\n      add_bars(x = ~time,                                        \n               y = ~likes_count,\n               name=\"Likes Count\",\n               mode = 'columns',\n               \n               line = list(                                      \n                 color = \"green\"                             \n                 \n               )\n      ) %>%\n      \n      add_bars(x = ~time,                                         \n               y = ~comments_count,\n               name=\"Comments Count\",\n               mode = 'columns',\n               \n               line = list(                                      \n                 color = \"green\"                          \n                 \n               )\n      ) %>%\n      add_bars(x = ~time,                                        \n               y = ~shares_count,\n               name=\"Shares Count\",\n               mode = 'columns',\n               \n               line = list(                                       \n                 color = \"yellow\"                               \n                 \n               )\n      ) \n     \n     \n      \n      #layout(autosize = F, width = \"400px\", height = \"200px\", margin = m,x_axis=x,yaxis=y,title=\"Average Rental Values\")\n    \n  })\n  \n  \n \n  output$plot <- renderHighchart({\n   \n    \n    highchart() %>%\n      \n      hc_add_series(data = page1$time, type = \"column\",\n                   \n                    color = \"yellow\", showInLegend = FALSE) %>%\n      hc_add_series(data = page1$message, type = \"column\",\n                   \n                    color = \"navy\", showInLegend = FALSE) %>%\n      hc_yAxis(title = list(text = \"Time\"), allowDecimals = FALSE) %>%\n      hc_xAxis(categories = page1$time,\n               tickmarkPlacement = \"on\",\n               opposite = TRUE) %>%\n      hc_title(text = \"Last Week Posts for Facebook\",\n               style = list(fontWeight = \"bold\")) %>%\n   \n             \n      hc_add_theme(hc_theme_538())\n  })\n  \n  # output$TopTweet <- renderValueBox({\n  #   valueBox(\n  #     paste(\"TopTweet\"),toptweet$toptweet,\n  #     color = \"purple\",icon = icon(\"credit-card\")\n  # \n  #   )\n  # \n  # })\n#   output$Retweetcount <- renderGvis({\n#     #df2 <- data.frame(Label = \"Model Accuracy\", Value = input$n2)\n#     gvisGauge(dd,\n#               options=list(min=0, max=450, greenFrom=90,\n#                            greenTo=100, yellowFrom=75, yellowTo=89.99,\n#                            redFrom=0, redTo=74.99, width=400, height=400)); \n#   })\n#     \n#   \n# output$totlPosts <- renderGvis({\n#   #df2 <- data.frame(Label = \"Model Accuracy\", Value = input$n2)\n#   gvisGauge(postsshares,\n#             options=list(min=0, max=100, greenFrom=90,\n#                          greenTo=100, yellowFrom=75, yellowTo=89.99,\n#                          redFrom=0, redTo=74.99, width=300, height=300));\n# \n# })\n# output$totllikescmnts <- renderGvis({\n#   #df2 <- data.frame(Label = \"Model Accuracy\", Value = input$n2)\n#   gvisGauge(totallikscmnts,\n#             options=list(min=0, max=450, greenFrom=90,\n#                          greenTo=100, yellowFrom=75, yellowTo=89.99,\n#                          redFrom=0, redTo=74.99, width=400, height=400));  \n#   \n# })\n# output$totalcount <- renderGvis({\n#   #df2 <- data.frame(Label = \"Model Accuracy\", Value = input$n2)\n#   gvisGauge(cnt,\n#             options=list(min=0, max=450, greenFrom=90,\n#                          greenTo=100, yellowFrom=75, yellowTo=89.99,\n#                          redFrom=0, redTo=74.99, width=400, height=400));  \n#                          \n#   \n# })\n# }\n# \n# \n\n\n\noutput$plotwc<- renderPlot({\n  \n  \n  \n  wordcloud(d$word,d$freq,scale=c(4,0.5)\n            ,max.words=100,height=500,width=500,\n            random.order=FALSE,rot.per=0.30, use.r.layout=TRUE, colors=brewer.pal(8, \"Dark2\"))\n \n  \n  \n})\noutput$plot1 <- renderHighchart({\n  \n  \n  highchart() %>%\n    \n    hc_add_series(data = sentiment$mysentiment.positive, type = \"column\",\n                  \n                  color = \"yellow\", showInLegend = FALSE,name=\"positive,mysentiment.positive\") %>%\n    hc_add_series(data =sentiment$mysentiment.fear , type = \"column\",\n                  \n                  color = \"navy\", showInLegend = FALSE) %>%\n    hc_add_series(data =sentiment$mysentiment.anger , type = \"column\",\n                  \n                  color = \"teal\", showInLegend = FALSE) %>%\n    hc_add_series(data =sentiment$mysentiment.joy , type = \"column\",\n                  \n                  color = \"purple\", showInLegend = FALSE) %>%\n    hc_add_series(data =sentiment$mysentiment.sadness , type = \"column\",\n                  \n                  color = \"olive\", showInLegend = FALSE) %>%\n    hc_add_series(data =sentiment$mysentiment.surprise , type = \"column\",\n                  \n                  color = \"green\", showInLegend = FALSE) %>%\n    hc_add_series(data =sentiment$mysentiment.negative , type = \"column\",\n                  \n                  color = \"red\", showInLegend = FALSE) %>%\n    \n    hc_yAxis(title = list(text = \"\"), allowDecimals = FALSE) %>%\n     hc_xAxis(categories = \"Emotion categories\",\n              tickmarkPlacement = \"on\",\n             opposite = TRUE) %>%\n    hc_title(text = \"Emotions of the Tweets\",\n             style = list(fontWeight = \"bold\")) %>%\n    hc_plotOptions(series = list(stacking = FALSE)) %>%\n    \n    \n    hc_add_theme(hc_theme_538())\n})\n\n}\n\n\n\n\n\n\n\n\n\n\n# hc_add_series(data = round(diff13$diff_ppt, 4), type = \"column\",\n#               name = \"Difference, in ppt\",\n#               color = \"#F0A1EA\", showInLegend = FALSE) %>%\n#   hc_yAxis(title = list(text = \"Difference, in ppt\"), allowDecimals = FALSE) %>%\n#   hc_xAxis(categories = c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\",\n#                           \"Friday\", \"Saturday\", \"Sunday\"),\n#            tickmarkPlacement = \"on\",\n#            opposite = TRUE) %>%\n#   hc_title(text = \"The Friday the 13th effect\",\n#            style = list(fontWeight = \"bold\")) %>%\n#   \n#   hc_tooltip(valueDecimals = 4,\n#              pointFormat = \"Day: {point.x} <br> Diff: {point.y}\") %>%\n#   hc_credits(enabled = TRUE,\n#              text = \"Sources: CDC/NCHS, SOCIAL SECURITY ADMINISTRATION\",\n#              style = list(fontSize = \"10px\")) %>%\n#   hc_add_theme(hc_theme_538())",
    "created" : 1493254451166.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "777094280",
    "id" : "CE7BC900",
    "lastKnownWriteTime" : 1494214177,
    "last_content_update" : 1494214177856,
    "path" : "C:/Users/ADMIN/Desktop/social_media analysis/socialmedia/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}