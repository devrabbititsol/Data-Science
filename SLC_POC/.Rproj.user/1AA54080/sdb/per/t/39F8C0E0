{
    "collab_server" : "",
    "contents" : "\nlibrary(shinydashboard)\nlibrary(shiny)\nlibrary(googleVis)\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(DT)\nlibrary(readr)\nlibrary(ggplot2)\nlibrary(highcharter)\nlibrary(httr)\nlibrary(purrr)\nlibrary(C3)\nlibrary(plotly)\nlibrary(broom)\nlibrary(ECharts2Shiny)\n\n\n\nserver <- function(input, output) {\n  # output$outputId<-renderPlotly({\n  #   base_plot <- plot_ly(\n  #     type = \"pie\",\n  #     values = c(RMVal$Revenue[4], RMVal$Revenue[1], RMVal$Revenue[2], RMVal$Revenue[3]),\n  #     # labels = c(\"-\", \"0\", \"20\", \"40\", \"60\", \"80\", \"100\"),\n  #     labels = c( RMVal$Revenue[1], RMVal$Revenue[2], RMVal$Revenue[3], RMVal$Revenue[4]),\n  #     rotation = 108,\n  #     direction = \"anticlockwise\",\n  #     hole = 0.4,\n  #     textinfo = \"label\",\n  #     textposition = \"outside\",\n  #     hoverinfo = \"none\",\n  #     domain = list(x = c(0, 0.48), y = c(0, 1)),\n  #     marker = list(colors = c('rgb(255, 255, 255)', 'rgb(255, 255, 255)', 'rgb(255, 255, 255)', 'rgb(255, 255, 255)', 'rgb(255, 255, 255)', 'rgb(255, 255, 255)', 'rgb(255, 255, 255)')),\n  #     showlegend = FALSE\n  #   )\n  #   b_plot <- add_trace(\n  #      base_plot,\n  #     type = \"pie\",\n  #     values = c(RMVal$Revenue[4],RMVal$Revenue[1], RMVal$Revenue[2], RMVal$Revenue[3],RMVal$Revenue[4]),\n  #     labels = c(\"CurrentYearSales\", \"FirstYear\", \"SecondYear\", \"ThirdYear\", \"FinalYear\"),\n  #     # values = c(RMVal$Revenue[4]),\n  #     # labels = c(\"CurrentYearSales\"),\n  #      rotation = 133,\n  #     direction = \"anticlockwise\",\n  #     hole = 0.3,\n  #     textinfo = \"label\",\n  #     textposition = \"inside\",\n  #     hoverinfo = TRUE,\n  #     domain = list(x = c(0, 0.48), y = c(0, 1)),\n  #     marker = list(colors = c('rgb(255, 255, 255)', 'rgb(232,226,202)', 'rgb(226,210,172)', 'rgb(223,189,139)', 'rgb(223,162,103)', 'rgb(226,126,64)')),\n  #     showlegend= FALSE\n  #   )\n  #   a <- list(\n  #     showticklabels = FALSE,\n  #     autotick = FALSE,\n  #     showgrid = FALSE,\n  #     zeroline = FALSE)\n  # \n  #   b <- list(\n  #     xref = 'paper',\n  #     yref = 'paper',\n  #     x = 0.23,\n  #     y = 0.45,\n  #     showarrow = FALSE,\n  #     text = RMVal$Revenue[4])\n  # \n  #   base_chart <- layout(\n  #     b_plot,\n  #     shapes = list(\n  #       list(\n  #         type = 'path',\n  #         path = 'M 0.235 0.5 L 0.24 0.62 L 0.245 0.5 Z',\n  #         xref = 'paper',\n  #         yref = 'paper',\n  #         fillcolor = 'rgba(44, 160, 101, 0.5)'\n  #       )\n  #     ),\n  #     xaxis = a,\n  #     yaxis = a,\n  #     annotations = b\n  #   )\n  #   \n  # })\n  ######################Gauge chart###############\n  \n  value = reactive({\n    input$update\n    # round(runif(1,0,RMVal$Revenue[3]),1)\n    round(runif(50, min =0 , max =100),2)\n    # min=0 max=100 n=23\n    # RMVal$Revenue[3]\n  })\n  \n  # example use of the automatically generated render function\n  output$gauge1 <- renderC3Gauge({ \n    # C3Gauge widget\n    \n    C3Gauge(RMVal$Revenue[3])\n  })\n  r1=RMVal$Revenue[4]\n  r2=round(r1,1)\n  renderGauge(div_id = \"test\",rate = RMVal$Revenue[4], gauge_name = \"Revenue\",show.tools = TRUE,\n              animation = TRUE,\n              running_in_shiny = TRUE)\n  ###############################################################################Month Dashboard for sales Start#################################################### \n  ##revenue generated for a month\n  output$mrevenue <- renderValueBox({\n    valueBox(\n      paste(round(mRevenueval/1000000,2),\"M\" ), \"Revenue\", icon = icon(\"glyphicon glyphicon-usd\",lib=\"glyphicon\"),\n      color = \"orange\"\n    )\n  })\n  ##average order value for a month\n  output$mavg_order <- renderValueBox({\n    valueBox(\n      paste(round(mAvg_Value,2),\"$\"), \"Average Order Value\", icon = icon(\"glyphicon glyphicon-usd\",lib=\"glyphicon\"),\n      color = \"fuchsia\"\n    )\n    \n  })\n  ##Ecomerce ratio for a month\n  output$mEratio <- renderValueBox({\n    valueBox(\n      paste(round(mERatio,2),\"%\"),\"Ecommerce Conversion Ratio\",\n      color = \"purple\",icon = icon(\"credit-card\")\n      \n    )\n    \n  })\n  ###Visits per day\n  ###### Total Visits Per day ########\n  \n  output$dVisitsBox <- renderValueBox({\n    valueBox(\n      paste(dVisitsperday), \"Visits per Day\",icon = icon(\"glyphicon glyphicon-eye-open\",lib=\"glyphicon\"),\n      color = \"green\"\n      \n    )\n  })\n  \n  #################Increase in Sales Percentage\n  differencegrowth=marchdata-febdata\n  mincreaseper=(differencegrowth/febdata)\n  output$salesComparision <- renderValueBox({\n    valueBox(\n      paste(round(mincreaseper*100,2),\"%\"), \"Growth in sales\", icon = icon(\"glyphicon glyphicon-open\",lib=\"glyphicon\"),\n      color = \"red\"\n    )\n    \n  })\n  ##New customers added in a month\n  output$mNewCustBox <- renderInfoBox({\n    valueBox(\n      paste(mNewCustVal), \"New Customers\", icon = icon(\"glyphicon glyphicon-user\",lib=\"glyphicon\"),\n      color = \"blue\"\n    )\n    \n  })\n  ##returning customers in a month\n  output$mrecustomers <- renderValueBox({\n    valueBox(\n      paste(mRepeatVal), \"Returning Customers\", icon = icon(\"glyphicon glyphicon-repeat\",lib=\"glyphicon\"),\n      color = \"teal\"\n      ##glyphicon glyphicon-scale\n    )\n    \n  })\n  ###########websitetraffic growth percentage#######################\n  output$websitetrafficgrowth <- renderValueBox({\n    valueBox(\n      paste(webtrafficgrowthin2016,\"%\"), \"WebSiteTraffic Growth\", icon = icon(\"glyphicon glyphicon-arrow-down\",lib=\"glyphicon\"),\n      color = \"aqua\"\n    )\n    \n  })\n  ##today_sales_graph\n  \n  ##plot for monthly sales analysis\n  observe({\n    x<-input$sty \n    # print(x)\n    if(x==\"Today\")\n    {\n      # print(\"Hi all\")\n      output$today_sales_graph <- renderGvis({\n        tdsales<- select(tdaysales,timestamp,Sales)\n        x<-as.POSIXct(tdaysales$timestamp)\n        z<-round_date(x,unit=\"hour\")\n        Time<-strftime(z, format=\"%I.%M %p\")\n        todaysales<-cbind(Time,tdsales)\n         tdsalechart<-gvisAreaChart(todaysales,xvar=\"Time\",yvar=\"Sales\",options=list(height=\"200px\"))\n        return(tdsalechart)\n        \n      })\n      \n    }\n    if(x==\"Yesterday\")\n    {\n      output$today_sales_graph <- renderGvis({\n        ydsales<- select(ydaysales,timestamp,Sales)\n        x<-as.POSIXct(ydaysales$timestamp)\n        z<-round_date(x,unit=\"hour\")\n        Time<-strftime(z, format=\"%I.%M %p\")\n        yedaysales<-cbind(Time,ydsales)\n        ydsalechart<-gvisAreaChart(yedaysales,xvar=\"Time\",yvar=\"Sales\",options=list(width=\"100%\",height=\"200px\"))\n        return(ydsalechart)\n        \n      })\n    }\n  })\n  \n  ##plot for monthly sales analysis\n  output$monthly_sales_graph <- renderGvis({\n    msales<- select(daywisesales,day,sales)\n     Msales<-daywisesales$sales\n     msaleval<-cbind(msales,Msales)\n    msalechart<-gvisColumnChart(msales,xvar=\"day\",yvar=\"sales\",options =list(seriesType=\"bars\",colors=\"['66CCFF']\",height=\"300px\"))\n    return(msalechart)\n    \n  })\n  ##plot for monthly wise sales by lcoation\n  output$sales_Location_graph <- renderGvis({\n    \n    mlocsales <- msalelocval \n    msaleloc <- na.omit(mlocsales) \n    mgeostate <- gvisGeoChart(msaleloc,\"Location\",\"Revenue\",options=list(region=\"US\",displayMode=\"regions\",resolution=\"provinces\",height=\"300px\",colors=\"green\"))\n    return(mgeostate)\n    \n  })\n  \n  ########################Brand wise Revenue in a month####################\n  \n  output$Revenue_of_the_brand<- renderGvis({\n    BrandRevenue<- select(BrandRevenue,Brand,Revenue)\n    \n    BrandRevenuechart<-gvisPieChart(BrandRevenue,options=list(height=\"300px\"))\n    return(BrandRevenuechart)\n    \n  })\n  ###Difference in sales per month\n  output$Rev_curr<- renderGvis({\n    revqty<- select(msalebrand16mar,Brand,CurrentMonthSales,LastMonthSales,SalesGrowth)\n    revqtychart<-gvisTable(revqty,options=list(height=\"300px\"))\n    return(revqtychart)\n    \n  })\n  \n  #####NewCustomer Vs RepeatedCustomer\n  output$New_Rep_Cust_per<- renderGvis({\n    mname<-c(\"New\",\"Return\")\n    mnn<-c(mNewCustmerper,mRepeatCustmerper,mnewCustmerRev$Revenue,mRepeatCustmerRev$Revenue)\n    mNewRetcustPie<-data.frame(mname,mnn)\n    mNewRepCustchart<-gvisPieChart(mNewRetcustPie,options=list(colors=\"['B84B9E','32B92D']\",height=\"300px\"))\n    return(mNewRepCustchart) \n  })\n  \n  ##plot for a month sales in all the years\n  output$Month_sales_graph_everyYear <- renderGvis({\n    # marchrevenue<- select(RevenueMarchVal,RMinc,Revenue,Year)\n    marchrevenue<- select(RMVal,Revenue,Year)\n    \n    if(input$probins!=1)\n    {\n      Prevenue<-((RMVal$Revenue[4]*input$probins/100))\n      minc1=((((RMVal$Revenue[4]+Prevenue)-RMVal$Revenue[4])/((RMVal$Revenue[4])))*100)\n      # mic.annotation<-c(RMinc.annotation[1],RMinc.annotation[2],RMinc.annotation[3],RMinc.annotation[4])\n      # print(Prevenue)\n      ProRevenue<-c(0,0,0,Prevenue)\n      mic.annotation<-c(paste(0,\"%\"),paste(0,\"%\"),paste(0,\"%\"),paste(round(minc1,1),\"%\"))\n      ActRevenue<-c(RMVal$Revenue[1],RMVal$Revenue[2],RMVal$Revenue[3],RMVal$Revenue[4])\n      year<-c(RMVal$Year[1],RMVal$Year[2],RMVal$Year[3],RMVal$Year[4])\n      # inc.annotation<-paste(((Prevenue-Revenue[4])/Revenue[4])*100,\"%\")\n      # benchmark<-c(69821,69821,69821,69821)\n      rbind<-data.frame(ActRevenue,ProRevenue,year,RMinc.annotation,mic.annotation)\n      pRsalechart<-gvisColumnChart(rbind,xvar = \"year\",yvar = c(\"ActRevenue\",\"RMinc.annotation\",\"ProRevenue\",\"mic.annotation\"),options=list(isStacked=TRUE,colors=\"['0072BB','FF4C3B']\"))\n      return(pRsalechart)\n    }else{\n      # benchmark<-c(69821,69821,69821,69821)\n      # Rmval<-data.frame(RMVal,benchmark)\n      marchchart<-gvisColumnChart(RMVal,xvar = \"Year\",yvar = c(\"Revenue\",\"RMinc.annotation\"),options=list(seriesType=\"bars\",colors=\"['0072BB']\"))\n      # ,series='{2: {type:\"line\"}}'\n      return(marchchart)\n    }\n    \n  })\n  \n  ######################sales analysis for all years in feb and march######################\n  \n  output$Trends_FM<- renderGvis({\n    febmarch<- select(febmarchanalysis,Year,Month,Revenue)\n    Tdiff.annotation<-c(0,0,0,0)\n    Trdiff.annotation<-c(\"111.67%\",\"17.1%\",\"7.27%\",\"6.95%\")\n    # print(Trdiff.annotation)\n    Year<-c(\"2013\",\"2014\",\"2015\",\"2016\")\n    F<-c(febmarchanalysis$Revenue[1],febmarchanalysis$Revenue[3],febmarchanalysis$Revenue[5],febmarchanalysis$Revenue[7])\n    M<- c(febmarchanalysis$Revenue[2],febmarchanalysis$Revenue[4],febmarchanalysis$Revenue[6],febmarchanalysis$Revenue[8])\n    # Mbind<-data.frame(M,Trdiff.annotation)\n    trend<-data.frame(Year,F,M,Trdiff.annotation)\n      Trends<-gvisColumnChart(trend,xvar=c(\"Year\"),yvar=c(\"F\",\"M\",\"Trdiff.annotation\"),options=list(seriesType=\"bars\",colors=\"['814374','51A39D']\",height=\"300px\"))\n     # Trends<-plot_ly(trend,x=~(Year),y=c(\"F\",\"M\",\"Trdiff.annotation\"),type='bar',orientation = 'c')\n  \n     return(Trends)\n    \n  })\n  \n  #######################Customer Repeat vs New for month#######################################33\n  output$month_cust<- renderHighchart({\n    # grndcntfornew<-c(20,64,67,102)\n    # grndcntforrep<-c(27,51,83,116)\n    # year2<-c(\"2013\",\"2014\",\"2015\",\"2016\")\n    # \n    # newcust<-grndcntfornew\n    # repcust<-grndcntforrep\n    # \n    # nrc<-data.frame(year2,newcust,repcust)\n    # \n    # nrepcustformarch<-gvisColumnChart(nrc,options=list(colors=\"['92CD00','FFCF79']\"))\n    # \n    # return(nrepcustformarch)\n    year<-c(2013,2014,2015,2016)\n    mcustnew<-c(20,64,67,102)\n    mcustrep<-c(27,51,83,116)\n    mydata <- data.frame(NewCustomer=mcustnew,\n                         RepeatCustomer=mcustrep\n    )\n    \n    highchart() %>% \n      hc_chart(type = \"column\") %>% \n      hc_title(text = \"Customer\") %>% \n      hc_xAxis(categories =c('2013', '2014', '2015', '2016'))%>%\n      hc_yAxis(title = list(text = \"no of Customers\")) %>% \n      hc_plotOptions(column = list(\n        dataLabels = list(enabled = TRUE),\n        stacking = \"normal\",\n        enableMouseTracking = TRUE\n      )\n      ) %>% \n      hc_series(list(name=\"NewCustomer\",data=mydata$NewCustomer),\n                list(name=\"RepeatCustomer\",data=mydata$RepeatCustomer)\n      )\n    \n  })\n  \n  ###########topbrand for current month#########\n  output$mtopbrand <- renderValueBox({\n    valueBox(\n      value=tags$p(\"NextLevelApparel\",style = \"font-size: 75%;\"),\"Top Brand \",\n      color = \"maroon\"\n    )\n    \n  })\n  ##################top customer by revenue for current month##############\n  output$topcustomerforcurrentmonth <- renderValueBox({\n    valueBox(\n      paste(topcustomercurrentmonth,topcustomerlname,sep=\"\"),paste(\"TopCustomer\",round(mtopcust$Revenue/1000,2),\"K\"), icon = icon(\"glyphicon glyphicon-star\",lib=\"glyphicon\"),\n      color = \"olive\"\n    )\n    \n  })\n  ###############################comparision of visitors in the curren month(25th nd 26th days))#################\n  output$comparisionofvisitors<- renderValueBox({\n    valueBox(\n      paste(visitorsinday2526,\"%\"), \"Growth/Fall in no of visitors\",icon = icon(\"glyphicon glyphicon-sort\",lib=\"glyphicon\"), \n      color = \"purple\"\n    )\n    \n    \n  })\n  ### month\n  output$month <- renderValueBox({\n    valueBox(\n      \"26 March 2016\",paste(\"Analysis\"),\n      color = \"orange\"\n    )\n  })\n  \n  \n  ###############################################################################Month Dashboard for sales End####################################################\n  ##########################################################################Year Dashbaord for Sales Start########################################################\n  \n  #################Increase in Sales Percentage per year\n  yincreaseper=(differencey/data15)*100\n  output$ysalesComparision <- renderValueBox({\n    valueBox(\n      paste(round(yincreaseper,2),\"%\"), \"Growth in sales\", icon = icon(\"glyphicon glyphicon-sort\",lib=\"glyphicon\"),\n      color = \"red\"\n    )\n    \n  })\n  ##average order value for a year\n  output$yavg_order <- renderValueBox({\n    valueBox(\n      paste(round(YAvg_Value,2),\"$\"), \"Average Order Value\", icon = icon(\"glyphicon glyphicon-usd\",lib=\"glyphicon\"),\n      color = \"fuchsia\"\n    )\n    \n  })\n  ##Ecomerce ratio for a year\n  output$yEratio <- renderValueBox({\n    valueBox(\n      paste(round(yERatio,2),\"%\"),\"Ecommerce Conversion Ratio\",\n      color = \"purple\",icon = icon(\"credit-card\")\n      \n    )\n    \n  })\n  ###returning customers in a year\n  output$yrecustomers <- renderValueBox({\n    valueBox(\n      paste(round(Inc,2),\"%\"), \"Returning Customers\", icon = icon(\"glyphicon glyphicon-repeat\",lib=\"glyphicon\"),\n      color = \"teal\"\n    )\n    \n  })\n  \n  \n  ###AverageOrder +/- Growth\n  Avg_Inc=((YAvg_Value-YAvg_Value15)/YAvg_Value15)*100\n  output$incavg_order <- renderValueBox({\n    valueBox(\n      paste(round(Avg_Inc,2),\"%\"), \"Growth/Fall Avg Order Value\", icon = icon(\"glyphicon glyphicon-arrow-down\",lib=\"glyphicon\"),\n      color = \"olive\"\n    )\n    \n  })\n  \n  \n  ###returning customers in a year in %\n  orderrate=((order16-order15)/order15)*100\n  output$orderpick <- renderValueBox({\n    valueBox(\n      paste(round(orderrate,2),\"%\"), \"Order Picking Rate\", icon = icon(\"glyphicon glyphicon-circle-arrow-down\",lib=\"glyphicon\"),\n      color = \"navy\"\n    )\n    \n  })\n  ##revenue generated for a year\n  output$yrevenue <- renderValueBox({\n    valueBox(\n      paste(round(yRevenueval/1000000,2),\"M\" ), \"Revenue\", icon = icon(\"glyphicon glyphicon-usd\",lib=\"glyphicon\"),\n      color = \"orange\"\n    )\n  })\n  ###############################comparision of visitors in the current year(2016) & previous year(2015)#################\n  \n  output$yearwisevisitors<- renderValueBox({\n     visitorsinyear201516<-cbind(((visitorsinyear2016-visitorsinyear2015)/visitorsinyear2015)*100)\n    valueBox(\n      paste(round(visitorsinyear201516),\"%\"), \"Growth/Fall in no of visitors \",icon = icon(\"glyphicon glyphicon-sort\",lib=\"glyphicon\"), \n      color = \"black\"\n    )\n    \n    \n  })\n  ###Q1 sales analysis\n  \n  output$Q1Sales <- renderValueBox({\n    quartersalesinyear201516<-(((salesq1[2]-salesq1[1])/salesq1[1]))*100  \n    valueBox(\n      paste(round(quartersalesinyear201516,3),\"%\"),\"Growth in Sales Q1\",  icon = icon(\"glyphicon glyphicon-arrow-up\", lib = \"glyphicon\"),\n      color = \"yellow\"\n    )\n  })\n  ###Q1Visitors\n  output$Q1Visitors <- renderValueBox({\n    quartervisitorsinyear201516<-(((visitorsq1[1]-visitorsq1[2])/visitorsq1[2]))*100\n    valueBox(\n      paste(round(quartervisitorsinyear201516,2),\"%\"), \"Growth in Visitors Q1\", icon = icon(\"glyphicon glyphicon-plus-sign\", lib = \"glyphicon\"),\n      color = \"maroon\"\n    )\n  })\n  \n  ###Q1orderpick\n  output$Q1orderpick <- renderValueBox({\n    orderratein201516<-((q1order[1]-q1order[2])/q1order[2])*100\n    valueBox(\n      paste(round(orderratein201516,2),\"%\"),\"Growth in OrderPick Q1\",  icon = icon(\"glyphicon glyphicon-gift\", lib = \"glyphicon\"),\n      color = \"light-blue\"\n    )\n  })\n  ##Q1Avgorder\n  output$Q1Avgorder <- renderValueBox({\n    Avg_Inc201516<-((q1avgorder[1]-q1avgorder[2])/q1avgorder[2])*100\n    valueBox(\n      paste(round(Avg_Inc201516,2),\"%\"),\"Growth in Avg Order Value Q1\",  icon = icon(\"glyphicon glyphicon-circle-arrow-down\", lib = \"glyphicon\"),\n      color = \"aqua\"\n    )\n  })\n  ##plot for yearly sales analysis\n  output$Yearly_sales_graph <- renderPlotly({\n    # ysales<- select(ysalesval,Month,Sales)\n    Month<-c(\"Jan\",\"Feb\",\"Mar\")\n    Sales<-ysalesval$Sales\n    ysd<-data.frame(Month,Sales)\n    p<-plot_ly(ysd,labels = Month, values = Sales) %>%\n      add_pie(hole = 0.6) %>%\n      layout( showlegend = F,\n             xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),\n             yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))\n    p\n    \n  })\n  ##plot for yearly wise sales by lcoation\n  output$sales_Location_graph_Year <- renderGvis({\n    \n    ylocsales <- ysalelocvaly \n    ysaleloc <- na.omit(ylocsales) \n    ygeostate <- gvisGeoChart(ysaleloc,\"Location\",\"Revenue\",options=list(region=\"US\",displayMode=\"regions\",resolution=\"provinces\",height=\"300px\",colors=\"red\"))\n    return(ygeostate)\n    \n  })\n  ########################Brand wise Revenue in the current year(2016)####################\n  \n  output$year_wise_Brand_Revenue<- renderGvis({\n    YBrandRevenue1<- select(YBrandRevenue,Brand,Revenue)\n    \n    YBrandRevenuechart<-gvisPieChart(YBrandRevenue1,options=list(height=\"300px\"))\n    return(YBrandRevenuechart)\n    \n  })\n  ##plot for revenue genrted in all the years\n  output$year_wise_revenue<- renderGvis({\n    # yRsales<- select(yRevenue,Year,Revenue,yminc.annotation)\n    if(input$yprobins!=1){\n      Psales<-((ypincval$Revenue[5]*input$yprobins/100))\n      minc1=((((ypincval$Revenue[5]+Psales)-ypincval$Revenue[5])/((ypincval$Revenue[5])))*100)\n      ProRevenue<-c(0,0,0,0,Psales)\n      mic.annotation<-c(paste(0,\"%\"),paste(0,\"%\"),paste(0,\"%\"),paste(0,\"%\"),paste(round(minc1,1),\"%\"))\n      ActRevenue<-c(ypincval$Revenue[1],ypincval$Revenue[2],ypincval$Revenue[3],ypincval$Revenue[4],ypincval$Revenue[5])\n      year<-c(ypincval$Year[1],ypincval$Year[2],ypincval$Year[3],ypincval$Year[4],ypincval$Year[5])\n      rbind<-data.frame(ActRevenue,ProRevenue,year,yminc.annotation,mic.annotation)\n      yRsalechart<-gvisColumnChart(rbind,xvar = \"year\",yvar = c(\"ActRevenue\",\"yminc.annotation\",\"ProRevenue\",\"mic.annotation\"),options=list(isStacked=TRUE,colors=\"['#008000','3A5F0B']\"))\n      return(yRsalechart) \n      \n     \n      \n    }else{\n      yRsalechart<-gvisColumnChart(ymval,xvar = \"Year\",yvar = c(\"Revenue\",\"yminc.annotation\"),options=list(colors=\"['#008000']\"))\n      return(yRsalechart)\n      }\n    \n    \n  })\n  \n  #####FOr year########################\n  output$year_cust<- renderHighchart({\n    year<-c(2012,2013,2014,2015,2016)\n    ycustnew<-c(25,86,115,152,108)\n    ycustrep<-c(68,191,314,402,220)\n    mydata <- data.frame(NewCustomer=ycustnew,\n                         RepeatCustomer=ycustrep\n    )\n    \n    highchart() %>% \n      hc_chart(type = \"column\") %>% \n      hc_title(text = \"Customer\") %>% \n      hc_xAxis(categories =c('2012', '2013', '2014', '2015', '2016'))%>%\n      hc_yAxis(title = list(text = \"no of Customers\")) %>% \n      hc_plotOptions(column = list(\n        dataLabels = list(enabled = TRUE),\n        stacking = \"normal\",\n        enableMouseTracking = TRUE\n      )\n      ) %>% \n      hc_series(list(name=\"NewCustomer\",data=mydata$NewCustomer),\n                list(name=\"RepeatCustomer\",data=mydata$RepeatCustomer)\n      )\n    \n    \n    \n    \n  })\n  ###############finding the number of visitors in all years ##################\n  output$web_traffic<- renderPlotly({\n    # visitors1<- select(yearwebtraffic,year,visitors,visitors1.annotation)\n    # gf<-select(yearwebtraffic)\n    visitors1.annotation<-c(\"0%\",\"252%\",\"18%\",\"41%\",\"-71%\")\n    visitorsgrowthorfall<-data.frame(yearwebtraffic,visitors1.annotation)\n    f <- list(\n      family = \"Courier New, monospace\",\n      size = 18,\n      color = \"#7f7f7f\"\n    )\n    x <- list(title = \"Year\",titlefont = f)\n    y <- list(\n      title = \"Visitors\",\n      titlefont = f\n    )\n    visitorschart<-plot_ly(x=c(yearwebtraffic$year),y=c(yearwebtraffic$visitors),type=\"bar\",mode=\"markers\")%>%\n      layout(xaxis = x, yaxis = y)\n    return(visitorschart)\n\n  })\n  \n  #####Top 10 best products of current year(2016)\"\n  output$topproducts<- renderGvis({\n    TopBest<- select(TopBestProducts,Productid,Name,Sales)\n    topbestprochart<-gvisTable(TopBest)\n    return(topbestprochart)\n    \n  })\n  #####Top 10 best products of current year(2016) in location wise\"\n  output$topproductsinlocwise<- renderGvis({\n    TopBestinloc<- select(locationwise,Location,Name,sales)\n    \n    topbestproinlocchart<-gvisTable(TopBestinloc)\n    return(topbestproinlocchart)\n    \n  })\n  ###Difference in sales\n  output$ySalesdiff<- renderGvis({\n    yrevqty<- select(ybrandsale,Brand,CurrentYear,LastYear,GrowthinSales)\n    yrevqtychart<-gvisTable(yrevqty)\n    return(yrevqtychart)\n    \n  })\n  \n  #####Average day order value##########\n  output$Avg_day<-renderPlotly({\n    df<-select(YmAvg_Value,Month,AvgOrderValue)\n    YmAvg_Value$Month<-NULL\n    Month<-c('JAN','FEB','MAR')\n    AvgValue<-c(YmAvg_Value$AvgOrderValue[1],YmAvg_Value$AvgOrderValue[2],YmAvg_Value$AvgOrderValue[3])\n    b2b<-c(491,491,491)\n    b2c<-c(147,147,147)\n    df<-data.frame(Month,AvgValue,b2b,b2c)\n    df$Month <- factor(df$Month, levels = df[[\"Month\"]])\n    f <- list(\n      family = \"Courier New, monospace\",\n      size = 18,\n      color = \"#7f7f7f\"\n    )\n    x <- list(title = \"Month\",titlefont = f)\n    y <- list(\n      title = \"AverageOrderValue\",\n      titlefont = f\n    )\n    daygv<-plot_ly(df,x=~Month,y=~AvgValue,type = \"bar\" ,name = 'AverageOrderValue',mode = \"markers\" )%>%\n      add_trace(y = ~b2b, name = 'B2B',type=\"scatter\",mode=\"line\") %>%\n      add_trace(y = ~b2c, name = 'B2c Values',type=\"scatter\",mode=\"line\") %>%\n      layout(xaxis = x, yaxis = y)\n    return(daygv)\n  })\n  #####BenchMarking for year2015\n  #####Average day order value##########\n  output$month_avg<-renderPlotly({\n    df<-select(ypAvg_value,Month,AvgOrderValue)\n    YmAvg_Value$Month<-NULL\n    Month<-c(\"JAN\",\"FEB\",\"MAR\",\"APR\",\"MAY\",\"JUN\",\"JUL\",\"AUG\",\"SEP\",\"OCT\",\"NOV\",\"DEC\")\n    AvgValue<-c(ypAvg_value$AvgOrderValue[1],ypAvg_value$AvgOrderValue[2],ypAvg_value$AvgOrderValue[3],ypAvg_value$AvgOrderValue[4],ypAvg_value$AvgOrderValue[5],ypAvg_value$AvgOrderValue[6],\n                ypAvg_value$AvgOrderValue[7],ypAvg_value$AvgOrderValue[8],ypAvg_value$AvgOrderValue[9],ypAvg_value$AvgOrderValue[10],ypAvg_value$AvgOrderValue[11],ypAvg_value$AvgOrderValue[12])\n    b2b<-c(491,491,491,491,491,491,491,491,491,491,491,491)\n    b2c<-c(147,147,147,147,147,147,147,147,147,147,147,147)\n    df<-data.frame(Month,AvgValue,b2b,b2c)\n    df$Month <- factor(df$Month, levels = df[[\"Month\"]])\n    f <- list(\n      family = \"Courier New, monospace\",\n      size = 18,\n      color = \"#7f7f7f\"\n    )\n    x <- list(title = \"Month\",titlefont = f)\n    y <- list(\n      title = \"AverageOrderValue\",\n      titlefont = f\n    )\n    daygv<-plot_ly(df,x=~Month,y=~AvgValue,type = \"bar\" ,name = 'AverageOrderValue',mode = \"markers\",marker = list(color = 'rgb(153, 0, 51)') )%>%\n      add_trace(y = ~b2b, name = 'B2B',type=\"scatter\",mode=\"line\") %>%\n      add_trace(y = ~b2c, name = 'B2c Values',type=\"scatter\",mode=\"line\") %>%\n      layout(xaxis = x, yaxis = y)\n    return(daygv)\n  })\n  #####Benchmarking for EcommerceRatio\n  output$er_year<-renderPlotly({\n    # df<-select(ypVisitsval,ypTrValue)\n    ypVisitsval$Month<-NULL\n    ypTrValue$Month<-NULL\n    Month<-c('JAN','FEB','MAR','APR','MAY','JUN','JUL','AUG','SEP','OCT','NOV','DEC')\n    for(i in 1:12){\n      EpRation<-c((ypTrValue$Count/ypVisitsval$Visitor)*100)\n    }\n    \n    b2b<-c(3,3,3,3,3,3,3,3,3,3,3,3)\n    b2c<-c(3.24,3.24,3.24,3.24,3.24,3.24,3.24,3.24,3.24,3.24,3.24,3.24)\n    df<-data.frame(Month,EpRation,b2b,b2c)\n    df$Month <- factor(df$Month, levels = df[[\"Month\"]])\n    f <- list(\n      family = \"Courier New, monospace\",\n      size = 18,\n      color = \"#7f7f7f\"\n    )\n    x <- list(title = \"Month\",titlefont = f)\n    y <- list(\n      title = \"ECommerceRatio\",\n      titlefont = f\n    )\n    daygv<-plot_ly(df,x=~Month,y=~EpRation,type = \"bar\" ,name = 'ECommerceRatio',mode = \"markers\",marker = list(color = 'rgb(102, 153, 0)') )%>%\n      add_trace(y = ~b2b, name = 'B2B',type=\"scatter\",mode=\"line\") %>%\n      add_trace(y = ~b2c, name = 'B2c Values',type=\"scatter\",mode=\"line\") %>%\n      layout(xaxis = x, yaxis = y)\n    return(daygv)\n  })\n  #####Benchmarking for Growth in sales\n  output$sp_year<-renderPlotly({\n    dff<-select(ymval,Year,ysales)\n    growth<-dff$ysales\n    Year<-dff$Year\n    b2b<-c(22,22,22,22,22)\n    # b2c<-c(3.24,3.24,3.24,3.24,3.24,3.24,3.24,3.24,3.24,3.24,3.24,3.24)\n    df<-data.frame(growth,Year,b2b)\n    # df$Month <- factor(df$Month, levels = data[[\"Month\"]])\n    f <- list(\n      family = \"Courier New, monospace\",\n      size = 18,\n      color = \"#7f7f7f\"\n    )\n    x <- list(title = \"Year\",titlefont = f)\n    y <- list(\n      title = \"Growth in sales\",\n      titlefont = f\n    )\n    daygv<-plot_ly(df,x=~Year,y=~growth,type = \"bar\" ,name = 'Growth in Sales',mode = \"markers\",marker = list(color = 'rgb(0, 153, 255)') )%>%\n      add_trace(y = ~b2b, name = 'B2B',type=\"scatter\",mode=\"line\") %>%\n      # add_trace(y = ~b2c, name = 'B2c Values',type=\"scatter\",mode=\"line\") %>%\n      layout(xaxis = x, yaxis = y)\n    return(daygv)\n  })\n  ###################################################################CurrentYear Dashboard for sales end############################################################\n  ####################################################CurrentMonth Inventory#############################################################\n  ##Average Inventory sold for a month\n  output$minventory <- renderInfoBox({\n    infoBox(\n      \" Averge Inventory SOld per Day\", paste(round(mtotUnitsSold/26,2)),icon=icon(\"glyphicon glyphicon-scale\",lib=\"glyphicon\"),\n      color = \"blue\",fill = TRUE\n    )\n  }) \n  \n  ##top product in a month by sales\n  output$mtopproduct<- renderInfoBox({\n    infoBox(\n      \" Top Product\",paste(maxQty/1000,\"K\"),icon=icon(\"glyphicon glyphicon-apple\",lib=\"glyphicon\"),\n      color = \"red\",fill = TRUE\n    )\n  })\n  \n  ##Average units sold for a day in month\n  output$miturn<- renderInfoBox({\n    infoBox(\n      \"Units SOld in Month\",paste(mtotUnitsSold),icon = icon(\"glyphicon glyphicon-usd\",lib=\"glyphicon\"),\n      color = \"green\",fill = TRUE\n    )\n  })\n  ###Units per transactions in a month\n  output$munits <- renderValueBox({\n    infoBox(\n      \"Units per Transaction\",paste(round(munitspertransaction,3)),  icon = icon(\"thumbs-up\", lib = \"glyphicon\"),\n      color = \"orange\",fill=TRUE\n    )\n  })\n  \n  ######\n  ##plot for sales and Pricing in a month\n  output$msalespricing<- renderGvis({\n    munitssoldandship<- select(msupplychainval,Day,UnitsOrdered,UnitsShipped)\n    Day<-msupplychainval$Day\n    UnitsSold<-msupplychainval$UnitsOrdered\n    UnitsShipped<-msupplychainval$UnitsShipped\n    Sales<-msupplychainval$sales\n    mdf<-data.frame(Day,UnitsSold,UnitsShipped,Sales)\n    # unitssell<-gvisComboChart(unitssoldandship,xvar=\"UnitsOrderd\",yvar=\"UnitsShipped\")\n    munitssell<-gvisColumnChart(mdf,options=list(seriesType=\"bars\",series='{2: {type:\"line\"}}'))\n    \n    return(munitssell)\n    \n  })\n  \n  ##plot for Qty sold by lcoation in a month\n  output$mQty_Sold_loc<- renderGvis({\n    # ilsales<- select(InventsalesbyRegion,Revenue,Location)\n    mInventorysalesbyRegion <- mIsalesbyRegion\n    milsales <- na.omit(mInventorysalesbyRegion)\n    milgeostate <- gvisGeoChart(milsales,\"Location\",\"QuantityOrdered\",options=list(region=\"US\",displayMode=\"regions\",resolution=\"provinces\",height=\"230px\",colors=\"['#2C3E50']\"))\n    return(milgeostate)\n    \n  })\n  \n  #####Brand wise quantity month\n  output$mBrand_wise_qty<- renderGvis({\n    mbrndwiseqty<- select(BrandRevenue,Brand,Qty)\n    mbrandwiseqtychart<-gvisPieChart(mbrndwiseqty,options = list(height=\"230px\"))\n    return(mbrandwiseqtychart) \n  })\n  \n  ##Difference in Qty Per month\n  output$Qty_curr<- renderGvis({\n    revqty<- select(msalebrand16mar,Brand,CurrentmonthQty,LastmonthQty,QuantityGrowth)\n    revqtychart<-gvisTable(revqty,options=list(height=\"230px\"))\n    return(revqtychart)\n    \n  })\n  \n  #############plot for Trends in the today and yesterday#############\n  \n  # output$tb2<-renderTable(row2016 ,options = list(lengthChange=TRUE,class = 'cell-border stripe',height=\"1000px\"))\n  output$tb2<-renderGvis({\n    \n    trends<-select(row2016,AvgperCustomer,Sales,QtyOrdered)\n    row2016$totalcustomers <- NULL\n    row2016$month <- NULL\n    row2016$day <- NULL\n    row2016$year <- NULL\n    Trends<-c(\"Yesterday\",\"Today\",\"+/- in Percentage\")\n    # rownames[2]<-\"Today\"\n    # rownames[3]<-\"+/- in Percentage\"\n    tdata<-data.frame(Trends,row2016)\n    \n    trendsoutput<-gvisTable(tdata,options=list(width=\"100%\",height=\"230px\"))\n    return(trendsoutput)\n  })\n  ###Available Inventory and Downlaoding filteredData  \n  output$tbl = DT::renderDataTable(\n    availInventoryStock, filter = 'top', options = list(lengthChange = TRUE, pageLength = 5,scrollX = TRUE)\n    \n  )\n  \n  #####for download button################ \n  output$x3 = downloadHandler(\"mydata.csv\",\n                              filename = function() {\n                                # input$filetype\n                                paste( \"filtereddata\",sep = \".\",\"csv\")\n                              },\n                              \n                              content = function(file) {\n                                s = input$tbl_rows_all\n                                write.csv(availstock[s, , drop = FALSE], file)\n                              } )\n  availstock = availInventoryStock[, c('Productid', 'Quantity','Productname')]\n  \n  output$tb1 = DT::renderDataTable(availstock, server = FALSE,options=list(\"scrollY\":\"350px\",\n                                                                           \"scrollCollapse\": TRUE,\n                                                                           \"paging\":         FALSE))\n  \n  \n  \n  ##################top customer by items ordered for current month##############\n  outputTopcustomer<- renderValueBox({\n    valueBox(\n      paste(topcustomercurrentmonthbyitem), \"Top customer \",icon = icon(\"glyphicon glyphicon-heart\",lib=\"glyphicon\"), \n      color = \"orange\"\n    )\n    \n  })\n  \n  ###############################################Quantity CurrentMonth Dashboard end############################################################\n  #########################################Quantity currentYear Dashboard end############################################################\n  \n  ##Average Inventorysold for a year\n  output$yinventory <- renderInfoBox({\n    infoBox(\n      \" Averge Inventory SOld Per Month\", paste( round(ytotUnitsSold/3,2)),icon=icon(\"glyphicon glyphicon-scale\",lib=\"glyphicon\"),\n      color = \"blue\",fill = TRUE\n    )\n  })\n  \n  ##top product in a year by sales\n  output$ytopproduct<- renderInfoBox({\n    infoBox(\n      \" Top Product \",paste(ymaxQty/1000,\"K\"),icon=icon(\"glyphicon glyphicon-apple\",lib=\"glyphicon\"),\n      color = \"red\",fill = TRUE\n    )\n  })\n  \n  \n  ##Average units sold for a month in a year\n  output$yiturn<- renderInfoBox({\n    infoBox(\n      \"Units Sold in Year\",paste(ytotUnitsSold),icon = icon(\"glyphicon glyphicon-usd\",lib=\"glyphicon\"),\n      color = \"green\",fill = TRUE\n    )\n  })\n  \n  ###Units per transactions in a year\n  output$yunits <- renderValueBox({\n    infoBox(\n      \"Units per Transaction\",paste(round(yunitspertransaction,3)),  icon = icon(\"thumbs-up\", lib = \"glyphicon\"),\n      color = \"orange\",fill=TRUE\n    )\n  })\n  \n  \n  ##plot for Qty sold by lcoation in a year\n  output$YQty_Sold_loc<- renderGvis({\n    # ilsales<- select(InventsalesbyRegion,Revenue,Location)\n    yInventorysalesbyRegion <- yIsalesbyRegion\n    yilsales <- na.omit(yInventorysalesbyRegion)\n    yilgeostate <- gvisGeoChart(yilsales,\"Location\",\"QuantityOrdered\",options=list(region=\"US\",displayMode=\"regions\",resolution=\"provinces\",width=\"600px\",height=\"400px\",colors=\"['#5B2C6F']\"))\n    return(yilgeostate)\n    \n  })\n  ##plot for sales and Pricing in a year\n  output$ysalespricing<- renderGvis({\n    yunitssoldandship<- select(ysupplychainval,Month,UnitsOrdered,UnitsShipped)\n    \n    Month<-Month<-c(\"JAN\",\"FEB\",\"MAR\")\n    # ysupplychainval$Month\n    UnitsSold<-ysupplychainval$UnitsOrdered\n    UnitsShipped<-ysupplychainval$UnitsShipped\n    Sales<-ysupplychainval$sales\n    ydf<-data.frame(Month,UnitsSold,UnitsShipped,Sales)\n    # unitssell<-gvisComboChart(unitssoldandship,xvar=\"UnitsOrderd\",yvar=\"UnitsShipped\")\n    yunitssell<-gvisColumnChart(ydf,options=list(seriesType=\"bars\",series='{2: {type:\"line\"}}',colors=\"['0099CC','CCFFCC','#BA4A00']\",height = \"400px\"))\n    \n    return(yunitssell)\n    \n  })\n  \n  \n  ##################max_units ordered for all years##############lengthChange = TRUE, pageLength = 5,scrollY = TRUE,scrollX = FALSE,autoWidth = T\n  output$tb4 = DT::renderDataTable(\n    maxunitssold, filter = 'top', options = list(lengthChange = TRUE, pageLength = 5,scrollY = TRUE,scrollX = FALSE,autoWidth = T)\n    \n  )\n  \n  #################total number of units  sold in all years############################\"\n  output$total_units_sold<- renderGvis({\n    numberofunits<- select(numberofunitssold,year,qty)\n    \n    numberofunitschart<-gvisColumnChart(numberofunits,options=list(height=\"400px\"))\n    return(numberofunitschart)\n    \n  })\n  \n  ###############################################\n  output$tb5 = DT::renderDataTable(\n    wholeyears, filter = 'top', options = list(lengthChange = TRUE, pageLength = 5,scrollY = TRUE,scrollX = TRUE,autoWidth = T)\n    \n  )\n  \n  #####Top 10 best products of current year(2016) by quantity\"\n  output$top_Qty_products<- renderGvis({\n    topBest<- select(TopBestProducts,Productid,Name,Quantity)\n    topprochart<-gvisTable(topBest)\n    return(topprochart)\n    \n  }) \n  \n  \n  #######yesterday graph\n  output$ygraphs<- renderGvis({\n    #ord<- select(row2016)\n    values<-c(\"Quantityordered\",\"AvgperCustomer\",\"Sales\")\n    # yesterday<-c(1129.00,194.8583,4481.74)\n    # today<-c(825.00,200.1278,3602.30)\n    difference<-c(-26.93,2.7,-19.62)\n    \n    # yes<-yesterday\n    # tod<-today\n    # \n    tdf<-data.frame(values,difference)\n    ordchart <-gvisColumnChart(tdf,options=list(title=\"Growth or Fall\",colors=\"['666633','CCCC99']\"))\n    return(ordchart) \n  })\n  \n  \n  #####Brand wise quantity year\n  output$yBrand_wise_qty<- renderGvis({\n    ybrndwiseqty<- select(YBrandRevenue,Brand,Qty)\n    ybrandwiseqtychart<-gvisPieChart(ybrndwiseqty,options=list(height=\"400px\"))\n    return(ybrandwiseqtychart) \n  })\n  ###difference in Qty\n  output$Qty_15_16<- renderGvis({\n    yrevqty<- select(ybrandsale,Brand,CurrentYearQty,LastYearQty,GrowthinQuantity)\n    yrevqtychart<-gvisTable(yrevqty)\n    return(yrevqtychart)\n    \n  })\n  #####Top 10 best products of current year(2016) in location wise\"\n  output$top_Qty_products_loc<- renderGvis({\n    topBestinloc<- select(locationwise,Location,Name,Quantity)\n    \n    Topbestlocchart<-gvisTable(topBestinloc)\n    return(Topbestlocchart)\n    \n  })\n  \n     \n    \n  # })\n  \n \n ####Predictions \n  output$revenue<-renderPlotly({\n    \n    month <- c('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul',\n               'Aug', 'Sep', 'Oct', 'Nov', 'Dec')\n    \n    \n    quarterRevenues<-c(177305.1500,156696.6500,167589.9700,\n                       161294.24,175739.46,190184.69,\n                       205526.02,220761.76,235997.50,\n                       227371.41,208482.62,189593.83)\n    LowerLimit<-c(0,0,0,\n                  101319.770,116706.017,119813.433,\n                  143911.48,157583.78,158676.15,\n                  138624.5448,127634.9472,104348.9918)\n    UpperLimit<-c(0,0,0,\n                  238789.2,245967.2,265424.1,\n                  284751.8,290014.6,307857.3,\n                  316567.9,290000.7,275729.9)\n    \n    \n    data <- data.frame(month,quarterRevenues,LowerLimit,UpperLimit)\n    \n    data$month <- factor(data$month, levels = data[[\"month\"]])\n    \n    p <- plot_ly(data, x = ~month, y =~quarterRevenues, name = 'Revenue', type = 'scatter', mode = 'lines',\n                 marker = list(color = 'rgb(205, 12, 24)')  ) %>%\n      # add_trace(y = ~quarterRevenues, name = ' Revenue', line = list(color ='rgb(205, 12, 24)' , width = 4,dash = 'dash')) %>%\n      # add_trace(y = ~UpperLimit, name = ' upper limit', line = list(color ='rgb( 0, 114, 187 )' , width = 4)) %>%\n      \n      \n      layout(title = \"Prediction of Revenue\",\n             xaxis = list(title = \"Months\"),\n             yaxis = list (title = \"Revenues\"),\n             barmode = 'relative')\n    \n    \n    return(p)\n    \n  })   \n  \n  output$visitors<-renderPlotly({\n    # #\n    \n    month <- c('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul',\n               'Aug', 'Sep', 'Oct', 'Nov', 'Dec')\n    \n    \n    quarterVisitors<-c(55371,59321,49380,\n                       38318.2,40783.6,43249.0,\n                       45035.84,49172.54,53309.24,\n                       69588.11,62947.05,56305.98)\n    LowerLimit<-c(0,0,0,\n                  33306.01,37050.95,39602.31,\n                  25629.402,29496.699,30488.904,\n                  14005.040,15439.092,5650.064)\n    \n    UpperLimit<-c(0,0,0,\n                  44618.59,46935.80,50446.58,\n                  65701.10,67460.50,72095.00,\n                  120376.17,108385.40,107617.70)\n    \n    \n    data <- data.frame(month,quarterVisitors,LowerLimit,UpperLimit)\n    \n    data$month <- factor(data$month, levels = data[[\"month\"]])\n    \n    p <- plot_ly(data, x = ~month, y = ~quarterVisitors,  type = 'bar', name = 'Visitors',color = 'rgb( 255, 76, 59 )') %>%\n      layout(title = 'Number of visitors ',\n             xaxis = list(title = 'Month'),\n             yaxis = list(title = 'Number of visitors'),\n             barmode = 'relative')\n    \n    return(p)\n    \n    \n    \n  })\n  \n  \n  #############Revenue in Q1\n  output$Revenue_in_q1 <- renderValueBox({\n    valueBox(\n      paste(round(TotalRevenueinQ1,2)), \"Total Revenue in Q1\", icon = icon(\"glyphicon glyphicon-usd\",lib=\"glyphicon\"),\n      color = \"fuchsia\"\n    )\n    \n  })\n  \n  #############Revenue in Q2\n  output$Revenue_in_q2 <- renderValueBox({\n    valueBox(\n      paste(round(TotalRevenueinQ2,2)), \"Total Revenue in Q2\", icon = icon(\"glyphicon glyphicon-usd\",lib=\"glyphicon\"),\n      color = \"purple\"\n    )\n    \n  })\n  \n  #############Revenue in Q3\n  output$Revenue_in_q3 <- renderValueBox({\n    valueBox(\n      paste(round(TotalRevenueinQ3,2)), \"Total Revenue in Q3\", icon = icon(\"glyphicon glyphicon-usd\",lib=\"glyphicon\"),\n      color = \"orange\"\n    )\n    \n  })\n  \n  #############Revenue in Q4\n  output$Revenue_in_q4 <- renderValueBox({\n    valueBox(\n      paste(round(TotalRevenueinQ4,2)), \"Total Revenue in Q4\", icon = icon(\"glyphicon glyphicon-usd\",lib=\"glyphicon\"),\n      color = \"black\"\n    )\n    \n  })\n  \n  \n  \n  #############Visitors in Q1\n  output$Number_of_visitors_in_q1 <- renderValueBox({\n    valueBox(\n      paste(round(totalNumberofVisitorsinQ1,2),\"K\"), \"Total Number of Visitors in Q1\", icon = icon(\"glyphicon glyphicon-user\",lib=\"glyphicon\"),\n      color = \"red\"\n    )\n    \n  })\n  \n  ############Visitors in Q2\n  output$Number_of_visitors_in_q2 <- renderValueBox({\n    valueBox(\n      paste(round(totalNumberofVisitorsinQ2,2),\"K\"), \"Total Number of Visitors in Q2\", icon = icon(\"fa fa-user-circle\"),\n      color = \"teal\"\n    )\n    \n  })\n  \n  #############Visitors in Q3\n  output$Number_of_visitors_in_q3 <- renderValueBox({\n    valueBox(\n      paste(round(totalNumberofVisitorsinQ3,2),\"K\"), \"Total Number of Visitors in Q3\", icon = icon(\"fa fa-user\"),\n      color = \"navy\"\n    )\n    \n  })\n  \n  #############Visitors in Q4\n  output$Number_of_visitors_in_q4 <- renderValueBox({\n    valueBox(\n      paste(round(totalNumberofVisitorsinQ4,2),\"K\"), \"Total Number of Visitors in Q4\", icon = icon(\"fa fa-user-md\"),\n      color = \"yellow\"\n    )\n    \n  })\n  \n  \n  \n \n  \n}",
    "created" : 1486969859763.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3562880058",
    "id" : "39F8C0E0",
    "lastKnownWriteTime" : 1491201918,
    "last_content_update" : 1491201918674,
    "path" : "F:/ShineyWorkSpace/SLC_POC/SLC_POC/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}