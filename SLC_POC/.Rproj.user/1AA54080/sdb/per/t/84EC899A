{
    "collab_server" : "",
    "contents" : "library(RMySQL)\nmydb = dbConnect(MySQL(),user='readonly',password='readonly123',dbname='slcawdb',host='183.82.106.91')\nupArrow <-c('<i class=\"glyphicon glyphicon-arrow-up\" style=\"color:#0073b7;float: right;padding: 2px 15px 0px 0px;\"></i>')\ndownArrow<-c('<i class=\"glyphicon glyphicon-arrow-down\" style=\"color:#bc3f30;float: right;padding: 2px 15px 0px 0px;\"></i>')\nminus<-c('<i class=\"glyphicon glyphicon-minus\" style=\"float: right;padding: 2px 15px 0px 0px;\"></i>')\n###current day analysis\n# ##current day analysis for sales\ntday=dbSendQuery(mydb,'select year(sales_flat_order.updated_at) as year,\n                 month(sales_flat_order.updated_at) as month,\n                 day(sales_flat_order.updated_at) as day,\n                 timestamp( sales_flat_order.updated_at) as timestamp,\n                 \n                 sum(sales_flat_invoice.grand_total) as Sales\n                 \n                 from sales_flat_order,sales_flat_invoice\n                 \n                 where sales_flat_order.entity_id=sales_flat_invoice.order_id  and year(sales_flat_order.updated_at)=2016 and month(sales_flat_order.updated_at)=3 and day(sales_flat_order.updated_at)=26  group by time( sales_flat_order.updated_at)\n                 \n                 ')\ntdaysales= fetch(tday, n=-1) \n# ##analysis for yesterday sales\nyday=dbSendQuery(mydb,'select year(sales_flat_order.updated_at) as year,\n                 month(sales_flat_order.updated_at) as month,\n                 day(sales_flat_order.updated_at) as day,\n                 timestamp( sales_flat_order.updated_at) as timestamp,\n                 \n                 sum(sales_flat_invoice.grand_total) as Sales\n                 \n                 from sales_flat_order,sales_flat_invoice\n                 \n                 where sales_flat_order.entity_id=sales_flat_invoice.order_id  and year(sales_flat_order.updated_at)=2016 and month(sales_flat_order.updated_at)=3 and day(sales_flat_order.updated_at)=25  group by time( sales_flat_order.updated_at)   \n                 \n                 ')\nydaysales= fetch(yday, n=-1) \n# ##current month analysis for sales\nrs=dbSendQuery(mydb,'select year(sales_flat_order.updated_at) as year,\n               month(sales_flat_order.updated_at) as month,\n               day(sales_flat_order.updated_at) as day,\n               \n               sum(sales_flat_invoice.grand_total) as sales\n               \n               from sales_flat_order,sales_flat_invoice\n               \n               where sales_flat_order.entity_id=sales_flat_invoice.order_id  and year(sales_flat_order.updated_at)=2016 and month(sales_flat_order.updated_at)=3    \n               \n               group by date(sales_flat_order.updated_at)')\ndaywisesales= fetch(rs, n=-1) \n###current year analysis of sales\nYsales=dbSendQuery(mydb,'select year(sales_flat_order.updated_at) as Year,\n                   month(sales_flat_order.updated_at) as Month,\n                   \n                   sum(sales_flat_invoice.grand_total) as Sales\n                   \n                   from sales_flat_order,sales_flat_invoice\n                   \n                   where sales_flat_order.entity_id=sales_flat_invoice.order_id  and year(sales_flat_order.updated_at)=2016     \n                   \n                   group by Month(sales_flat_order.updated_at)')\n\nysalesval= fetch(Ysales, n=-1) \n\n#Query to find AverageOrderValue\n#avg order value for a month in a year\nmAvg_Order=dbSendQuery(mydb,'select sum(grand_total)/count(*) as AvgOrderValue from sales_flat_order where status=\"complete\" and \n                       year(sales_flat_order.updated_at)=2016 and month(sales_flat_order.updated_at)=3')\nmAvg_Value=fetch(mAvg_Order,n=-1)\n###avg order value for a year2016\nYmAvg_Order=dbSendQuery(mydb,'select sum(grand_total)/count(*) as AvgOrderValue,month(sales_flat_order.updated_at) as Month from sales_flat_order where status=\"complete\" and year(sales_flat_order.updated_at)=2016 group by month(sales_flat_order.updated_at)')\nYmAvg_Value=fetch(YmAvg_Order,n=-1)\n\nYAvg_Order=dbSendQuery(mydb,'select sum(grand_total)/count(*) as AvgOrderValue from sales_flat_order where status=\"complete\" and year(sales_flat_order.updated_at)=2016')\nYAvg_Value=fetch(YAvg_Order,n=-1)\n\n##AvgOrdervalueBench Marking\nypAvg_order=dbSendQuery(mydb,'select sum(grand_total)/count(*) as AvgOrderValue,month(sales_flat_order.updated_at) as Month from sales_flat_order where status=\"complete\" and year(sales_flat_order.updated_at)>=2015 group by month(sales_flat_order.updated_at);')\nypAvg_value=fetch(ypAvg_order,n=-1)\n\n###avg order value for a year 2015\nYAvg_Order15=dbSendQuery(mydb,'select sum(grand_total)/count(*) as AvgOrderValue from sales_flat_order where status=\"complete\" and year(sales_flat_order.updated_at)=2015')\nYAvg_Value15=fetch(YAvg_Order15,n=-1)\n# Avg_Inc=((YAvg_Value-YAvg_Value15)/YAvg_Value15)*100\n\n#Queryto find revenue\n##revenue generated in a month\nmRevenueCal=dbSendQuery(mydb,'select sum(grand_total) from sales_flat_invoice where year(sales_flat_invoice.updated_at)=2016 and month(sales_flat_invoice.updated_at)=3')\nmRevenueval=fetch(mRevenueCal,n=-1)\n## ##revenue generated in a year\nyRevenueCal=dbSendQuery(mydb,'select sum(grand_total) from sales_flat_invoice where year(sales_flat_invoice.created_at)=2016')\nyRevenueval=fetch(yRevenueCal,n=-1)\n\n#Query to find Repeatedcustomers \n## repeated customers in a month\nmRepeatCust=dbSendQuery(mydb,'SELECT COUNT(*) AS grand_count FROM(\n                        SELECT customer_email FROM sales_flat_order\n                        WHERE sales_flat_order.status NOT LIKE \"canceled\"\n                        AND sales_flat_order.status NOT LIKE \"closed\"\n                        AND sales_flat_order.status NOT LIKE \"fraud\"\n                        AND sales_flat_order.status NOT LIKE \"holded\"\n                        AND sales_flat_order.status NOT LIKE \"paypal_canceled_reversal\"\n                        AND year(sales_flat_order.updated_at)=2016 \n                        AND month(sales_flat_order.updated_at)=3\n                        GROUP BY customer_email HAVING COUNT(*) > 1\n) s')\nmRepeatVal=fetch(mRepeatCust,n=-1)\n## repeated customers in a year\nyRepeatCust=dbSendQuery(mydb,'SELECT COUNT(*) AS grand_count FROM(\n                        SELECT customer_email FROM sales_flat_order\n                        WHERE sales_flat_order.status NOT LIKE \"canceled\"\n                        AND sales_flat_order.status NOT LIKE \"closed\"\n                        AND sales_flat_order.status NOT LIKE \"fraud\"\n                        AND sales_flat_order.status NOT LIKE \"holded\"\n                        AND sales_flat_order.status NOT LIKE \"paypal_canceled_reversal\"\n                        AND year(sales_flat_order.updated_at)=2016 \n                        GROUP BY customer_email HAVING COUNT(*) > 1\n) s')\nyRepeatVal=fetch(yRepeatCust,n=-1)\nyRepeatCust15=dbSendQuery(mydb,'SELECT COUNT(*) AS grand_count FROM(\n                          SELECT customer_email FROM sales_flat_order\n                          WHERE sales_flat_order.status NOT LIKE \"canceled\"\n                          AND sales_flat_order.status NOT LIKE \"closed\"\n                          AND sales_flat_order.status NOT LIKE \"fraud\"\n                          AND sales_flat_order.status NOT LIKE \"holded\"\n                          AND sales_flat_order.status NOT LIKE \"paypal_canceled_reversal\"\n                          AND year(sales_flat_order.updated_at)=2015 \n                          GROUP BY customer_email HAVING COUNT(*) > 1\n) s')\nyRepeatVal15=fetch(yRepeatCust15,n=-1)\nInc<-cbind((yRepeatVal-yRepeatVal15)/yRepeatVal15*100)\n#Calculating E-Commerce Ratio\n##for a month\nmVisits=dbSendQuery(mydb,\"select count(*) from log_visitor where month(log_visitor.first_visit_at)=3 and year(log_visitor.first_visit_at)=2016\")\nmVisitsval=fetch(mVisits,n=-1)\nmTransactions=dbSendQuery(mydb,\"select count(*) from sales_flat_order where status='complete' and month(sales_flat_order.created_at)=3 and year(sales_flat_order.created_at)=2016\")\nmTrValue=fetch(mTransactions,n=-1)\nmERatio=(mTrValue/mVisitsval)*100\n##for a year\nyVisits=dbSendQuery(mydb,\"select count(*) from log_visitor where year(log_visitor.first_visit_at)=2016\")\nyVisitsval=fetch(yVisits,n=-1)\nyTransactions=dbSendQuery(mydb,\"select count(*) from sales_flat_order where status='complete'  and year(sales_flat_order.created_at)=2016\")\nyTrValue=fetch(yTransactions,n=-1)\nyERatio=(yTrValue/yVisitsval)*100\n############## new Customer per month ###################\nmNewCust=dbSendQuery(mydb,'SELECT COUNT(*) AS grand_count FROM(\n                     SELECT customer_email FROM sales_flat_order\n                     WHERE sales_flat_order.status NOT LIKE \"canceled\"\n                     AND sales_flat_order.status NOT LIKE \"closed\"\n                     AND sales_flat_order.status NOT LIKE \"fraud\"\n                     AND sales_flat_order.status NOT LIKE \"holded\"\n                     AND sales_flat_order.status NOT LIKE \"paypal_canceled_reversal\"\n                     AND year(sales_flat_order.updated_at)=2016 \n                     AND month(sales_flat_order.updated_at)=3\n                     GROUP BY customer_email HAVING COUNT(*) = 1) s')\nmNewCustVal=fetch(mNewCust,n=-1)\n\n\n###########increase % per month#####\nmonthdata=dbSendQuery(mydb,'select month(sales_flat_order.created_at) as month,sum(sales_flat_order.grand_total) as sale from sales_flat_order where \n                      year(sales_flat_order.created_at)=2016 and month(sales_flat_order.created_at)>=2 group by month;')\n\n\npercentofmonthsdata=fetch(monthdata,n=-1)\n\nfebdata=percentofmonthsdata$sale[1]\nmarchdata=percentofmonthsdata$sale[2]\n# differencegrowth=marchdata-febdata\n# print(difference)\n# mincreaseper=(difference/febdata)*100\n###########increase % per year#####\nydata=dbSendQuery(mydb,'select month(sales_flat_order.created_at) as month,sum(sales_flat_order.grand_total) as sale from sales_flat_order where \n                  year(sales_flat_order.created_at)>=2015  group by year(sales_flat_order.created_at);')\n\n\nypdata=fetch(ydata,n=-1)\n\ndata15=ypdata$sale[1]\ndata16=ypdata$sale[2]\ndifferencey=data16-data15\n# yincreaseper=(differencey/febdata)*100\n# ##Bounce rate for a month\n# \n# brate=dbSendQuery(mydb,'select count(*) from log_visitor where last_visit_at=first_visit_at and Month(last_visit_at)=3 and year(last_visit_at)=2016')\n# br=fetch(brate,n=-1)\n# brate1=dbSendQuery(mydb,'select count(*) from log_visitor where  Month(last_visit_at)=3 and year(last_visit_at)=2016 ')\n# br1=fetch(brate1,n=-1)\n# bouncerate=br/br1*100\n\n\n##Revenue of a perticular month in all years\n\nRevenueMarch=dbSendQuery(mydb,'select sum(grand_total) as Revenue ,Month(created_at) as Month,Year(created_at) as Year from sales_flat_order where Month(created_at) =3 group by  Year(created_at)')\nRevenueMarchVal=fetch(RevenueMarch,n=-1)\n###########increase IN sales % BETWEEN THE YEARS IN A PARTICULAR MONTH MARCH(2013-2014)#####\nincsales=dbSendQuery(mydb,'select sum(grand_total) as Revenue ,\n                     Month(created_at) as Month,\n                     Year(created_at) as Year \n                     from sales_flat_order\n                     where Month(created_at) =3 \n                     and  Year(created_at)>=2013 \n                     group by  Year(created_at);')\n\n\npincrease=fetch(incsales,n=-1)\n\ndata2013=pincrease$Revenue[1]\ndata2014=pincrease$Revenue[2]\ndata2015=pincrease$Revenue[3]\ndata2016=pincrease$Revenue[4]\nminc1314=(((data2014-data2013)/((data2013)))*100)\nminc1415=(((data2015-data2014)/((data2014)))*100)\nminc1516=(((data2016-data2015)/((data2015)))*100)\nRMinc.annotation<-c(paste(round(0),\"%\"),paste(round(minc1314,1),\"%\"),paste(round(minc1415,1),\"%\"),paste(round(minc1516,1),\"%\"))\nRMVal<-cbind(RevenueMarchVal,RMinc.annotation)\n##Sales of an item by location in a month\nmsaleLoc=dbSendQuery(mydb,'select sum(sales_flat_order.grand_total) as Revenue ,sales_flat_order_address.region as Location from \n                     sales_flat_order,sales_flat_order_address where sales_flat_order.entity_id=sales_flat_order_address.parent_id  and YEAR(sales_flat_order.created_at)=2016 and Month(sales_flat_order.created_at)=3 group by \n                     sales_flat_order_address.region')\nmsalelocval=fetch(msaleLoc,n=-1)\n##Sales of an item among  the year by location \nysaleLocY=dbSendQuery(mydb,'select sum(sales_flat_order.grand_total) as Revenue ,sales_flat_order_address.region as Location from \n                      sales_flat_order,sales_flat_order_address where sales_flat_order.entity_id=sales_flat_order_address.parent_id and YEAR(sales_flat_order.created_at)=2016 group by \n                      sales_flat_order_address.region ')\nysalelocvaly=fetch(ysaleLocY,n=-1)\n\n##Revenue of items among all the years\nyrevenue=dbSendQuery(mydb,'select sum(grand_total) as Revenue ,\n                     Month(created_at) as Month,\n                     Year(created_at) as Year\n                     from sales_flat_order \n                     \n                     group by  Year\n                     ')\nyRevenue=fetch(yrevenue,n=-1)\n#######calculation of increase in percentage of year wise revenue(2012-2013)##############\nypinc=dbSendQuery(mydb,'select sum(grand_total) as Revenue ,\n                  \n                  Year(created_at) as Year\n                  from sales_flat_order \n                  where Year(created_at)>=2012 group by  Year')\nypincval=fetch(ypinc,n=-1)\n\ny2012=ypincval$Revenue[1]\ny2013=ypincval$Revenue[2]\ny2014=ypincval$Revenue[3]\ny2015=ypincval$Revenue[4]\ny2016=ypincval$Revenue[5]\ny1213=(((y2013-y2012)/y2012)*100)\ny1314=(((y2014-y2013)/y2013)*100)\ny1415=(((y2015-y2014)/y2014)*100)\ny1516=(((y2016-y2015)/y2015)*100)\nyminc.annotation<-c(paste(round(0),\"%\"),paste(round(y1213,1),\"%\"),paste(round(y1314,1),\"%\"),paste(round(y1415,1),\"%\"),paste(round(y1516,1),\"%\"))\nysales<-c(round(0),round(y1213,1),round(y1314,1),round(y1415,1),round(y1516,1))\nymval<-cbind(yRevenue,yminc.annotation,ysales)\n\n##### calculating top product in a month  \n\nmTopProduct = dbSendQuery(mydb,'select sum(sales_flat_invoice_item.qty) as Qty, sales_flat_invoice_item.product_id,sales_flat_quote_item.name\n                          from sales_flat_invoice_item,sales_flat_quote_item,sales_flat_order \n                          where year(sales_flat_quote_item.updated_at)=2016 and\n                          month(sales_flat_quote_item.updated_at)=3 and\n                          sales_flat_invoice_item.product_id=sales_flat_quote_item.product_id and\n                          sales_flat_order.entity_id=sales_flat_quote_item.quote_id and \n                          sales_flat_order.`status`=\"complete\" group by sales_flat_invoice_item.product_id order by Qty desc limit 1')\n\nmtopproduct= fetch(mTopProduct, n=-1)  \nmaxQty<-max(mtopproduct$Qty)\n############calculating top product in a year\n##### \n\nyTopProduct = dbSendQuery(mydb,'select sum(sales_flat_quote_item.qty) as TotalQty, \n                          sales_flat_quote_item.product_id, sales_flat_quote_item.name \n                          from sales_flat_quote_item,sales_flat_order_item \n                          where YEAR(sales_flat_quote_item.updated_at) = 2016  AND\n                          sales_flat_quote_item.product_id = sales_flat_order_item.product_id \n                          group by sales_flat_quote_item.product_id')\n\nytopproduct= fetch(yTopProduct, n=-1)  \nymaxQty<-max(ytopproduct$TotalQty)\n\n###Revenue By Product Category\nRbycat=dbSendQuery(mydb,'SELECT sum(`qty`) as qty, sum(`total_price`) as Revenue, category_id FROM (SELECT sum(`qty_ordered`) as qty, sum(`row_total`) as total_price, sales_flat_order_item.product_id, catalog_category_product.category_id  FROM `sales_flat_order_item`\n                   INNER JOIN catalog_category_product ON catalog_category_product.product_id = sales_flat_order_item.product_id\n                   GROUP BY sales_flat_order_item.product_id order by catalog_category_product.category_id desc) as resTable GROUP BY category_id')\nRbycatval=fetch(Rbycat,n=-1)\n\n######Inventory sales by location in a month#####\n\nmInventsales= dbSendQuery(mydb,'select \n                          sales_flat_order_address.region as Location,\n                          (sales_flat_invoice.total_qty) as QuantityOrdered\n                          \n                          from sales_flat_order,sales_flat_order_address,sales_flat_invoice\n                          \n                          where sales_flat_order.entity_id=sales_flat_order_address.parent_id   \n                          \n                          and  sales_flat_order.entity_id=sales_flat_invoice.order_id  \n                          and year(sales_flat_order.created_at)=2016 and month(sales_flat_order.created_at)=3\n                          \n                          group by sales_flat_order_address.region')\n\n\nmIsalesbyRegion = fetch(mInventsales, n=-1)\n######Inventory sales by location in a year#####\n\nyInventsales= dbSendQuery(mydb,'select \n                          sales_flat_order_address.region as Location,\n                          (sales_flat_invoice.total_qty) as QuantityOrdered\n                          \n                          from sales_flat_order,sales_flat_order_address,sales_flat_invoice\n                          \n                          where sales_flat_order.entity_id=sales_flat_order_address.parent_id   \n                          \n                          and  sales_flat_order.entity_id=sales_flat_invoice.order_id  and\n                          year(sales_flat_order.created_at)=2016 \n                          \n                          group by sales_flat_order_address.region')\n\n\nyIsalesbyRegion = fetch(yInventsales, n=-1)\n\n##### units per transaction in month ########\nmtotalUnitSold = dbSendQuery(mydb,'select sum(sales_flat_invoice_item.qty) as TotalQty\n                             from sales_flat_invoice_item,sales_flat_order,sales_flat_invoice\n                             where YEAR(sales_flat_order.updated_at)=2016 and MONTH(sales_flat_order.updated_at)=3 and\n                             sales_flat_order.entity_id = sales_flat_invoice.order_id and \n                             sales_flat_invoice.entity_id=sales_flat_invoice_item.parent_id and\n                             sales_flat_order.status=\"complete\"')\n\nmtotUnitsSold = fetch(mtotalUnitSold, n=-1)\n\nmTransactions=dbSendQuery(mydb,'select count(*) from sales_flat_order where YEAR(updated_at)=2016 and MONTH(updated_at)=3 and status=\"complete\"')\n\nmtotalTransactions=fetch(mTransactions,n=-1)\n\nmunitspertransaction<-mtotUnitsSold/mtotalTransactions\n################units per transactions in year################\nytotalUnitSold = dbSendQuery(mydb,'select sum(sales_flat_invoice_item.qty) as TotalQty\n                             from sales_flat_invoice_item,sales_flat_order,sales_flat_invoice\n                             where YEAR(sales_flat_order.updated_at)=2016  and\n                             sales_flat_order.entity_id = sales_flat_invoice.order_id and \n                             sales_flat_invoice.entity_id=sales_flat_invoice_item.parent_id and\n                             sales_flat_order.status=\"complete\"')\n\nytotUnitsSold = fetch(ytotalUnitSold, n=-1)\n\nyTransactions=dbSendQuery(mydb,'select count(*) from sales_flat_order where YEAR(updated_at)=2016  and status=\"complete\"')\n\nytotalTransactions=fetch(yTransactions,n=-1)\n\nyunitspertransaction<-ytotUnitsSold/ytotalTransactions\n\n###################supply chain#########################\n####in a month\nmsupplychain=dbSendQuery(mydb,'select sum(sales_flat_invoice.total_qty) as UnitsOrdered,day(sales_flat_shipment.created_at) as Day,\n                         sales_flat_order.`status`,sum(sales_flat_shipment.total_qty) as UnitsShipped,sales_flat_shipment.created_at,sum(sales_flat_invoice.grand_total) as sales from\n                         sales_flat_invoice,sales_flat_order,sales_flat_shipment\n                         where\n                         sales_flat_invoice.order_id=sales_flat_order.entity_id\n                         and \n                         sales_flat_invoice.order_id=sales_flat_shipment.order_id\n                         and\n                         sales_flat_order.`status`=\"complete\"\n                         and year(sales_flat_shipment.updated_at)=2016 and month(sales_flat_shipment.created_at)=3\n                         group by day(sales_flat_shipment.created_at)\n                         ')\nmsupplychainval=fetch(msupplychain,n=-1)\n\n#################in a year\nysupplychain=dbSendQuery(mydb,'select sum(sales_flat_invoice.total_qty) as UnitsOrdered,Month(sales_flat_shipment.created_at) as Month,\n                         sales_flat_order.`status`,sum(sales_flat_shipment.total_qty) as UnitsShipped, sum(sales_flat_invoice.grand_total) as sales,sales_flat_shipment.created_at from\n                         sales_flat_invoice,sales_flat_order,sales_flat_shipment\n                         where\n                         sales_flat_invoice.order_id=sales_flat_order.entity_id\n                         and \n                         sales_flat_invoice.order_id=sales_flat_shipment.order_id\n                         and\n                         sales_flat_order.`status`=\"complete\"\n                         and year(sales_flat_shipment.updated_at)=2016 \n                         group by Month(sales_flat_shipment.created_at)\n                         ')\nysupplychainval=fetch(ysupplychain,n=-1)\n#### Visit per Day ########\ndVisits=dbSendQuery(mydb,\"select count(*) from log_visitor where day(log_visitor.first_visit_at)=26 and \n                    month(log_visitor.first_visit_at)=3 and year(log_visitor.first_visit_at)=2016\")\ndVisitsperday=fetch(dVisits,n=-1)\n###############################comparision of visitors in the curren month(25th nd 26th days))#################\nvisitorscompare=dbSendQuery(mydb,'select count(*) as visitors ,day(log_visitor.first_visit_at) as day from log_visitor\n                            where (day(log_visitor.first_visit_at)>=25 and day(log_visitor.first_visit_at)<=26) and\n                            month(log_visitor.first_visit_at)=3 and year(log_visitor.first_visit_at)=2016 \n                            group by day')\n\ndaywisevisitorscomparision=fetch(visitorscompare,n=-1)\n\nvisitorsinday25=daywisevisitorscomparision$visitors[1]\nvisitorsinday26=daywisevisitorscomparision$visitors[2]\nvisitorsinday2526=round(((visitorsinday26-visitorsinday25)/visitorsinday25),2)*100\n############################### comparision ofnumber of visitors in the current year(2016) with previousyear(2015)#################\nvisitors201516=dbSendQuery(mydb,'select count(*) as visitors ,year(log_visitor.first_visit_at) as year from log_visitor\n                           where year(log_visitor.first_visit_at) >=2015\n                           group by year')\nyvisitorsin201516=fetch(visitors201516,n=-1)\n\nvisitorsinyear2015=yvisitorsin201516$visitors[1]\nvisitorsinyear2016=yvisitorsin201516$visitors[2]\n\n###########Inventory Availability####################\navailStock = dbSendQuery(mydb,'select cataloginventory_stock_status.product_id as Productid,catalog_product_entity_varchar.value as Productname,cataloginventory_stock_status.qty as Quantity\n                         \n                         from cataloginventory_stock_status,catalog_product_entity,catalog_product_entity_varchar\n                         where cataloginventory_stock_status.product_id=catalog_product_entity.entity_id \n                         and catalog_product_entity_varchar.entity_id=catalog_product_entity.entity_id\n                         group by cataloginventory_stock_status.product_id;')\navailInventoryStock= fetch(availStock, n=-1)\nwrite.csv(availInventoryStock,\"mydata.csv\")\n\n\n######Top 10 best Product##########\nProducts= dbSendQuery(mydb,'select sales_flat_order_item.product_id as Productid,sales_flat_order_item.name as Name,(sales_flat_invoice.total_qty) as Quantity,sales_flat_invoice.grand_total as Sales,sales_flat_order.`status` ,\n                      year(sales_flat_order.created_at) as year\n                      from sales_flat_order_item,sales_flat_invoice,sales_flat_order\n                      where sales_flat_order.entity_id=sales_flat_order_item.item_id and\n                      sales_flat_order.entity_id=sales_flat_invoice.entity_id and status=\"complete\"\n                      and year(sales_flat_order.created_at)=2016  order by sales_flat_invoice.total_qty desc limit 10;')\nTopBestProducts= fetch(Products, n=-1)\n######top 5 products in location wise of current year######\nlocationsale2016 = dbSendQuery(mydb,' select sales_flat_order_item.product_id as Productid,sales_flat_order_item.name as Name,sales_flat_order_address.region as Location,\n                               (sales_flat_invoice.total_qty) as Quantity, sum(sales_flat_invoice.grand_total) as sales, sales_flat_order.`status` ,\n                               year(sales_flat_order.created_at) as year from \n                               sales_flat_order_item,sales_flat_order_address,sales_flat_invoice,sales_flat_order\n                               where sales_flat_order.entity_id=sales_flat_order_item.item_id \n                               and  sales_flat_order.entity_id=sales_flat_invoice.order_id and sales_flat_order.entity_id=sales_flat_order_address.parent_id  \n                               and sales_flat_order.status=\"complete\" and year(sales_flat_order.created_at)=2016 group by location order by sales_flat_invoice.total_qty desc limit 10;')\nlocationwise = fetch(locationsale2016, n=-1) \n# colnames(locationwise)[1]<-\"productid\"\n##Pie Chart Top 10 Product Analysis ######\nyTopProSales1=dbSendQuery(mydb,'select sales_flat_order_item.product_id as Productid,sales_flat_order_item.name as Name,\n                          (sales_flat_invoice.total_qty) as Qty,sales_flat_order.`status` ,\n                          year(sales_flat_order.created_at) as year\n                          from sales_flat_order_item,sales_flat_invoice,sales_flat_order\n                          where sales_flat_order.entity_id=sales_flat_order_item.item_id and\n                          sales_flat_order.entity_id=sales_flat_invoice.order_id and status=\"complete\"\n                          and year(sales_flat_order.created_at)=2016 and month(sales_flat_order.created_at)=1 \n                          order by sales_flat_invoice.total_qty desc limit 10;')\n\nyTopProSales1=fetch(yTopProSales1,n=-1)\n\nyTopProSales2=dbSendQuery(mydb,'select sales_flat_order_item.product_id as Productid,sales_flat_order_item.name as Name,\n                          (sales_flat_invoice.total_qty) as Qty,sales_flat_order.`status` ,\n                          year(sales_flat_order.created_at) as year\n                          from sales_flat_order_item,sales_flat_invoice,sales_flat_order\n                          where sales_flat_order.entity_id=sales_flat_order_item.item_id and\n                          sales_flat_order.entity_id=sales_flat_invoice.order_id and status=\"complete\"\n                          and year(sales_flat_order.created_at)=2016 and month(sales_flat_order.created_at)=2\n                          order by sales_flat_invoice.total_qty desc limit 10;')\n\nyTopProSales2=fetch(yTopProSales2,n=-1)\n\nyTopProSales3=dbSendQuery(mydb,'select sales_flat_order_item.product_id as Productid,sales_flat_order_item.name as Name,\n                          (sales_flat_invoice.total_qty) as Qty,sales_flat_order.`status` ,\n                          year(sales_flat_order.created_at) as year\n                          from sales_flat_order_item,sales_flat_invoice,sales_flat_order\n                          where sales_flat_order.entity_id=sales_flat_order_item.item_id and\n                          sales_flat_order.entity_id=sales_flat_invoice.order_id and status=\"complete\"\n                          and year(sales_flat_order.created_at)=2016 and month(sales_flat_order.created_at)=3 \n                          order by sales_flat_invoice.total_qty desc limit 10;')\n\nyTopProSales3=fetch(yTopProSales3,n=-1)\n#########maxunits sold for all years######\nmaxunitssold=dbSendQuery(mydb,'select (sales_flat_invoice.total_qty) as maxunitsorder,\n                         year(sales_flat_invoice.created_at) as year,\n                         month(sales_flat_invoice.created_at) as month,\n                         day(sales_flat_invoice.created_at) as day\n                         from sales_flat_invoice\n                         where (sales_flat_invoice.total_qty)>1\n                         group by year,month,day(sales_flat_invoice.created_at),maxunitsorder ')   \nmaxunitssold=fetch(maxunitssold,n=-1)\n#########################number of units sold in all yearss############################\nnunits=dbSendQuery(mydb,'select sum(sales_flat_invoice.total_qty) as qty,\n                   year(sales_flat_invoice.created_at) as year\n                   \n                   from sales_flat_invoice\n                   \n                   group by year(sales_flat_invoice.created_at)   ')\nnumberofunitssold=fetch(nunits,n=-1)\n\n###########################Trend in  current month(today and yeasterday) ##################\ntrend2016=dbSendQuery(mydb,'select year(sales_flat_order.updated_at) as year,count(*) as totalcustomers,sum(sales_flat_invoice.total_qty) as QtyOrdered,\n                      \n                      (sum((sales_flat_invoice.grand_total))/count(*)) as AvgperCustomer,\n                      month(sales_flat_order.updated_at) as month,\n                      day(sales_flat_order.updated_at) as day,\n                      \n                      sum(sales_flat_invoice.grand_total) as Sales\n                      \n                      from sales_flat_order,sales_flat_invoice\n                      \n                      where sales_flat_order.entity_id=sales_flat_invoice.order_id \n                      and year(sales_flat_order.updated_at)=2016 \n                      and month(sales_flat_order.updated_at)=3 and day(sales_flat_order.updated_at)>=25\n                      group by day( sales_flat_order.updated_at)\n                      ')\ntrends2016=fetch(trend2016,n=-1)\n########for qty ordered########\nyesterdayorder=trends2016$QtyOrdered[1]\ntodayorder=trends2016$QtyOrdered[2]\ntrendsinorder2016=round(((todayorder-yesterdayorder)/yesterdayorder)*100,digits = 2)\n########for sales##############\nyesterdaysales=trends2016$Sales[1]\ntodaysales=trends2016$Sales[2]\ntrendsinsales2016=round(((todaysales-yesterdaysales)/yesterdaysales)*100,digits = 2)\n#########avg per customer##########\nyesterdayAvg=trends2016$AvgperCustomer[1]\ntodayAvg=trends2016$AvgperCustomer[2]\ntrendsinAvg2016=round(((todayAvg-yesterdayAvg)/yesterdayAvg)*100,digits = 2)\n\npercentages<-c(0,0,paste(-26.93,downArrow),paste(2.7,upArrow),0,0,paste(-19.62,downArrow))\nrow2016<-rbind(round(trends2016,2),percentages)\n\n#############location wise quantity sold in the all years######################\nyears=dbSendQuery(mydb,'select #sales_flat_order_item.product_id as Productid,\n                  #sales_flat_order_item.name as Name,\n                  sales_flat_order_address.region as Location,\n                  sum(sales_flat_invoice.total_qty) as Quantity,sales_flat_order.`status` ,\n                  \n                  year(sales_flat_order.created_at) as year\n                  from sales_flat_order_item,sales_flat_order_address,sales_flat_invoice,sales_flat_order\n                  where sales_flat_order.entity_id=sales_flat_order_item.item_id and\n                  sales_flat_order.entity_id=sales_flat_invoice.entity_id and sales_flat_order.entity_id=sales_flat_order_address.entity_id  \n                  and status=\"complete\"\n                  group by year(sales_flat_order.created_at),location')\nwholeyears=fetch(years,n=-1)\n###############website traffic growth##################\nwebgrowthin2016=dbSendQuery(mydb,'select count(*) as visitors,\n                            month(log_visitor.first_visit_at) as month,year(log_visitor.first_visit_at) as year\n                            from log_visitor where month(log_visitor.first_visit_at)>=2 and year(log_visitor.first_visit_at)=2016\n                            group by month(log_visitor.first_visit_at),year(log_visitor.first_visit_at);')\nwebtrafficgrowth2016=fetch(webgrowthin2016,n=-1)\ntrafficinfeb=webtrafficgrowth2016$visitors[1]\ntrafficinmarch=webtrafficgrowth2016$visitors[2]\nwebtrafficgrowthin2016=round(((trafficinmarch-trafficinfeb)/trafficinfeb),2)*100\n\n######################sales analysis for all years in feb and march######################\nfbmanalysis=dbSendQuery(mydb,'select sum(grand_total) as Revenue ,Month(created_at) as Month,Year(created_at) as Year \n                        from sales_flat_order \n                        where (Month(created_at) >=2 and Month(created_at)<=3) \n                        and (Year(created_at)>=2013 and year(created_at)<=2016) group by  Year(created_at),month(created_at)')\nfebmarchanalysis=fetch(fbmanalysis,n=-1)\n##############################2013 difference between february and march##################\nfeb2013=febmarchanalysis$Revenue[1]\nmarch2013=febmarchanalysis$Revenue[2]\nfm3=round(((march2013-feb2013)/feb2013)*100,digits = 2)\n##############################2014 difference between february and march##################\nfeb2014=febmarchanalysis$Revenue[3]\nmarch2014=febmarchanalysis$Revenue[4]\nfm4=round(((march2014-feb2014)/feb2014)*100,digits = 2)\n\n##############################2015 difference between february and march##################\nfeb2015=febmarchanalysis$Revenue[5]\nmarch2015=febmarchanalysis$Revenue[6]\nfm5=round(((march2015-feb2015)/feb2015)*100,digits = 2)\n##############################2016 difference between february and march##################\nfeb2016=febmarchanalysis$Revenue[7]\nmarch2016=febmarchanalysis$Revenue[8]\nfm6=round(((march2016-feb2016)/feb2016)*100,digits = 2)\n\n#################brand wise revenue in the current month(2016)################################\nBRevenue=dbSendQuery(mydb,\"select sales_flat_order.`status`,\n                     (case when sales_flat_order_item.name like 'Yupoong%' then 'Yupoong'\n                     \n                     when sales_flat_order_item.name like 'Original Chuck%' then 'Original Chuck'\n                     when sales_flat_order_item.name like 'Valucap%' then 'Valucap'\n                     when sales_flat_order_item.name like '%Next Level Apparel%' then 'Next Level Apparel'\n                     when sales_flat_order_item.name like 'Anvil%' then 'Anvil'\n                     when sales_flat_order_item.name like 'Cirque Mountain Apparel%' then 'Cirque Mountain Apparel'\n                     \n                     when sales_flat_order_item.name like 'Independent Trading%' then 'Independent Trading Company'\n                     \n                     when sales_flat_order_item.name like 'Gildan%' then 'Gildan'\n                     when sales_flat_order_item.name like 'Flexfit%' then 'Flexfit'\n                     when sales_flat_order_item.name like 'B%+C%' then 'Bella + Canvas'\n                     end) as Brand,\n                     sum(sales_flat_order_item.row_total) as Revenue,\n                     sum(sales_flat_order_item.qty_ordered) as Qty from sales_flat_order_item,sales_flat_order\n                     where year(sales_flat_order_item.updated_at)=2016 and month(sales_flat_order_item.updated_at)=3 and\n                     sales_flat_order.entity_id=sales_flat_order_item.order_id and\n                     \n                     sales_flat_order.`status`='complete'\n                     group by Brand \")\nBrandRevenue=fetch(BRevenue,n=-1)\nBrandRevenue[1,2]<-\"others\"\n#################brand wise revenue in the current year(2016)################################\nYBRevenue=dbSendQuery(mydb,\"select sales_flat_order.`status`,\n                      (case when sales_flat_order_item.name like 'Yupoong%' then 'Yupoong'\n                      \n                      when sales_flat_order_item.name like 'Original Chuck%' then 'Original Chuck'\n                      when sales_flat_order_item.name like 'Valucap%' then 'Valucap'\n                      when sales_flat_order_item.name like '%Next Level Apparel%' then 'Next Level Apparel'\n                      when sales_flat_order_item.name like 'Anvil%' then 'Anvil'\n                      when sales_flat_order_item.name like 'Cirque Mountain Apparel%' then 'Cirque Mountain Apparel'\n                      \n                      when sales_flat_order_item.name like 'Independent Trading%' then 'Independent Trading Company'\n                      \n                      when sales_flat_order_item.name like 'Gildan%' then 'Gildan'\n                      when sales_flat_order_item.name like 'Flexfit%' then 'Flexfit'\n                      when sales_flat_order_item.name like 'B%+C%' then 'Bella + Canvas'\n                      end) as Brand,\n                      sum(sales_flat_order_item.row_total) as Revenue,\n                      sum(sales_flat_order_item.qty_ordered) as Qty from sales_flat_order_item,sales_flat_order\n                      where year(sales_flat_order_item.updated_at)=2016  and\n                      sales_flat_order.entity_id=sales_flat_order_item.order_id and\n                      \n                      sales_flat_order.`status`='complete'\n                      group by Brand \")\nYBrandRevenue=fetch(YBRevenue,n=-1)\nYBrandRevenue[1,2]<-\"others\"\n#####Brand 15\n######################## Difference in % Revenue and Quantity Year 2015 and 2016 ####################\n\nysalebrand16=dbSendQuery(mydb,\"select (case when sales_flat_order_item.name like 'Yupoong%' then 'Yupoong'\n                         when sales_flat_order_item.name like 'Original Chuck%' then 'Original Chuck'\n                         when sales_flat_order_item.name like 'Valucap%' then 'Valucap'\n                         when sales_flat_order_item.name like '%Next Level Apparel%' then 'Next Level Apparel'\n                         when sales_flat_order_item.name like 'Anvil%' then 'Anvil'\n                         when sales_flat_order_item.name like 'Cirque Mountain Apparel%' then 'Cirque Mountain Apparel'\n                         when sales_flat_order_item.name like 'Independent Trading%' then 'Independent Trading Company'\n                         when sales_flat_order_item.name like 'Gildan%' then 'Gildan'\n                         when sales_flat_order_item.name like 'Flexfit%' then 'Flexfit'\n                         when sales_flat_order_item.name like 'B%+C%' then 'Bella + Canvas'\n                         end) as Brand,\n                         sum(sales_flat_order_item.row_total) as CurrentYear,\n                         sum(sales_flat_order_item.qty_ordered) as CurrentYearQty from sales_flat_order_item,sales_flat_order\n                         where year(sales_flat_order_item.updated_at)=2016 and \n                         sales_flat_order.entity_id=sales_flat_order_item.order_id and\n                         sales_flat_order.`status`='complete'\n                         group by Brand \")\nysalebrand16=fetch(ysalebrand16,n=-1)\nysalebrand16[1,1]<-\"Others\"\nysalebrand16<-ysalebrand16[-2,]  \n# ysalebrand16<-ysalebrand16[-1,] \n\n\nysalebrand15=dbSendQuery(mydb,\"select(case when sales_flat_order_item.name like 'Yupoong%' then 'Yupoong'\n                         when sales_flat_order_item.name like 'Original Chuck%' then 'Original Chuck'\n                         when sales_flat_order_item.name like 'Valucap%' then 'Valucap'\n                         when sales_flat_order_item.name like '%Next Level Apparel%' then 'Next Level Apparel'\n                         when sales_flat_order_item.name like 'Anvil%' then 'Anvil'\n                         when sales_flat_order_item.name like 'Cirque Mountain Apparel%' then 'Cirque Mountain Apparel'\n                         when sales_flat_order_item.name like 'Independent Trading%' then 'Independent Trading Company'\n                         when sales_flat_order_item.name like 'Gildan%' then 'Gildan'\n                         when sales_flat_order_item.name like 'Flexfit%' then 'Flexfit'\n                         when sales_flat_order_item.name like 'B%+C%' then 'Bella + Canvas'\n                         end) as Brand15,\n                         sum(sales_flat_order_item.row_total) as LastYear,\n                         sum(sales_flat_order_item.qty_ordered) as LastYearQty from sales_flat_order_item,sales_flat_order\n                         where year(sales_flat_order_item.updated_at)=2015 and \n                         sales_flat_order.entity_id=sales_flat_order_item.order_id and\n                         sales_flat_order.`status`='complete'\n                         group by Brand15 \")\n\n\n\n\nysalebrand15=fetch(ysalebrand15,n=-1)\nysalebrand15[1,1]<-\"Others\" \nysalebrand15<-ysalebrand15[-c(6,7),] #####\n\n\nyOtherrev<-round(((ysalebrand16$CurrentYear[1]-ysalebrand15$LastYear[1])/ysalebrand15$LastYear[1])*100,2)    #### Change Others\nyOtherqty<-round(((ysalebrand16$CurrentYearQty[1]-ysalebrand15$LastYearQty[1])/ysalebrand15$LastYearQty[1])*100,2)                ####### Change Others\n\n\nyFlexfitrev<-round(((ysalebrand16$CurrentYear[2]-ysalebrand15$LastYear[2])/ysalebrand15$LastYear[2])*100,2)\n\nyFlexfitqty<-round(((ysalebrand16$CurrentYearQty[2]-ysalebrand15$LastYearQty[2])/ysalebrand15$LastYearQty[2])*100,2)\n\n\nygildanRev=round(((ysalebrand16$CurrentYear[3]-ysalebrand15$LastYear[3])/ysalebrand15$LastYear[3])*100,2)\n\nygildanQty=round(((ysalebrand16$CurrentYearQty[3]-ysalebrand15$LastYearQty[3])/ysalebrand15$LastYearQty[3])*100,2)\n\n\nyindiRev=round(((ysalebrand16$CurrentYear[4]-ysalebrand15$LastYear[4])/ysalebrand15$LastYear[4])*100,2)\n\nyindiQty=round(((ysalebrand16$CurrentYearQty[4]-ysalebrand15$LastYearQty[4])/ysalebrand15$LastYearQty[4])*100,2)\n\n\n\nynextlevelRev=round(((ysalebrand16$CurrentYear[5]-ysalebrand15$LastYear[5])/ysalebrand15$LastYear[5])*100,2)\n\nynextlevelQty=round(((ysalebrand16$CurrentYearQty[5]-ysalebrand15$LastYearQty[5])/ysalebrand15$LastYearQty[5])*100,2)\n\n\n\nyyupRev=round(((ysalebrand16$CurrentYear[6]-ysalebrand15$LastYear[6])/ysalebrand15$LastYear[6])*100,2)\n\nyyupQty=round(((ysalebrand16$CurrentYearQty[6]-ysalebrand15$LastYearQty[6])/ysalebrand15$LastYearQty[6])*100,2)\n\nGrowthinSales<-c(paste(yOtherrev,downArrow),paste(yFlexfitrev,upArrow),paste(ygildanRev,downArrow),paste(yindiRev,downArrow),paste(ynextlevelRev,downArrow),paste(yyupRev,downArrow))\nGrowthinQuantity<-c(paste(yOtherqty,downArrow),paste(yFlexfitqty,upArrow),paste(ygildanQty,downArrow),paste(yindiQty,downArrow),paste(ynextlevelQty,downArrow),paste(yyupQty,upArrow))\n\nbellacanvas<-c(\"Bella Canvas\",0,0,\"Bella Canvas\",1383.69,357,100,100)   ####### Change 04/03/2017\norginalchuck<-c(\"Orginal Chuck\",137.60,176,\"Orginal Chuck\",0,0,0,0)       ####### Change 04/03/2017\nvalucap<-c(\"Valu Cap\",1737.60,1054,\"Valu Cap\",0,0,0,0)                    ####### Change 04/03/2017\n\n\nybrandsale=cbind(ysalebrand15,ysalebrand16,GrowthinSales,GrowthinQuantity)\nybrandsale<-rbind(ybrandsale,bellacanvas,orginalchuck,valucap)    #\n\n##############month analysis of +/- in Sales and Quantity\nmsalebrand16mar=dbSendQuery(mydb,\"select (case when sales_flat_order_item.name like 'Yupoong%' then 'Yupoong'\n                            when sales_flat_order_item.name like 'Original Chuck%' then 'Original Chuck'\n                            when sales_flat_order_item.name like 'Valucap%' then 'Valucap'\n                            when sales_flat_order_item.name like '%Next Level Apparel%' then 'Next Level Apparel'\n                            when sales_flat_order_item.name like 'Anvil%' then 'Anvil'\n                            when sales_flat_order_item.name like 'Cirque Mountain Apparel%' then 'Cirque Mountain Apparel'\n                            when sales_flat_order_item.name like 'Independent Trading%' then 'Independent Trading Company'\n                            when sales_flat_order_item.name like 'Gildan%' then 'Gildan'\n                            when sales_flat_order_item.name like 'Flexfit%' then 'Flexfit'\n                            when sales_flat_order_item.name like 'B%+C%' then 'Bella + Canvas'\n                            end) as Brand,\n                            sum(sales_flat_order_item.row_total) as CurrentMonthSales,\n                            sum(sales_flat_order_item.qty_ordered) as CurrentmonthQty from sales_flat_order_item,sales_flat_order\n                            where year(sales_flat_order_item.updated_at)=2016 and month(sales_flat_order_item.updated_at)=3 and\n                            sales_flat_order.entity_id=sales_flat_order_item.order_id and\n                            sales_flat_order.`status`='complete'\n                            group by Brand \")\nmsalebrand16mar=fetch(msalebrand16mar,n=-1)\nmsalebrand16mar[1,1]<-\"Other\"                           ##Chage04/03/2017  add others\nmsalebrand16mar<-msalebrand16mar[-2,]   \n\n\nmsalebrand16feb=dbSendQuery(mydb,\"select(case when sales_flat_order_item.name like 'Yupoong%' then 'Yupoong'\n                            when sales_flat_order_item.name like 'Original Chuck%' then 'Original Chuck'\n                                  when sales_flat_order_item.name like 'Valucap%' then 'Valucap'\n                            when sales_flat_order_item.name like '%Next Level Apparel%' then 'Next Level Apparel'\n                            when sales_flat_order_item.name like 'Anvil%' then 'Anvil'\n                            when sales_flat_order_item.name like 'Cirque Mountain Apparel%' then 'Cirque Mountain Apparel'\n                            when sales_flat_order_item.name like 'Independent Trading%' then 'Independent Trading Company'\n                            when sales_flat_order_item.name like 'Gildan%' then 'Gildan'\n                            when sales_flat_order_item.name like 'Flexfit%' then 'Flexfit'\n                            when sales_flat_order_item.name like 'B%+C%' then 'Bella + Canvas'\n                            end) as Brand,\n                            sum(sales_flat_order_item.row_total) as Revenue,\n                            sum(sales_flat_order_item.qty_ordered) as Qty from sales_flat_order_item,sales_flat_order\n                            where year(sales_flat_order_item.updated_at)=2016 and month(sales_flat_order_item.updated_at)=2 and\n                            sales_flat_order.entity_id=sales_flat_order_item.order_id and\n                            sales_flat_order.`status`='complete'\n                            group by Brand \")\n\nmsalebrand16feb=fetch(msalebrand16feb,n=-1)\nmsalebrand16feb[1,1]<-\"Others\"\n\notherRevper16mar=round(((msalebrand16mar$CurrentMonthSales[1]-msalebrand16feb$Revenue[1])/msalebrand16feb$Revenue[1])*100,2)  ##Chage04/03/2017\n\notherQtyper16mar=round(((msalebrand16mar$CurrentmonthQty[1]-msalebrand16feb$Qty[1])/msalebrand16feb$Qty[1])*100,2)          ### Chage04/03/2017\n\n\nflexfitRevInper16mar=round(((msalebrand16mar$CurrentMonthSales[2]-msalebrand16feb$Revenue[2])/msalebrand16feb$Revenue[2])*100,2)    ### Revenue difference in percentage\n\nflexfitQtyDeper16mar=round(((msalebrand16mar$CurrentmonthQty[2]-msalebrand16feb$Qty[2])/msalebrand16feb$Qty[2])*100,2)               ###### Qty difference in percentage\n\n\ngildanRevDeper16mar=round(((msalebrand16mar$CurrentMonthSales[3]-msalebrand16feb$Revenue[3])/msalebrand16feb$Revenue[3])*100,2)\n\ngildanQtyDeper16mar=round(((msalebrand16mar$CurrentmonthQty[3]-msalebrand16feb$Qty[3])/msalebrand16feb$Qty[3])*100,2)\n\n\nindiRevDeper16mar=round(((msalebrand16mar$CurrentMonthSales[4]-msalebrand16feb$Revenue[4])/msalebrand16feb$Revenue[4])*100,2)\n\nindiQtyDeper16mar=round(((msalebrand16mar$CurrentmonthQty[4]-msalebrand16feb$Qty[4])/msalebrand16feb$Qty[4])*100,2)\n\n\n\nnextRevInper16mar=round(((msalebrand16mar$CurrentMonthSales[5]-msalebrand16feb$Revenue[5])/msalebrand16feb$Revenue[5])*100,2)\n\nnextQtyInper16mar=round(((msalebrand16mar$CurrentmonthQty[5]-msalebrand16feb$Qty[5])/msalebrand16feb$Qty[5])*100,2)\n\n\n\nyupRevDeper16mar=round(((msalebrand16mar$CurrentMonthSales[6]-msalebrand16feb$Revenue[6])/msalebrand16feb$Revenue[6])*100,2)\n\nyupQtyDeper16mar=round(((msalebrand16mar$CurrentmonthQty[6]-msalebrand16feb$Qty[6])/msalebrand16feb$Qty[6])*100,2)\n\n\n\nSalesGrowth<-c(paste(-38.04,downArrow),paste(1.45,upArrow),paste(-23.27,downArrow),paste(-14.47,downArrow),paste(3.9,upArrow),paste(-25.63,downArrow)) \nQuantityGrowth<-c(paste(-31.05,downArrow),paste(-1.44,downArrow),paste(-30.22,downArrow),paste(-13.28,downArrow),paste(3.39,upArrow),paste(-27.16,downArrow)) \n\nLastMonthSales<-msalebrand16feb$Revenue\nLastmonthQty<-msalebrand16feb$Qty\nmsalebrand16mar<-cbind(msalebrand16mar,SalesGrowth,QuantityGrowth,LastmonthQty,LastMonthSales)\nbellacanvas<-c(\"Bella Canvas\",1383.69,357,100,100,0,0)             ##### Chage04/03/2017\nmsalebrand16mar<-rbind(msalebrand16mar,bellacanvas)                ####Chage04/03/2017\n\n##########calculation of kpi to find the growth/Fall in percentages in the year(2016-2015)###################################\ny20156=dbSendQuery(mydb,'select sum(grand_total) as Revenue ,\n                   \n                   Year(created_at) as Year\n                   from sales_flat_order \n                   where Year(created_at)>=2015 group by  Year')\nyper201516=fetch(y20156,n=-1)\nydata2015=yper201516$Revenue[1]\nydata2016=yper201516$Revenue[2]\ndifference=ydata2016-ydata2015\nmincreaseorfallperyear2016=(difference/ydata2015)*100\n\n##########calculation of kpi to find the growth/Fall in percentages in the year(2015-2014)###################################\ny201415=dbSendQuery(mydb,'select sum(grand_total) as Revenue ,\n                    \n                    Year(created_at) as Year\n                    from sales_flat_order \n                    where (Year(created_at)>=2014 and Year(created_at)<=2015) group by  Year')\nyper201415=fetch(y201415,n=-1)\nydata2014=yper201415$Revenue[1]\nydata2015=yper201415$Revenue[2]\ndifference=ydata2015-ydata2014\nmincreaseorfallperyear2016=(difference/ydata2014)*100\n\n\n############################finding the number of visitors in all years ##################\nywebtraffic=dbSendQuery(mydb,'select count(*) as visitors,\n                        year(log_visitor.first_visit_at) as year\n                        from log_visitor \n                        group by year(log_visitor.first_visit_at)\n                        ')\nyearwebtraffic=fetch(ywebtraffic,n=-1)\n#print(yearwebtraffic)\n\n#################calculating the growth/fall in percentages b/w (2012-2013)################\ntrafficin2012=yearwebtraffic$visitors[1]\ntrafficin2013=yearwebtraffic$visitors[2]\nwebtrafficgrowthin201213=round(((trafficin2013-trafficin2012)/trafficin2012),2)*100\n\n#################calculating the growth/fall in percentages b/w (2013-2014)################\ntrafficin2013=yearwebtraffic$visitors[2]\ntrafficin2014=yearwebtraffic$visitors[3]\nwebtrafficgrowthin201314=round(((trafficin2014-trafficin2013)/trafficin2013),2)*100\n\n#################calculating the growth/fall in percentages b/w (2014-2015)################\ntrafficin2014=yearwebtraffic$visitors[3]\ntrafficin2015=yearwebtraffic$visitors[4]\nwebtrafficgrowthin201415=round(((trafficin2015-trafficin2014)/trafficin2014),2)*100\n\n#################calculating the growth/fall in percentages b/w (2015-2016)################\ntrafficin2015=yearwebtraffic$visitors[4]\ntrafficin2016=yearwebtraffic$visitors[5]\nwebtrafficgrowthin201516=round(((trafficin2016-trafficin2015)/trafficin2015),2)*100\n########################top customer for current month#############\nmtopcustomer=dbSendQuery(mydb,\"select sales_flat_order_address.firstname as Name,sales_flat_order_address.lastname ,sum(sales_flat_order.grand_total) as Revenue \n                         from sales_flat_order_address,sales_flat_order\n                         where sales_flat_order_address.parent_id=sales_flat_order.entity_id and sales_flat_order.`status`='complete' \n                         and year(sales_flat_order.updated_at)=2016 and month(sales_flat_order.updated_at)=3\n                         group by Name order by Revenue desc limit 1\n                         ;\")\nmtopcust=fetch(mtopcustomer,n=-1)\ntopcustomercurrentmonth<-mtopcust$Name\ntopcustomerlname<-mtopcust$lastname\n########################top customer for current year#############\nytopcustomer=dbSendQuery(mydb,\"select sales_flat_order_address.firstname as Name,sales_flat_order_address.lastname ,sum(sales_flat_order.grand_total) as Revenue \n                         from sales_flat_order_address,sales_flat_order\n                         where sales_flat_order_address.parent_id=sales_flat_order.entity_id and sales_flat_order.`status`='complete' \n                         and year(sales_flat_order.updated_at)=2016 \n                         group by Name order by Revenue desc limit 1\n                         ;\")\nytopcust=fetch(ytopcustomer,n=-1)\ntopcustomercurrentyear<-ytopcust$Name\n\n###############top customer for current month by items order########################\nmtopcustomerbyitem=dbSendQuery(mydb,\"select sales_flat_order_address.firstname as Name,sales_flat_order_address.lastname ,sales_flat_order.total_qty_ordered as Itemcount \n                               from sales_flat_order_address,sales_flat_order\n                               where sales_flat_order_address.parent_id=sales_flat_order.entity_id and sales_flat_order.`status`='complete' \n                               and year(sales_flat_order.updated_at)=2016 and month(sales_flat_order.updated_at)=3\n                               group by Name order by Itemcount desc limit 1\n                               ;\")\nmtopcustbyitem=fetch(mtopcustomerbyitem,n=-1)\ntopcustomercurrentmonthbyitem<-mtopcustbyitem$Name\n#################top customer for current year by items order########################\nytopcustomerbyitem=dbSendQuery(mydb,\"select sales_flat_order_address.firstname as Name,sales_flat_order_address.lastname ,sales_flat_order.total_qty_ordered as Itemcount \n                               from sales_flat_order_address,sales_flat_order\n                               where sales_flat_order_address.parent_id=sales_flat_order.entity_id and sales_flat_order.`status`='complete' \n                               and year(sales_flat_order.updated_at)=2016 \n                               group by Name order by Itemcount desc limit 1\n                               ;\")\nytopcustbyitem=fetch(ytopcustomerbyitem,n=-1)\ntopcustomerforcurrentyearbyitem<-ytopcustbyitem$Name\n################ New Customer Revenue % ####################################\nmnewCustmerval=dbSendQuery(mydb,\"SELECT COUNT(*) AS grand_count,sum(Grand_Total) as Revenue FROM( SELECT customer_email,\n                           SUM(sales_flat_order.grand_total) as Grand_Total \n                           FROM sales_flat_order WHERE sales_flat_order.status='complete' \n                           AND year(sales_flat_order.updated_at)=2016 and \n                           month(sales_flat_order.updated_at)=3 GROUP BY \n                           customer_email HAVING COUNT(*) = 1)s\")\n\nmnewCustmerRev=fetch(mnewCustmerval,n=-1)\nmtotalrev<-dbSendQuery(mydb,\"select sum(grand_total) as Total from sales_flat_order \n                       where `status`='complete' and \n                       year(updated_at)=2016 and month(updated_at)=3;\")\nmtotalrev<-fetch(mtotalrev,n=-1)\n\nmNewCustmerper=round(((mnewCustmerRev$`sum(Grand_Total)`/mtotalrev$Total)*100),2)\n\nmRepeatCustmerval=dbSendQuery(mydb,\"SELECT COUNT(*) AS grand_count,sum(Grand_Total) as Revenue FROM( SELECT customer_email,\n                              SUM(sales_flat_order.grand_total) as Grand_Total \n                              FROM sales_flat_order WHERE sales_flat_order.status='complete' \n                              AND year(sales_flat_order.updated_at)=2016 and \n                              month(sales_flat_order.updated_at)=3 GROUP BY \n                              customer_email HAVING COUNT(*) > 1)s\")\nmRepeatCustmerRev<-fetch(mRepeatCustmerval,n=-1)\n\nmRepeatCustmerper<-round(((mRepeatCustmerRev$`sum(Grand_Total)`/mtotalrev$Total)*100),2)\n\n# print(mRepeatCustmerper)\n####################Order picking per cuurent year##############\nordercurrentyear=dbSendQuery(mydb,'select count(*) as ordercount from sales_flat_order where year(updated_at)>=2015  and status NOT LIKE \"canceled\"\n                             AND sales_flat_order.status NOT LIKE \"closed\"\n                             AND sales_flat_order.status NOT LIKE \"fraud\"\n                             AND sales_flat_order.status NOT LIKE \"holded\"\n                             AND sales_flat_order.status NOT LIKE \"paypal_canceled_reversal\" group by year(updated_at)')\norderperyear=fetch(ordercurrentyear,n=-1)\n# print(orderperyear)\norder15=orderperyear$ordercount[1]\norder16=orderperyear$ordercount[2]\n# orderrate=((order16-order15)/order15)*100\n################################quarter wise year calculations######################################################\n\n#####################-----------------------growth/fall in sales in the years(2016 & 2015) up to 3 months----------------#################---\nquartersales=dbSendQuery(mydb,'select year(sales_flat_order.created_at) as year,\n                         sum(sales_flat_order.grand_total) as sales \n                         from sales_flat_order\n                         where (month(sales_flat_order.created_at)>=1 and month(sales_flat_order.created_at)<=3)\n                         and year(sales_flat_order.created_at)>=2015  group by year ;')\n\nyquartersalesin201516=fetch(quartersales,n=-1)\n\nquartersalesin2015=yquartersalesin201516$sales[1]\nquartersalesin2016=yquartersalesin201516$sales[2]\nsalesq1<-cbind(quartersalesin2015,quartersalesin2016)\n# quartersalesinyear201516=round(((quartersalesin2016-quartersalesin2015)/quartersalesin2015),2)*100  \n\n\n#######################-------------------comparision ofnumber of visitors in the current year(2016) with previousyear(2015)---------------\nquartervisitors201516=dbSendQuery(mydb,'\n                                  select count(*) as visitors ,year(log_visitor.first_visit_at) as year \n                                  from log_visitor\n                                  where year(log_visitor.first_visit_at) >=2015\n                                  and (month(log_visitor.first_visit_at)>=1 and month(log_visitor.first_visit_at)<=3)\n                                  \n                                  group by year')\nyvisitorsinquarter201516=fetch(quartervisitors201516,n=-1)\n\nquartervisitorsinyear2015=yvisitorsinquarter201516$visitors[1]\nquartervisitorsinyear2016=yvisitorsinquarter201516$visitors[2]\nvisitorsq1<-cbind(quartervisitorsinyear2016,quartervisitorsinyear2015)\n\n################--------------------Order picking per (2015-2016) only for quarter-------------------##############\n\norderquarteryear=dbSendQuery(mydb,'select count(*) as ordercount ,year(sales_flat_order.updated_at) as year\n                             from sales_flat_order where year(updated_at)>=2015  and status NOT LIKE \"canceled\"\n                             AND sales_flat_order.status NOT LIKE \"closed\"\n                             AND sales_flat_order.status NOT LIKE \"fraud\"\n                             AND sales_flat_order.status NOT LIKE \"holded\"\n                             AND sales_flat_order.status NOT LIKE \"paypal_canceled_reversal\" \n                             and (month(sales_flat_order.updated_at)>=1 and month(sales_flat_order.updated_at)<=3)\n                             group by year(updated_at)')\norderquarterperyear201516=fetch(orderquarteryear,n=-1)\nquarterorder2015=orderquarterperyear201516$ordercount[1]\nquarterorder2016=orderquarterperyear201516$ordercount[2]\nq1order<-cbind(quarterorder2016,quarterorder2015)\n# orderratein201516=((quarterorder2016-quarterorder2015)/quarterorder2015)*100\n\n\n##############-----------------avg order value for the years 2015-2016(quarterwise)-------------------##########################\nYAvg_Order201516=dbSendQuery(mydb,'select sum(grand_total)/count(*) as AvgOrderValue ,year(sales_flat_order.updated_at) as year\n                             from sales_flat_order where status=\"complete\" and year(sales_flat_order.updated_at)>=2015\n                             and (month(sales_flat_order.updated_at)>=1 and month(sales_flat_order.updated_at)<=3)\n                             \n                             group by year')\nYAvg_Value201516=fetch(YAvg_Order201516,n=-1)\n\nyavgvalue2015=YAvg_Value201516$AvgOrderValue[1]\nyavgvalue2016=YAvg_Value201516$AvgOrderValue[2]\nq1avgorder<-cbind(yavgvalue2016,yavgvalue2015)\n# Avg_Inc201516=((yavgvalue2016-yavgvalue2015)/yavgvalue2015)*100\n\n\n\n\n#########(for inventory)\n\n###########-----------------Average inventory sold in a year per month(quarter wise)-----------------------\nyavgInvent2016=dbSendQuery(mydb,'select sum(sales_flat_order.total_qty_ordered) as AvgInventory,\n                           year(sales_flat_order.created_at ) as year\n                           from  sales_flat_order\n                           where sales_flat_order.status= \"complete\" and year(sales_flat_order.created_at)=2016 \n                           and (month(sales_flat_order.created_at)>=1 and month(sales_flat_order.created_at)<=3)\n                           group by year ;')\n\nyInvent2016=fetch(yavgInvent2016,n=-1)\n\nyavgInvent2015=dbSendQuery(mydb,'select sum(sales_flat_order.total_qty_ordered) as AvgInventory,\n                           year(sales_flat_order.created_at ) as year\n                           from  sales_flat_order\n                           where sales_flat_order.status= \"complete\" and year(sales_flat_order.created_at)=2015 \n                           and (month(sales_flat_order.created_at)>=1 and month(sales_flat_order.created_at)<=3)\n                           group by year ;')\n\nyInvent2015=fetch(yavgInvent2015,n=-1)\n\nyavginvent2016=(yInvent2016$AvgInventory)/3\nyavginvent2015=(yInvent2015$AvgInventory)/3\n\nquartercomparisionof201516=((yavginvent2016-yavginvent2015)/yavginvent2015)*100\n\n################################Prediction######################################\n###############Revenue in quarter2(2013-2015) analysis########################\n###############Revenue in quarter 1###############\n\nRevenueinq1<-c(177305.1500,156696.6500,167589.9700)\nMonth<-c(\"Jan\",\"Feb\",\"March\")\nq1dataforRevenue<-data.frame(Revenueinq1,Month)\n\n\ntrendsq2=dbSendQuery(mydb,\"select sum(grand_total) as Revenue ,Month(created_at) as Month,Year(created_at) as Year \n                     from sales_flat_order \n                     where (Month(created_at) >=4 and Month(created_at)<=6) \n                     and (Year(created_at)>=2013 and year(created_at)<=2015) \n                     group by  Year(created_at),month(created_at)\")\ntrendsinq2201315=fetch(trendsq2,n=-1)\n\nindexq2 <- sample(1:nrow(trendsinq2201315),size = 0.7*nrow(trendsinq2201315)) \ntraindatainq2 <- trendsinq2201315[indexq2,] \ntestdatainq2 <- trendsinq2201315 [-indexq2,]\n\nlminq2<-lm(Revenue~Month+Year,traindatainq2)\n\npredictioninq2<-predict(lminq2,testdatainq2)\n\np2<-predict(lminq2)\n\np2<-predict(lminq2,interval=\"confidence\")\nclowerlimit<-c(130613.20,149583.37,146447.67)\ncupperlimit<-c(209495.79,213089.89,238789.86)\n\np2<-predict(lminq2,interval=\"prediction\")\nplowerlimit<-c(101319.770,116706.017,119813.433)\npupperlimit<-c(238789.2,245967.2,265424.1)\n\nPredictedRevenueinq2<-c(170054.50,181336.63,192618.77)\nMonth<-c(\"April\",\"May\",\"June\")\n\nq2dataforRevenue<-data.frame(PredictedRevenueinq2,Month,plowerlimit,pupperlimit)\n\n\n###############Revenue in quarter3(2013-2015) analysis########################\ntrendsq3=dbSendQuery(mydb,\"select sum(grand_total) as Revenue ,Month(created_at) as Month,Year(created_at) as Year \n                     from sales_flat_order \n                     where (Month(created_at) >=7 and Month(created_at)<=9) \n                     and (Year(created_at)>=2013 and year(created_at)<=2015) \n                     group by  Year(created_at),month(created_at)\")\ntrendsinq3201315=fetch(trendsq3,n=-1)\n\nindexq3 <- sample(1:nrow(trendsinq3201315),size = 0.7*nrow(trendsinq3201315)) \ntraindatainq3 <- trendsinq3201315[indexq3,] \ntestdatainq3<- trendsinq3201315 [-indexq3,]\n\nlminq3<-lm(Revenue~Month+Year,traindatainq3)\n\npredictioninq3<-predict(lminq3,testdatainq3)\n\np3<-predict(lminq3)\n\np3<-predict(lminq3,interval=\"confidence\")\nclowerlimit<-c(173923.21,191267.30,185963.48)\ncupperlimit<-c(254740.0,256331.0,280570.0)\n\np3<-predict(lminq3,interval=\"prediction\")\nplowerlimit<-c(143911.48,157583.78,158676.15)\npupperlimit<-c(284751.8,290014.6,307857.3)\n\n\n\n\nPredictedRevenueinq3<-c(214331.63,223799.17,233266.72)\nMonth<-c(\"July\",\"August\",\"September\")\n\nq3dataforRevenue<-data.frame(PredictedRevenueinq3,Month,plowerlimit,pupperlimit)\n\n\n###############Revenue in quarter4(2013-2015) analysis########################\ntrendsq4=dbSendQuery(mydb,\"select sum(grand_total) as Revenue ,Month(created_at) as Month,Year(created_at) as Year \n                     from sales_flat_order \n                     where (Month(created_at) >=10 and Month(created_at)<=12) \n                     and (Year(created_at)>=2013 and year(created_at)<=2015) \n                     group by  Year(created_at),month(created_at)\")\ntrendsinq4201315=fetch(trendsq4,n=-1)\n\nindexq4 <- sample(1:nrow(trendsinq4201315),size = 0.7*nrow(trendsinq4201315)) \ntraindatainq4 <- trendsinq4201315[indexq4,] \ntestdatainq4<- trendsinq4201315 [-indexq4,]\n\nlminq4<-lm(Revenue~Month+Year,traindatainq4)\n\npredictioninq4<-predict(lminq3,testdatainq4)\n\np4<-predict(lminq4)\n\np4<-predict(lminq4,interval=\"confidence\")\nclowerlimit<-c(173732.273,169118.619,141787.799)\ncupperlimit<- c(281460.1,248517.0,238291.1)\n\np4<-predict(lminq4,interval=\"prediction\")\nplowerlimit<-c(138624.5448,127634.9472,104348.9918)\npupperlimit<- c(316567.9,290000.7,275729.9)\n\n\nPredictedRevenueinq4<-c(227596.21,208817.83,190039.46)\nMonth<-c(\"October\",\"November\",\"December\")\n\nq4dataforRevenue<-data.frame(PredictedRevenueinq4,Month,plowerlimit,pupperlimit)\n\n\n\n###############Total revenues in all quarters(sum)##########\n\nTotalRevenueinQ1<-sum(Revenueinq1)\nTotalRevenueinQ2<-sum(PredictedRevenueinq2)\nTotalRevenueinQ3<-sum(PredictedRevenueinq3)\nTotalRevenueinQ4<-sum(PredictedRevenueinq4)\n\n\n\n\n\n\n\n\n\n----------------------------------------------------------------------------------------------\n  ##########number of visitors in q1##############\n\nvisitorsq1<-c(55371,59321,49380)\nMonth<-c(\"Jan\",\"Feb\",\"March\")\nq1dataforVisitors<-data.frame(visitorsq1,Month)\n\n\n###########number of visitors in q2(2013-15)#####################\nvisitorsq2=dbSendQuery(mydb,'select count(*) as visitors,\n                       year(log_visitor.first_visit_at) as year,\n                       month(log_visitor.first_visit_at) as month\n                       from log_visitor \n                       where (year(log_visitor.first_visit_at)>=2013 and year(log_visitor.first_visit_at)<=2015)\n                       and (month(log_visitor.first_visit_at)>=4 and month(log_visitor.first_visit_at)<=6)\n                       group by year(log_visitor.first_visit_at),month(log_visitor.first_visit_at)\n                       ')\n\nvisitorsinq2201315=fetch(visitorsq2,n=-1)\n\nvisitorsq2 <- sample(1:nrow(visitorsinq2201315),size = 0.7*nrow(visitorsinq2201315)) \nvisitorstraindataq2 <- visitorsinq2201315[visitorsq2,] \nvisitorstestdataq2<- visitorsinq2201315 [-visitorsq2,]\n\nvislminq2<-lm(visitors~month+year,visitorstraindataq2)\n\nvispredictioninq2<-predict(vislminq2,visitorstestdataq2)\n\np2<-predict(vislminq2)\n\np2<-predict(vislminq2,interval=\"confidence\")\nclowerlimit<-c(35301.33,39577.45,41736.79)\ncupperlimit<-c(42623.28,44409.29,48312.09)\n\n\np2<-predict(vislminq2,interval=\"prediction\")\nplowerlimit<-c(33306.01,37050.95,39602.31)\npupperlimit<-c(44618.59,46935.80,50446.58)\n\n\nPreictedVisitorsinq2<-c(38962.30,41993.37,45024.44)\nMonth<-c(\"April\",\"May\",\"June\")\nq2dataforVisitors<-data.frame(PreictedVisitorsinq2,Month,plowerlimit,pupperlimit)\n\n\n###########number of visitors in q3(2013-15)#####################\nvisitorsq3=dbSendQuery(mydb,'select count(*) as visitors,\n                       year(log_visitor.first_visit_at) as year,\n                       month(log_visitor.first_visit_at) as month\n                       from log_visitor \n                       where (year(log_visitor.first_visit_at)>=2013 and year(log_visitor.first_visit_at)<=2015)\n                       and (month(log_visitor.first_visit_at)>=7 and month(log_visitor.first_visit_at)<=9)\n                       group by year(log_visitor.first_visit_at),month(log_visitor.first_visit_at)\n                       ')\n\nvisitorsinq3201315=fetch(visitorsq3,n=-1)\n\nvisitorsq3 <- sample(1:nrow(visitorsinq3201315),size = 0.7*nrow(visitorsinq3201315)) \nvisitorstraindataq3 <- visitorsinq3201315[visitorsq3,] \nvisitorstestdataq3<- visitorsinq3201315 [-visitorsq3,]\n\nvislminq3<-lm(visitors~month+year,visitorstraindataq3)\n\nvispredictioninq3<-predict(vislminq3,visitorstestdataq3)\n\np3<-predict(vislminq3)\n\n\np3<-predict(vislminq3,interval=\"confidence\")\nclowerlimit<-c(34383.21,39196.27,38697.67)\ncupperlimit<-c(56947.29,57760.93,63886.23)\n\n\n\np3<-predict(vislminq3,interval=\"prediction\")\nplowerlimit<-c(25629.402,29496.699,30488.904)\npupperlimit<-c(65701.10,67460.50,72095.00)\n\n\n\n\nPreictedVisitorsinq3<-c(45665.25,48478.60,51291.95)\nMonth<-c(\"July\",\"August\",\"September\")\nq3dataforVisitors<-data.frame(PreictedVisitorsinq3,Month,plowerlimit,pupperlimit)\n\n\n###########number of visitors in q4(2013-15)#####################\nvisitorsq4=dbSendQuery(mydb,'select count(*) as visitors,\n                       year(log_visitor.first_visit_at) as year,\n                       month(log_visitor.first_visit_at) as month\n                       from log_visitor \n                       where (year(log_visitor.first_visit_at)>=2013 and year(log_visitor.first_visit_at)<=2015)\n                       and (month(log_visitor.first_visit_at)>=10 and month(log_visitor.first_visit_at)<=12)\n                       group by year(log_visitor.first_visit_at),month(log_visitor.first_visit_at)\n                       ')\n\nvisitorsinq4201315=fetch(visitorsq4,n=-1)\n\nvisitorsq4 <- sample(1:nrow(visitorsinq4201315),size = 0.7*nrow(visitorsinq4201315)) \nvisitorstraindataq4 <- visitorsinq4201315[visitorsq4,] \nvisitorstestdataq4<- visitorsinq4201315 [-visitorsq4,]\n\nvislminq4<-lm(visitors~month+year,visitorstraindataq4)\n\n\nvispredictioninq4<-predict(vislminq4,visitorstestdataq4)\n\np4<-predict(vislminq4)\n\np4<-predict(vislminq4,interval = \"confidence\")\nclowerlimit<-c(32766.809,39195.568,25720.402)\ncupperlimit<-c(101614.40,84628.92,87547.37)\n\n\n\np4<-predict(vislminq4,interval=\"prediction\")\nplowerlimit<-c(14005.040,15439.092,5650.064)\npupperlimit<-c(120376.17,108385.40,107617.70)\n\n\nPreictedVisitorsinq4<-c(67190.60,61912.24,56633.88)\nMonth<-c(\"October\",\"November\",\"December\")\nq4dataforVisitors<-data.frame(PreictedVisitorsinq4,Month,plowerlimit,pupperlimit)\n\n\n###############Total number of visitors in all quarters(sum)##########\n\ntotalNumberofVisitorsinQ1<-(sum(visitorsq1)/1000)\ntotalNumberofVisitorsinQ2<-(sum(PreictedVisitorsinq2)/1000)\ntotalNumberofVisitorsinQ3<-(sum(PreictedVisitorsinq3)/1000)\ntotalNumberofVisitorsinQ4<-(sum(PreictedVisitorsinq4)/1000)\n##BenchMarking of Ecomerce Ration\nypVisits=dbSendQuery(mydb,\"select count(*)  as Visitor,month(log_visitor.first_visit_at) as Month from log_visitor where year(log_visitor.first_visit_at)>=2015 group by month(log_visitor.first_visit_at);\")\nypVisitsval=fetch(ypVisits,n=-1)\nypTransactions=dbSendQuery(mydb,\"select count(*) as Count ,month(sales_flat_order.created_at) as Month from sales_flat_order where status='complete' and year(sales_flat_order.created_at)>=2015 group by month(sales_flat_order.created_at);\")\nypTrValue=fetch(ypTransactions,n=-1)\nypERatio=(ypTrValue/ypVisitsval)*100\n\n\n",
    "created" : 1487581397888.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1193455314",
    "id" : "84EC899A",
    "lastKnownWriteTime" : 1490611925,
    "last_content_update" : 1490611925875,
    "path" : "F:/ShineyWorkSpace/SLC_POC/SLC_POC/Slc_Connect.R",
    "project_path" : "Slc_Connect.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}