{
    "collab_server" : "",
    "contents" : "library(RMySQL)\nmydb = dbConnect(MySQL(),user='readonly',password='readonly123',dbname='slcawdb',host='183.82.106.91')\n\n#####\nrs = dbSendQuery(mydb, 'select sales_flat_order.updated_at, sales_flat_order.store_id, sales_flat_order.status,\n                 sales_flat_invoice.created_at, sales_flat_invoice.grand_total,\n                 sales_flat_invoice_item.qty, sales_flat_invoice_item.name, sales_flat_invoice_item.price\n                 from sales_flat_order,sales_flat_invoice,sales_flat_invoice_item\n                 where sales_flat_order.entity_id=sales_flat_invoice.order_id\n                 and  sales_flat_invoice_item.entity_id=sales_flat_invoice.entity_id\n                 and sales_flat_order.status = \"complete\"')\ndata = fetch(rs, n=-1)\n#Query to find AverageOrderValue\nAvg_Order=dbSendQuery(mydb,'select sum(grand_total)/count(*) as AvgOrderValue from sales_flat_order where status=\"complete\"')\nAvg_Value=fetch(Avg_Order,n=-1)\n#Queryto find revenue\nRevenueCal=dbSendQuery(mydb,'select sum(grand_total) from sales_flat_invoice')\nRevenueval=fetch(RevenueCal,n=-1)\n#Query to find tax amount\ntaxcal=dbSendQuery(mydb,\"select sum(tax_amount) from sales_flat_invoice\")\ntaxval=fetch(taxcal,n=-1)\n#Query to find Repeatedcustomers\nRepeatCust=dbSendQuery(mydb,'SELECT COUNT(*) AS grand_count FROM(\nSELECT customer_email FROM sales_flat_order\n                       WHERE sales_flat_order.status NOT LIKE \"canceled\"\n                       AND sales_flat_order.status NOT LIKE \"closed\"\n                       AND sales_flat_order.status NOT LIKE \"fraud\"\n                       AND sales_flat_order.status NOT LIKE \"holded\"\n                       AND sales_flat_order.status NOT LIKE \"paypal_canceled_reversal\"\n                       GROUP BY customer_email HAVING COUNT(*) > 1\n) s')\nRepeatVal=fetch(RepeatCust,n=-1)\n#Calculating E-Commerce Ratio\nVisits=dbSendQuery(mydb,\"select count(*) from log_visitor\")\nVisitsval=fetch(Visits,n=-1)\nTransactions=dbSendQuery(mydb,\"select count(*) from sales_flat_order where status='complete'\")\nTrValue=fetch(Transactions,n=-1)\nERatio=TrValue/Visitsval\n##Revenue of a perticular month in all years\n\nRevenueMarch=dbSendQuery(mydb,'select sum(grand_total) as Revenue ,Month(created_at) as Month,Year(created_at) as Year from sales_flat_order where Month(created_at) =3 group by  Year(created_at)')\nRevenueMarchVal=fetch(RevenueMarch,n=-1)\n\n##Sales of an item by location\n\nsaleLoc=dbSendQuery(mydb,'select sum(sales_flat_order.grand_total) as Revenue ,sales_flat_order_address.region as Location from \n                    sales_flat_order,sales_flat_order_address where sales_flat_order.entity_id=sales_flat_order_address.parent_id group by \n                    sales_flat_order_address.region,YEAR(sales_flat_order.created_at)=2015 order by (Month(sales_flat_order.created_at)=3)')\nsalelocval=fetch(saleLoc,n=-1)\n##Sales of an item among  the year by location \nsaleLocY=dbSendQuery(mydb,'select sum(sales_flat_order.grand_total) as Revenue ,sales_flat_order_address.region as Location from \n                    sales_flat_order,sales_flat_order_address where sales_flat_order.entity_id=sales_flat_order_address.parent_id group by \n                    sales_flat_order_address.region order by (YEAR(sales_flat_order.created_at)=2015)')\nsalelocvaly=fetch(saleLocY,n=-1)\n##Sales of an item among  all the years by location \nsaleLocYall=dbSendQuery(mydb,'select sum(sales_flat_order.grand_total) as Revenue ,sales_flat_order_address.region as Location from \n                     sales_flat_order,sales_flat_order_address where sales_flat_order.entity_id=sales_flat_order_address.parent_id group by \n                     sales_flat_order_address.region order by (YEAR(sales_flat_order.created_at))')\nsalelocvalyall=fetch(saleLocYall,n=-1)\n##Revenue of items among all the years\nyearwiserevenue=dbSendQuery(mydb,'select sum(grand_total) as Revenue ,\n                            Month(created_at) as Month,\n                            Year(created_at) as Year\n                            from sales_flat_order \n                            \n                            group by  Year\n                            ')\nRevenueByYear=fetch(yearwiserevenue,n=-1)\n\n##### Units per Transaction=Number of Units Sold  /  Number of Transactions  \n\nProductTop = dbSendQuery(mydb,'select sum(sales_flat_quote_item.qty) as TotalQty, \n                 sales_flat_quote_item.product_id, sales_flat_quote_item.name \n                 from sales_flat_quote_item,\n                 sales_flat_order_item \n                 where sales_flat_quote_item.product_id = sales_flat_order_item.product_id \n                 group by sales_flat_quote_item.product_id')\n\ntopproduct= fetch(ProductTop, n=-1)  \nmaxQty<-max(topproduct$TotalQty)\n\n####inventory Turnover=Cost of Goods Sold  /  Average Inventory \n\nturnover = dbSendQuery(mydb,'select sum(sales_flat_order.grand_total) as OrderTotal from\n  sales_flat_order,sales_flat_invoice\n                       where \n                       sales_flat_order.entity_id=sales_flat_invoice.order_id and\n                       sales_flat_order.status=\"complete\"')\nIturnover= fetch(turnover, n=-1)\ninventurnover<-sum(Iturnover$OrderTotal)\n###Revenue By Product Category\nRbycat=dbSendQuery(mydb,'SELECT sum(`qty`) as qty, sum(`total_price`) as Revenue, category_id FROM (SELECT sum(`qty_ordered`) as qty, sum(`row_total`) as total_price, sales_flat_order_item.product_id, catalog_category_product.category_id  FROM `sales_flat_order_item`\nINNER JOIN catalog_category_product ON catalog_category_product.product_id = sales_flat_order_item.product_id\n                   GROUP BY sales_flat_order_item.product_id order by catalog_category_product.category_id desc) as resTable GROUP BY category_id')\nRbycatval=fetch(Rbycat,n=-1)\n\n######Inventory sales by location#####\n\nInventsales= dbSendQuery(mydb,'select sum(sales_flat_order.grand_total) as Revenue ,\n                         sales_flat_order_address.region as Location,\n                         (sales_flat_invoice.total_qty) as ordered_qunatity\n                         \n                         from sales_flat_order,sales_flat_order_address,sales_flat_invoice\n                         \n                         where sales_flat_order.entity_id=sales_flat_order_address.parent_id   \n                         \n                         and  sales_flat_order.entity_id=sales_flat_invoice.order_id                             \n                         \n                         group by sales_flat_order_address.region')\n\n\nInventsalesbyRegion = fetch(Inventsales, n=-1)\n\n##### units per transaction ########\nTotalUnitSold = dbSendQuery(mydb,'select sum(sales_flat_quote_item.qty) as TotalQty \n                            from sales_flat_quote_item,sales_flat_order where \n                            sales_flat_order.entity_id = sales_flat_quote_item.product_id and \n                            sales_flat_order.status=\"complete\"')\n\nTotalUnitsSold = fetch(TotalUnitSold, n=-1)\n\nTransactions=dbSendQuery(mydb,'select count(*) from sales_flat_order where status=\"complete\"')\n\ntotalTransactions=fetch(Transactions,n=-1)\n\nunitspertransaction<-TotalUnitsSold/totalTransactions\n\n\n",
    "created" : 1487085862284.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3301940874",
    "id" : "5D0B3DCB",
    "lastKnownWriteTime" : 1487441566,
    "last_content_update" : 1487441566832,
    "path" : "H:/RWorkspace/SLC_POC/Slc_Connect.R",
    "project_path" : "Slc_Connect.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}