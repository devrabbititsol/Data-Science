{
    "collab_server" : "",
    "contents" : "library(RMySQL)\nlibrary(dplyr)\nlibrary(reshape2)\n\nmydb = dbConnect(MySQL(),user='readonly',password='readonly123',dbname='slcawdb',host='183.82.106.91')\nupArrow <-c('<i class=\"glyphicon glyphicon-arrow-up\" style=\"color:#0073b7;float: right;padding: 2px 15px 0px 0px;\"></i>')\ndownArrow<-c('<i class=\"glyphicon glyphicon-arrow-down\" style=\"color:#bc3f30;float: right;padding: 2px 15px 0px 0px;\"></i>')\nminus<-c('<i class=\"glyphicon glyphicon-minus\" style=\"float: right;padding: 2px 15px 0px 0px;\"></i>')\n###current day analysis\n\n####current day analysis for sales\n##########------------AFTER OPTIMIZING THE CODE----------------\nan1<-dbSendQuery(mydb,\"select year(sales_flat_order.updated_at) as year,\n                 month(sales_flat_order.updated_at) as month,\n                 day(sales_flat_order.updated_at) as day,\n                 timestamp( sales_flat_order.updated_at) as timestamp,\n                 sum(sales_flat_invoice.grand_total) as Sales\n                 from sales_flat_order,sales_flat_invoice\n                 where sales_flat_order.entity_id=sales_flat_invoice.order_id\n                 and year(sales_flat_order.updated_at)=2016 and\n                 month(sales_flat_order.updated_at)=3 and day(sales_flat_order.updated_at)>=25 \n                 group by time( sales_flat_order.updated_at)\")\nan= fetch(an1, n=-1) \n####yesterday sales\nydaysales<-an[grep(\"25\", an$day, ignore.case=T),]\n###today sales\ntdaysales<-an[grep(\"26\", an$day, ignore.case=T),]\n\n###current month analysis for sales\nrs=dbSendQuery(mydb,'select year(sales_flat_order.updated_at) as year,\n               month(sales_flat_order.updated_at) as month,\n               day(sales_flat_order.updated_at) as day,\n               sum(sales_flat_invoice.grand_total) as sales\n               from sales_flat_order,sales_flat_invoice\n                where sales_flat_order.entity_id=sales_flat_invoice.order_id  and \n               year(sales_flat_order.updated_at)=2016 and month(sales_flat_order.updated_at)>=1    \n               group by date(sales_flat_order.updated_at)')\ndaywisesales1= fetch(rs, n=-1) \ndaywisesales<-daywisesales1[grep(\"3\", daywisesales1$month, ignore.case=T),]\n####current year analysis for sales(2016)\nysalesval<-summarise(group_by(select(daywisesales1,month,sales),month),sales=round(sum(sales)))\n\n#Query to find AverageOrderValue\n#avg order value for a month in a year\nAvg_Order=dbSendQuery(mydb,'select sum(grand_total)/count(*) as AvgOrderValue,month(sales_flat_order.updated_at) as Month from sales_flat_order where status=\"complete\" and year(sales_flat_order.updated_at)=2016 group by month(sales_flat_order.updated_at)')\nAvg_Value=fetch(Avg_Order,n=-1)\nmAvg_Value<-Avg_Value[grep(\"3\", Avg_Value$Month, ignore.case=T),1]\n###avg order value for a year2016\nYmAvg_Value=Avg_Value\n##AvgOrdervalueBench Marking\nypAvg_order=dbSendQuery(mydb,'select sum(grand_total)/count(*) as AvgOrderValue,month(sales_flat_order.updated_at) as Month from sales_flat_order where status=\"complete\" and year(sales_flat_order.updated_at)>=2015 group by month(sales_flat_order.updated_at);')\nypAvg_value=fetch(ypAvg_order,n=-1)\n###avg order value for a year 2015 & 2016\nAvg=dbSendQuery(mydb,'select sum(grand_total)/count(*) as AvgOrderValue ,year(sales_flat_order.updated_at) AS YEAR from sales_flat_order where status=\"complete\" and year(sales_flat_order.updated_at)>=2015 GROUP BY YEAR')\navg1=fetch(Avg,n=-1)\nYAvg_Value<-avg1[grep(\"2016\", avg1$YEAR ,ignore.case=T),1]\nYAvg_Value15<-avg1[grep(\"2015\", avg1$YEAR ,ignore.case=T),1]\n# Avg_Inc=((YAvg_Value-YAvg_Value15)/YAvg_Value15)*100\n\n#Queryto find revenue\n##revenue generated in a month\nRevenueCal=dbSendQuery(mydb,'select sum(grand_total) as total,  month(sales_flat_invoice.created_at) as month from sales_flat_invoice where year(sales_flat_invoice.created_at)=2016 and month(sales_flat_invoice.created_at)>=1 group by month')\nRevCal=fetch(RevenueCal,n=-1)\nmRevenueval<-RevCal[grep(\"3\", RevCal$month ,ignore.case=T),1]\n## ##revenue generated in a year\nyRevenueval=summarise(group_by(select(RevCal,total,month)),grand_total=round(sum(total)))\n\n#Query to find Repeatedcustomers \n## repeated customers in a month\nm=dbSendQuery(mydb,'SELECT COUNT(*) AS grand_count,Month FROM(\n                        SELECT customer_email , month(sales_flat_order.updated_at) as Month FROM sales_flat_order\n              WHERE sales_flat_order.status NOT LIKE \"canceled\"\n              AND sales_flat_order.status NOT LIKE \"closed\"\n              AND sales_flat_order.status NOT LIKE \"fraud\"\n              AND sales_flat_order.status NOT LIKE \"holded\"\n              AND sales_flat_order.status NOT LIKE \"paypal_canceled_reversal\"\n              AND year(sales_flat_order.updated_at)=2016 \n              AND month(sales_flat_order.updated_at)>=1\n              GROUP BY Month(sales_flat_order.updated_at) ,customer_email HAVING COUNT(*) > 1) s group by Month') \nm1=fetch(m,n=-1)\nmRepeatVal<-m1[grep(\"3\",m1$Month,ignore.case = T),1]\n####yearly repeated customers in 2016\nyRepeatVal<-summarise(group_by( select(m1,Month,grand_count)), grand_count=round(sum(grand_count)))\n \n########## repeated customer in the year 2015\nyRepeatCust15=dbSendQuery(mydb,'SELECT COUNT(*) AS grand_count FROM(\n                          SELECT customer_email FROM sales_flat_order\n                          WHERE sales_flat_order.status NOT LIKE \"canceled\"\n                          AND sales_flat_order.status NOT LIKE \"closed\"\n                          AND sales_flat_order.status NOT LIKE \"fraud\"\n                          AND sales_flat_order.status NOT LIKE \"holded\"\n                          AND sales_flat_order.status NOT LIKE \"paypal_canceled_reversal\"\n                          AND year(sales_flat_order.updated_at)=2015 \n                          GROUP BY customer_email HAVING COUNT(*) > 1) s')\nyRepeatVal15=fetch(yRepeatCust15,n=-1)\nInc<-cbind((yRepeatVal-yRepeatVal15)/yRepeatVal15*100)\n#Calculating E-Commerce Ratio\n\n##for a month\nmVisits=dbSendQuery(mydb,\"select count(*) from log_visitor where month(log_visitor.first_visit_at)=3 and year(log_visitor.first_visit_at)=2016\")\nmVisitsval=fetch(mVisits,n=-1)\nmTransactions=dbSendQuery(mydb,\"select count(*) from sales_flat_order where status='complete' and month(sales_flat_order.created_at)=3 and year(sales_flat_order.created_at)=2016\")\nmTrValue=fetch(mTransactions,n=-1)\nmERatio=(mTrValue/mVisitsval)*100\n##for a year\nyVisits=dbSendQuery(mydb,\"select count(*) from log_visitor where year(log_visitor.first_visit_at)=2016\")\nyVisitsval=fetch(yVisits,n=-1)\nyTransactions=dbSendQuery(mydb,\"select count(*) from sales_flat_order where status='complete'  and year(sales_flat_order.created_at)=2016\")\nyTrValue=fetch(yTransactions,n=-1)\nyERatio=(yTrValue/yVisitsval)*100\n\n############## new Customer per month ###################\nmNewCust=dbSendQuery(mydb,'SELECT COUNT(*) AS grand_count FROM(\n                     SELECT customer_email FROM sales_flat_order\n                     WHERE sales_flat_order.status NOT LIKE \"canceled\"\n                     AND sales_flat_order.status NOT LIKE \"closed\"\n                     AND sales_flat_order.status NOT LIKE \"fraud\"\n                     AND sales_flat_order.status NOT LIKE \"holded\"\n                     AND sales_flat_order.status NOT LIKE \"paypal_canceled_reversal\"\n                     AND year(sales_flat_order.updated_at)=2016 \n                     AND month(sales_flat_order.updated_at)=3\n                     GROUP BY customer_email HAVING COUNT(*) = 1) s')\nmNewCustVal=fetch(mNewCust,n=-1)\n\n###########increase % per month#####\nt=dbSendQuery(mydb,\"select month(sales_flat_order.created_at) as month,year(sales_flat_order.created_at) as year,\n                    sum(sales_flat_order.grand_total) as sale from sales_flat_order where \n                    year(sales_flat_order.created_at)>=2015 \n                    and month(sales_flat_order.created_at)>=1 group by month,year(sales_flat_order.created_at);\")\nt1=fetch(t,n=-1)\npercentofmonthsdata<-t1[grep(\"2016\", t1$year ,ignore.case=T),3]\n###########increase % per year#####\nypdata<-summarise(group_by(select(t1,year,sale),year), sales=round(sum(sale)))\n\n##Revenue of a perticular month in all years\nRevenueMarch=dbSendQuery(mydb,'select sum(grand_total) as Revenue ,Month(created_at) as Month,Year(created_at) as Year from sales_flat_order where Month(created_at) =3 group by  Year(created_at)')\nRevenueMarchVal=fetch(RevenueMarch,n=-1)\n###########increase IN sales % BETWEEN THE YEARS IN A PARTICULAR MONTH MARCH(2013-2014)#####\nincsales=dbSendQuery(mydb,'select sum(grand_total) as Revenue , Month(created_at) as Month,Year(created_at) as Year \n                            from sales_flat_order  where Month(created_at) =3  and  Year(created_at)>=2013  group by  Year(created_at);')\npincrease=fetch(incsales,n=-1)\ndata2013<-pincrease[grep(\"2013\", pincrease$Year ,ignore.case=T),1] \ndata2014<-pincrease[grep(\"2014\", pincrease$Year ,ignore.case=T),1] \ndata2015<-pincrease[grep(\"2015\", pincrease$Year ,ignore.case=T),1] \ndata2016<-pincrease[grep(\"2016\", pincrease$Year ,ignore.case=T),1] \nminc1314=(((data2014-data2013)/((data2013)))*100)\nminc1415=(((data2015-data2014)/((data2014)))*100)\nminc1516=(((data2016-data2015)/((data2015)))*100)\nRMinc.annotation<-c(paste(round(0),\"%\"),paste(round(minc1314,1),\"%\"),paste(round(minc1415,1),\"%\"),paste(round(minc1516,1),\"%\"))\nRMVal<-cbind(RevenueMarchVal,RMinc.annotation)\n\n##Sales of an item by location in a month\nsaleLoc=dbSendQuery(mydb,\"select sum(sales_flat_order.grand_total) as Revenue ,sales_flat_order_address.region as Location,\n                      month(sales_flat_order.created_at) as month from \n                    sales_flat_order,sales_flat_order_address \n                    where sales_flat_order.entity_id=sales_flat_order_address.parent_id \n                    and YEAR(sales_flat_order.created_at)=2016\n                    and month(sales_flat_order.created_at)>=1\n                    group by  sales_flat_order_address.region,month(sales_flat_order.created_at)\")\ns11=fetch(saleLoc,n=-1)\nmsalelocval<-s11[grep(\"3\", s11$month ,ignore.case=T),] \n##Sales of an item among  the year by location \nysalelocvaly<-summarise(group_by(select(s11,Location,Revenue,month),Location),\n               Revenue=(sum(Revenue)))\n##Revenue of items among all the years\nyrevenue=dbSendQuery(mydb,'select sum(grand_total) as Revenue ,Year(created_at) as Year\n                            from sales_flat_order group by  Year')\nyRevenue=fetch(yrevenue,n=-1)\n#######calculation of increase in percentage of year wise revenue(2012-2013)##############\ny2012<-yRevenue[grep(\"2012\", yRevenue$Year ,ignore.case=T),1] \ny2013<-yRevenue[grep(\"2013\", yRevenue$Year ,ignore.case=T),1] \ny2014<-yRevenue[grep(\"2014\", yRevenue$Year ,ignore.case=T),1] \ny2015<-yRevenue[grep(\"2015\", yRevenue$Year ,ignore.case=T),1] \ny2016<-yRevenue[grep(\"2016\", yRevenue$Year ,ignore.case=T),1] \ny1213=(((y2013-y2012)/y2012)*100)\ny1314=(((y2014-y2013)/y2013)*100)\ny1415=(((y2015-y2014)/y2014)*100)\ny1516=(((y2016-y2015)/y2015)*100)\nyminc.annotation<-c(paste(round(0),\"%\"),paste(round(y1213,1),\"%\"),paste(round(y1314,1),\"%\"),paste(round(y1415,1),\"%\"),paste(round(y1516,1),\"%\"))\nysales<-c(round(0),round(y1213,1),round(y1314,1),round(y1415,1),round(y1516,1))\nymval<-cbind(yRevenue,yminc.annotation,ysales)\n\n##### calculating top product in a month  \ntop=dbSendQuery(mydb,'select sum(sales_flat_invoice_item.qty) as Qty, month(sales_flat_quote_item.updated_at) as month, sales_flat_invoice_item.product_id,sales_flat_quote_item.name\n                          from sales_flat_invoice_item,sales_flat_quote_item,sales_flat_order \n                where year(sales_flat_quote_item.updated_at)=2016 and\n                month(sales_flat_quote_item.updated_at)>=1 and\n                sales_flat_invoice_item.product_id=sales_flat_quote_item.product_id and\n                sales_flat_order.entity_id=sales_flat_quote_item.quote_id and \n                sales_flat_order.`status`=\"complete\" group by month(sales_flat_quote_item.updated_at),sales_flat_invoice_item.product_id order by Qty ')\ntopprod=fetch(top,n=-1)  \nmtopproduct<-topprod[grep(\"3\", topprod$month,ignore.case=T),]\nmaxQty<-max(mtopproduct$Qty)\n############calculating top product in a year\nymaxQty<-max(topprod$Qty)\n###Revenue By Product Category\nRbycat=dbSendQuery(mydb,'SELECT sum(`qty`) as qty, sum(`total_price`) as Revenue, category_id FROM (SELECT sum(`qty_ordered`) as qty, sum(`row_total`) as total_price, sales_flat_order_item.product_id, catalog_category_product.category_id  FROM `sales_flat_order_item`\n                   INNER JOIN catalog_category_product ON catalog_category_product.product_id = sales_flat_order_item.product_id\n                   GROUP BY sales_flat_order_item.product_id order by catalog_category_product.category_id desc) as resTable GROUP BY category_id')\nRbycatval=fetch(Rbycat,n=-1)\n\n######Inventory sales by location in a month#####\nmInventsales= dbSendQuery(mydb,'select \n                          sales_flat_order_address.region as Location,\n                          (sales_flat_invoice.total_qty) as QuantityOrdered,\n                          month(sales_flat_order.created_at) as month\n                          from sales_flat_order,sales_flat_order_address,sales_flat_invoice\n                          where sales_flat_order.entity_id=sales_flat_order_address.parent_id   \n                          and  sales_flat_order.entity_id=sales_flat_invoice.order_id  and\n                          year(sales_flat_order.created_at)=2016 \n                          and  month(sales_flat_order.created_at)>=1\n                          group by month(sales_flat_order.created_at),sales_flat_order_address.region')\nm1 = fetch(mInventsales, n=-1)\nmIsalesbyRegion<-m1[grep(\"3\", m1$month, ignore.case=T),]\n######Inventory sales by location in a year#####\nyIsalesbyRegion<-summarise(group_by(select(m1,Location,QuantityOrdered,month),Location),\n                  qty=round(sum(QuantityOrdered)))\n\n##### units per transaction in month ########\nmtotalUnitSold=dbSendQuery(mydb,'select sum(sales_flat_invoice_item.qty) as TotalQty,MONTH(sales_flat_order.updated_at) as month\n                             from sales_flat_invoice_item,sales_flat_order,sales_flat_invoice\n              where YEAR(sales_flat_order.updated_at)=2016 and\n              MONTH(sales_flat_order.updated_at)>=1 and\n              sales_flat_order.entity_id = sales_flat_invoice.order_id and \n              sales_flat_invoice.entity_id=sales_flat_invoice_item.parent_id and\n              sales_flat_order.status=\"complete\"\n              group by month')\nh1=fetch(mtotalUnitSold,n=-1)\nmtotUnitsSold<-h1[grep(\"3\", h1$month ,ignore.case=T),1]\nTransactions=dbSendQuery(mydb,'select count(*) as count,month(updated_at) as month  from sales_flat_order where YEAR(updated_at)=2016 and month(updated_at)>=1\nand status=\"complete\" group by month')\nTrans=fetch(Transactions,n=-1)\nmtotalTransactions<-Trans[grep(\"3\", Trans$month ,ignore.case=T),1]\nmunitspertransaction<-mtotUnitsSold/mtotalTransactions\n\n################units per transactions in year################\nytotUnitsSold<-summarise(group_by(select(h1,TotalQty,month)),TotalQty=round(sum(TotalQty)))\nytotalTransactions<-summarise(group_by(select(Trans, count,month)),\n                              count=round(sum( count)))\nyunitspertransaction<-ytotUnitsSold/ytotalTransactions\n                         \n###################supply chain#########################\n####in a month\nsupplychain=dbSendQuery(mydb,'select sum(sales_flat_invoice.total_qty) as UnitsOrdered,Month(sales_flat_shipment.created_at) as Month,day(sales_flat_shipment.created_at) as day,\n sales_flat_order.`status`,sum(sales_flat_shipment.total_qty) as UnitsShipped, sum(sales_flat_invoice.grand_total) as sales,sales_flat_shipment.created_at from\n                        sales_flat_invoice,sales_flat_order,sales_flat_shipment\n                        where sales_flat_invoice.order_id=sales_flat_order.entity_id and sales_flat_invoice.order_id=sales_flat_shipment.order_id \n                        and sales_flat_order.`status`=\"complete\"  and year(sales_flat_shipment.updated_at)=2016  and month(sales_flat_shipment.updated_at)>=1 \n                        group by Month,day(sales_flat_shipment.created_at)')\nSchain=fetch(supplychain,n=-1)\nmsupplychainval<-Schain[grep(\"3\", Schain$Month ,ignore.case=T),]\n#################in a year\nysupplychainval<-summarise(group_by(select(Schain,UnitsOrdered,UnitsShipped,sales,Month),Month),\n                           sales=round(sum(sales)),UnitsOrdered=round(sum(UnitsOrdered)),UnitsShipped=round(sum(UnitsShipped)))\n\n#### Visit per Day ########\ndVisits=dbSendQuery(mydb,\"select count(*) from log_visitor where day(log_visitor.first_visit_at)=26 and \n                    month(log_visitor.first_visit_at)=3 and year(log_visitor.first_visit_at)=2016\")\ndVisitsperday=fetch(dVisits,n=-1)\n###############################comparision of visitors in the curren month(25th nd 26th days))#################\nvisitorscompare=dbSendQuery(mydb,'select count(*) as visitors ,day(log_visitor.first_visit_at) as day from log_visitor\n                            where (day(log_visitor.first_visit_at)>=25 and day(log_visitor.first_visit_at)<=26) and\n                            month(log_visitor.first_visit_at)=3 and year(log_visitor.first_visit_at)=2016 \n                            group by day')\n\ndaywisevisitorscomparision=fetch(visitorscompare,n=-1)\nvisitorsinday25<-daywisevisitorscomparision[grep(\"25\", daywisevisitorscomparision$day ,ignore.case=T),1]\nvisitorsinday26<-daywisevisitorscomparision[grep(\"26\", daywisevisitorscomparision$day ,ignore.case=T),1]\nvisitorsinday2526=round(((visitorsinday26-visitorsinday25)/visitorsinday25),2)*100\n############################### comparision ofnumber of visitors in the current year(2016) with previousyear(2015)#################\nvisitors201516=dbSendQuery(mydb,'select count(*) as visitors ,year(log_visitor.first_visit_at) as year from log_visitor\n                           where year(log_visitor.first_visit_at) >=2015\n                           group by year')\nyvisitorsin201516=fetch(visitors201516,n=-1)\nvisitorsinyear2015<-yvisitorsin201516[grep(\"2015\", yvisitorsin201516$year,ignore.case=T),1]\nvisitorsinyear2016<-yvisitorsin201516[grep(\"2016\", yvisitorsin201516$year,ignore.case=T),1]\n\n###########Inventory Availability####################\navailStock = dbSendQuery(mydb,'select cataloginventory_stock_status.product_id as Productid,catalog_product_entity_varchar.value as Productname,cataloginventory_stock_status.qty as Quantity\n                         \n                         from cataloginventory_stock_status,catalog_product_entity,catalog_product_entity_varchar\n                         where cataloginventory_stock_status.product_id=catalog_product_entity.entity_id \n                         and catalog_product_entity_varchar.entity_id=catalog_product_entity.entity_id\n                         group by cataloginventory_stock_status.product_id;')\navailInventoryStock= fetch(availStock, n=-1)\nwrite.csv(availInventoryStock,\"mydata.csv\")\n\n######Top 10 best Product##########\nProducts= dbSendQuery(mydb,'select sales_flat_order_item.product_id as Productid,sales_flat_order_item.name as Name,(sales_flat_invoice.total_qty) as Quantity,sales_flat_invoice.grand_total as Sales,sales_flat_order.`status` ,\n                      year(sales_flat_order.created_at) as year\n                      from sales_flat_order_item,sales_flat_invoice,sales_flat_order\n                      where sales_flat_order.entity_id=sales_flat_order_item.item_id and\n                      sales_flat_order.entity_id=sales_flat_invoice.entity_id and status=\"complete\"\n                      and year(sales_flat_order.created_at)=2016  order by sales_flat_invoice.total_qty desc limit 10;')\nTopBestProducts= fetch(Products, n=-1)\n######top 5 products in location wise of current year######\nlocationsale2016 = dbSendQuery(mydb,' select sales_flat_order_item.product_id as Productid,sales_flat_order_item.name as Name,sales_flat_order_address.region as Location,\n                               (sales_flat_invoice.total_qty) as Quantity, sum(sales_flat_invoice.grand_total) as sales, sales_flat_order.`status` ,\n                               year(sales_flat_order.created_at) as year from \n                               sales_flat_order_item,sales_flat_order_address,sales_flat_invoice,sales_flat_order\n                               where sales_flat_order.entity_id=sales_flat_order_item.item_id \n                               and  sales_flat_order.entity_id=sales_flat_invoice.order_id and sales_flat_order.entity_id=sales_flat_order_address.parent_id  \n                               and sales_flat_order.status=\"complete\" and year(sales_flat_order.created_at)=2016 group by location order by sales_flat_invoice.total_qty desc limit 10;')\nlocationwise = fetch(locationsale2016, n=-1) \n# colnames(locationwise)[1]<-\"productid\"\n##Pie Chart Top 10 Product Analysis ######\nyTopProSales1=dbSendQuery(mydb,'select sales_flat_order_item.product_id as Productid,sales_flat_order_item.name as Name,\n                          (sales_flat_invoice.total_qty) as Qty,sales_flat_order.`status` ,\n                          year(sales_flat_order.created_at) as year\n                          from sales_flat_order_item,sales_flat_invoice,sales_flat_order\n                          where sales_flat_order.entity_id=sales_flat_order_item.item_id and\n                          sales_flat_order.entity_id=sales_flat_invoice.order_id and status=\"complete\"\n                          and year(sales_flat_order.created_at)=2016 and month(sales_flat_order.created_at)=1 \n                          order by sales_flat_invoice.total_qty desc limit 10;')\nyTopProSales1=fetch(yTopProSales1,n=-1)\n\nyTopProSales2=dbSendQuery(mydb,'select sales_flat_order_item.product_id as Productid,sales_flat_order_item.name as Name,\n                          (sales_flat_invoice.total_qty) as Qty,sales_flat_order.`status` ,\n                          year(sales_flat_order.created_at) as year\n                          from sales_flat_order_item,sales_flat_invoice,sales_flat_order\n                          where sales_flat_order.entity_id=sales_flat_order_item.item_id and\n                          sales_flat_order.entity_id=sales_flat_invoice.order_id and status=\"complete\"\n                          and year(sales_flat_order.created_at)=2016 and month(sales_flat_order.created_at)=2\n                          order by sales_flat_invoice.total_qty desc limit 10;')\n\nyTopProSales2=fetch(yTopProSales2,n=-1)\n\nyTopProSales3=dbSendQuery(mydb,'select sales_flat_order_item.product_id as Productid,sales_flat_order_item.name as Name,\n                          (sales_flat_invoice.total_qty) as Qty,sales_flat_order.`status` ,\n                          year(sales_flat_order.created_at) as year\n                          from sales_flat_order_item,sales_flat_invoice,sales_flat_order\n                          where sales_flat_order.entity_id=sales_flat_order_item.item_id and\n                          sales_flat_order.entity_id=sales_flat_invoice.order_id and status=\"complete\"\n                          and year(sales_flat_order.created_at)=2016 and month(sales_flat_order.created_at)=3 \n                          order by sales_flat_invoice.total_qty desc limit 10;')\n\nyTopProSales3=fetch(yTopProSales3,n=-1)\n#########maxunits sold for all years######\nmaxunitssold=dbSendQuery(mydb,'select (sales_flat_invoice.total_qty) as maxunitsorder,\n                         year(sales_flat_invoice.created_at) as year,\n                         month(sales_flat_invoice.created_at) as month,\n                         day(sales_flat_invoice.created_at) as day\n                         from sales_flat_invoice\n                         where (sales_flat_invoice.total_qty)>1\n                         group by year,month,day(sales_flat_invoice.created_at),maxunitsorder ')   \nmaxunitssold=fetch(maxunitssold,n=-1)\n#########################number of units sold in all yearss############################\nnunits=dbSendQuery(mydb,'select sum(sales_flat_invoice.total_qty) as qty,\n                   year(sales_flat_invoice.created_at) as year\n                   from sales_flat_invoice\n                   group by year(sales_flat_invoice.created_at)   ')\nnumberofunitssold=fetch(nunits,n=-1)\n\n###########################Trend in  current month(today and yeasterday) ##################\ntrend2016=dbSendQuery(mydb,'select year(sales_flat_order.updated_at) as year,count(*) as totalcustomers,sum(sales_flat_invoice.total_qty) as QtyOrdered,\n                      (sum((sales_flat_invoice.grand_total))/count(*)) as AvgperCustomer,\n                      month(sales_flat_order.updated_at) as month,\n                      day(sales_flat_order.updated_at) as day,\n                      sum(sales_flat_invoice.grand_total) as Sales\n                      from sales_flat_order,sales_flat_invoice\n                      where sales_flat_order.entity_id=sales_flat_invoice.order_id \n                      and year(sales_flat_order.updated_at)=2016 \n                      and month(sales_flat_order.updated_at)=3 and day(sales_flat_order.updated_at)>=25\n                      group by day( sales_flat_order.updated_at)')\ntrends2016=fetch(trend2016,n=-1)\n########for qty ordered########\nyesterdayorder=trends2016$QtyOrdered[1]\ntodayorder=trends2016$QtyOrdered[2]\ntrendsinorder2016=round(((todayorder-yesterdayorder)/yesterdayorder)*100,digits = 2)\n########for sales##############\nyesterdaysales=trends2016$Sales[1]\ntodaysales=trends2016$Sales[2]\ntrendsinsales2016=round(((todaysales-yesterdaysales)/yesterdaysales)*100,digits = 2)\n#########avg per customer##########\nyesterdayAvg=trends2016$AvgperCustomer[1]\ntodayAvg=trends2016$AvgperCustomer[2]\ntrendsinAvg2016=round(((todayAvg-yesterdayAvg)/yesterdayAvg)*100,digits = 2)\n\npercentages<-c(0,0,paste(-26.93,downArrow),paste(2.7,upArrow),0,0,paste(-19.62,downArrow))\nrow2016<-rbind(round(trends2016,2),percentages)\n\n#############location wise quantity sold in the all years######################\nyears=dbSendQuery(mydb,'select #sales_flat_order_item.product_id as Productid,\n                  #sales_flat_order_item.name as Name,\n                  sales_flat_order_address.region as Location,\n                  sum(sales_flat_invoice.total_qty) as Quantity,sales_flat_order.`status` ,\n                  \n                  year(sales_flat_order.created_at) as year\n                  from sales_flat_order_item,sales_flat_order_address,sales_flat_invoice,sales_flat_order\n                  where sales_flat_order.entity_id=sales_flat_order_item.item_id and\n                  sales_flat_order.entity_id=sales_flat_invoice.entity_id and sales_flat_order.entity_id=sales_flat_order_address.entity_id  \n                  and status=\"complete\"\n                  group by year(sales_flat_order.created_at),location')\nwholeyears=fetch(years,n=-1)\n###############website traffic growth##################\nwebgrowthin2016=dbSendQuery(mydb,'select count(*) as visitors,\n                            month(log_visitor.first_visit_at) as month,year(log_visitor.first_visit_at) as year\n                            from log_visitor where month(log_visitor.first_visit_at)>=2 and year(log_visitor.first_visit_at)=2016\n                            group by month(log_visitor.first_visit_at),year(log_visitor.first_visit_at);')\nwebtrafficgrowth2016=fetch(webgrowthin2016,n=-1)\ntrafficinfeb=webtrafficgrowth2016$visitors[1]\ntrafficinmarch=webtrafficgrowth2016$visitors[2]\nwebtrafficgrowthin2016=round(((trafficinmarch-trafficinfeb)/trafficinfeb),2)*100\n\n######################sales analysis for all years in feb and march######################\nfbmanalysis=dbSendQuery(mydb,'select sum(grand_total) as Revenue ,Month(created_at) as Month,Year(created_at) as Year \n                        from sales_flat_order \n                        where (Month(created_at) >=2 and Month(created_at)<=3) \n                        and (Year(created_at)>=2013 and year(created_at)<=2016) group by  Year(created_at),month(created_at)')\nfebmarchanalysis=fetch(fbmanalysis,n=-1)\n##############################2013 difference between february and march##################\nfeb2013=febmarchanalysis$Revenue[1]\nmarch2013=febmarchanalysis$Revenue[2]\nfm3=round(((march2013-feb2013)/feb2013)*100,digits = 2)\n##############################2014 difference between february and march##################\nfeb2014=febmarchanalysis$Revenue[3]\nmarch2014=febmarchanalysis$Revenue[4]\nfm4=round(((march2014-feb2014)/feb2014)*100,digits = 2)\n\n##############################2015 difference between february and march##################\nfeb2015=febmarchanalysis$Revenue[5]\nmarch2015=febmarchanalysis$Revenue[6]\nfm5=round(((march2015-feb2015)/feb2015)*100,digits = 2)\n##############################2016 difference between february and march##################\nfeb2016=febmarchanalysis$Revenue[7]\nmarch2016=febmarchanalysis$Revenue[8]\nfm6=round(((march2016-feb2016)/feb2016)*100,digits = 2)\n\n#################brand wise revenue in the current month(2016)################################\nk=dbSendQuery(mydb,\"select sales_flat_order.`status`,\n                     (case when sales_flat_order_item.name like 'Yupoong%' then 'Yupoong'\n              when sales_flat_order_item.name like 'Original Chuck%' then 'Original Chuck'\n              when sales_flat_order_item.name like 'Valucap%' then 'Valucap'\n              when sales_flat_order_item.name like '%Next Level Apparel%' then 'Next Level Apparel'\n              when sales_flat_order_item.name like 'Anvil%' then 'Anvil'\n              when sales_flat_order_item.name like 'Cirque Mountain Apparel%' then 'Cirque Mountain Apparel'\n              when sales_flat_order_item.name like 'Independent Trading%' then 'Independent Trading Company'\n              when sales_flat_order_item.name like 'Gildan%' then 'Gildan'\n              when sales_flat_order_item.name like 'Flexfit%' then 'Flexfit'\n              when sales_flat_order_item.name like 'B%+C%' then 'Bella + Canvas'   end) as Brand,\n              sum(sales_flat_order_item.row_total) as Revenue,\n              sum(sales_flat_order_item.qty_ordered) as Qty,\n              month(sales_flat_order_item.updated_at) as month from sales_flat_order_item,sales_flat_order\n              where year(sales_flat_order_item.updated_at)=2016 and month(sales_flat_order_item.updated_at)>=1 and\n              sales_flat_order.entity_id=sales_flat_order_item.order_id and\n              sales_flat_order.`status`='complete'\n              group by Brand , month(sales_flat_order_item.updated_at)\")\nk1=fetch(k,n=-1)\nk1[c(1:3),2]<-\"others\"\nBrandRevenue<-k1[grep(\"3\", k1$month ,ignore.case=T),]\nYBrandRevenue<-summarise(group_by(select(k1,Brand,Revenue,month,Qty),Brand),\n                         Revenue=round(sum(Revenue)),Qty=round(sum(Qty)))\n\n#####Brand 15\n######################## Difference in % Revenue and Quantity Year 2015 and 2016 ####################\nj=dbSendQuery(mydb,\"select (case when sales_flat_order_item.name like 'Yupoong%' then 'Yupoong'\n                         when sales_flat_order_item.name like 'Original Chuck%' then 'Original Chuck'\n              when sales_flat_order_item.name like 'Valucap%' then 'Valucap'\n              when sales_flat_order_item.name like '%Next Level Apparel%' then 'Next Level Apparel'\n              when sales_flat_order_item.name like 'Anvil%' then 'Anvil'\n              when sales_flat_order_item.name like 'Cirque Mountain Apparel%' then 'Cirque Mountain Apparel'\n              when sales_flat_order_item.name like 'Independent Trading%' then 'Independent Trading Company'\n              when sales_flat_order_item.name like 'Gildan%' then 'Gildan'\n              when sales_flat_order_item.name like 'Flexfit%' then 'Flexfit'\n              when sales_flat_order_item.name like 'B%+C%' then 'Bella + Canvas'\n              end) as Brand,\n              sum(sales_flat_order_item.row_total) as CurrentYearRevenue,year(sales_flat_order_item.updated_at) as year,\n              sum(sales_flat_order_item.qty_ordered) as CurrentYearQty from sales_flat_order_item,sales_flat_order\n              where year(sales_flat_order_item.updated_at)>=2015 and \n              sales_flat_order.entity_id=sales_flat_order_item.order_id and\n              sales_flat_order.`status`='complete'\n              group by Brand , year(sales_flat_order_item.updated_at)\")\nj1=fetch(j,n=-1)\n\nj2=j1[grep(\"2015\", j1$year ,ignore.case=T),]\nj2[1,1]<-\"others\"\ncolnames(j2)[2]<-\"LastYearRevenue\"\ncolnames(j2)[4]<-\"LastYearQty\"\nj3=j1[grep(\"2016\", j1$year ,ignore.case=T),]\nj3[1,1]<-\"others\"\nBrand<-j2$Brand\nLastYearRevenue<-j2$LastYearRevenue\nLastYearQty<-j2$LastYearQty\ndf2015<-data.frame(Brand,LastYearRevenue,LastYearQty)#Revenue2015,YearQty2015,\ndf2015<-df2015[-c(6,7),]\nBrand<-j3$Brand\nCurrentYearRevenue<-j3$CurrentYearRevenue\nCurrentYearQty<-j3$CurrentYearQty\ndf2016<-data.frame(CurrentYearRevenue,CurrentYearQty)#Revenue2016,YearQty2016,\ndf2016<-df2016[-2,]\nfor(i in 1:6)\n{\n  D1Qty<-((df2016[i,1]-df2015[i,1])/df2015[i,1]*100)\n}\nfor(i in 1:6)\n{\n  D2Qty<-((df2016[i,2]-df2015[i,2])/df2015[i,2]*100)\n}\nGrowthinSales<-c(paste( -67.98655,downArrow),paste(80.40191,upArrow),paste( -77.49308,downArrow),paste(-79.19727,downArrow),paste( -79.48549,downArrow),paste(-5.297791,downArrow))\nGrowthinQuantity<-c(paste( -73.53804,downArrow),paste(81.22347,upArrow),paste(-76.07492,downArrow),paste( -79.16116,downArrow),paste(-79.83053,downArrow),paste(-17.98742,upArrow))\nbellacanvas<-c(\"BellaCanvas\",0,0,1383.69,357,100,100)   ####### Change 04/03/2017\norginalchuck<-c(\"Orginal Chuck\",137.60,176,0,0,0,0)      ####### Change 04/03/2017\nvalucap<-c(\"ValuCap\",1737.60,1054,0,0,0,0)  \n\nybrandsale1<-cbind(df2015,df2016,GrowthinSales,GrowthinQuantity)\nybrandsale<-rbind(ybrandsale1,bellacanvas,orginalchuck,valucap)    #\n\n##############month analysis of +/- in Sales and Quantity\nBrand=dbSendQuery(mydb,\"select (case when sales_flat_order_item.name like 'Yupoong%' then 'Yupoong'\n                            when sales_flat_order_item.name like 'Original Chuck%' then 'Original Chuck'\n                  when sales_flat_order_item.name like 'Valucap%' then 'Valucap'\n                  when sales_flat_order_item.name like '%Next Level Apparel%' then 'Next Level Apparel'\n                  when sales_flat_order_item.name like 'Anvil%' then 'Anvil'\n                  when sales_flat_order_item.name like 'Cirque Mountain Apparel%' then 'Cirque Mountain Apparel'\n                  when sales_flat_order_item.name like 'Independent Trading%' then 'Independent Trading Company'\n                  when sales_flat_order_item.name like 'Gildan%' then 'Gildan'\n                  when sales_flat_order_item.name like 'Flexfit%' then 'Flexfit'\n                  when sales_flat_order_item.name like 'B%+C%' then 'Bella + Canvas'\n                  end) as Brand,\n                  sum(sales_flat_order_item.row_total) as Revenue,\n                  sum(sales_flat_order_item.qty_ordered) as Qty ,\n                  month(sales_flat_order_item.updated_at) as month from sales_flat_order_item,sales_flat_order\n                  where year(sales_flat_order_item.updated_at)=2016 and month(sales_flat_order_item.updated_at)>=2 and\n                  sales_flat_order.entity_id=sales_flat_order_item.order_id and\n                  sales_flat_order.`status`='complete'\n                  group by Brand , month(sales_flat_order_item.updated_at)\")\nBrandRevQty=fetch(Brand,n=-1)\nBrandRevQty[c(1,2),1]<-\"others\"\nmsalebrand16feb<-BrandRevQty[grep(\"2\", BrandRevQty$month ,ignore.case=T),]\nmsalebrand16mar<-BrandRevQty[grep(\"3\", BrandRevQty$month ,ignore.case=T),]\nmsalebrand16mar<-msalebrand16mar[-2,] \nfor(i in 1:6)\n{\n  DifferenceInRevenue<-((msalebrand16mar[i,2]-msalebrand16feb[i,2])/msalebrand16feb[i,2]*100)\n  print(DifferenceInRevenue)\n}\nfor(i in 1:6)\n{\n  DifferenceInQty<-((msalebrand16mar[i,3]-msalebrand16feb[i,3])/msalebrand16feb[i,3]*100)\n  print(DifferenceInQty)\n}\nSalesGrowth<-c(paste(-38.04,downArrow),paste(1.45,upArrow),paste(-23.27,downArrow),paste(-14.47,downArrow),paste(3.9,upArrow),paste(-25.63,downArrow)) \nQuantityGrowth<-c(paste(-31.05,downArrow),paste(-1.44,downArrow),paste(-30.22,downArrow),paste(-13.28,downArrow),paste(3.39,upArrow),paste(-27.16,downArrow)) \n\nLastMonthSales<-msalebrand16feb$Revenue\nLastmonthQty<-msalebrand16feb$Qty\nmsalebrand16mar<-cbind(msalebrand16mar,SalesGrowth,QuantityGrowth,LastmonthQty,LastMonthSales)\nbellacanvas<-c(\"Bella Canvas\",1383.69,357,100,100,0,0)             ##### Chage04/03/2017\nmsalebrand16mar<-rbind(msalebrand16mar,bellacanvas)                ####Chage04/03/2017\n\n##########calculation of kpi to find the growth/Fall in percentages in the year(2016-2015)###################################\nh=dbSendQuery(mydb,'select sum(grand_total) as Revenue ,Year(created_at) as Year from sales_flat_order  \n                    where (Year(created_at)>=2014 and Year(created_at)<=2016) group by  Year')\nh1=fetch(h,n=-1)\nydata2015=h1[grep(\"2015\", h1$Year ,ignore.case=T),1]\nydata2016=h1[grep(\"2016\", h1$Year ,ignore.case=T),1]\ndifference=ydata2016-ydata2015\nmincreaseorfallperyear2016=(difference/ydata2015)*100\n\n##########calculation of kpi to find the growth/Fall in percentages in the year(2015-2014)###################################\nydata2014=h1[grep(\"2014\", h1$Year ,ignore.case=T),1]\nydata2015=h1[grep(\"2015\", h1$Year ,ignore.case=T),1]\ndifference=ydata2015-ydata2014\nmincreaseorfallperyear2016=(difference/ydata2014)*100\n\n############################finding the number of visitors in all years ##################\nywebtraffic=dbSendQuery(mydb,'select count(*) as visitors,year(log_visitor.first_visit_at) as year from log_visitor \n                               group by year(log_visitor.first_visit_at)')\nyearwebtraffic=fetch(ywebtraffic,n=-1)\ngrowth2013=round((yearwebtraffic$visitors[2]-yearwebtraffic$visitors[1])/yearwebtraffic$visitors[1]*100,2)\ngrowth2014=round((yearwebtraffic$visitors[3]-yearwebtraffic$visitors[2])/yearwebtraffic$visitors[2]*100,2)\ngrowth2015=round((yearwebtraffic$visitors[4]-yearwebtraffic$visitors[3])/yearwebtraffic$visitors[3]*100,2)\ngrowth2016=round((yearwebtraffic$visitors[5]-yearwebtraffic$visitors[4])/yearwebtraffic$visitors[4]*100,2)\n\n\n#################calculating the growth/fall in percentages b/w (2012-2013)################\ntrafficin2012=yearwebtraffic[grep(\"2012\", yearwebtraffic$year ,ignore.case=T),1]\ntrafficin2013=yearwebtraffic[grep(\"2013\", yearwebtraffic$year ,ignore.case=T),1]\nwebtrafficgrowthin201213=round(((trafficin2013-trafficin2012)/trafficin2012),2)*100\n\n#################calculating the growth/fall in percentages b/w (2013-2014)################\ntrafficin2013=yearwebtraffic[grep(\"2013\", yearwebtraffic$year ,ignore.case=T),1]\ntrafficin2014=yearwebtraffic[grep(\"2014\", yearwebtraffic$year ,ignore.case=T),1]\nwebtrafficgrowthin201314=round(((trafficin2014-trafficin2013)/trafficin2013),2)*100\n\n#################calculating the growth/fall in percentages b/w (2014-2015)################\ntrafficin2014=yearwebtraffic[grep(\"2014\", yearwebtraffic$year ,ignore.case=T),1]\ntrafficin2015=yearwebtraffic[grep(\"2015\", yearwebtraffic$year ,ignore.case=T),1]\nwebtrafficgrowthin201415=round(((trafficin2015-trafficin2014)/trafficin2014),2)*100\n\n#################calculating the growth/fall in percentages b/w (2015-2016)################\ntrafficin2015=yearwebtraffic[grep(\"2015\", yearwebtraffic$year ,ignore.case=T),1]\ntrafficin2016=yearwebtraffic[grep(\"2016\", yearwebtraffic$year ,ignore.case=T),1]\nwebtrafficgrowthin201516=round(((trafficin2016-trafficin2015)/trafficin2015),2)*100\n\n########################top customer for current month#############\nmtopcustomer=dbSendQuery(mydb,\"select sales_flat_order_address.firstname as Name,sales_flat_order_address.lastname ,sum(sales_flat_order.grand_total) as Revenue \n                         from sales_flat_order_address,sales_flat_order\n                         where sales_flat_order_address.parent_id=sales_flat_order.entity_id and sales_flat_order.`status`='complete' \n                         and year(sales_flat_order.updated_at)=2016 and month(sales_flat_order.updated_at)=3\n                         group by Name order by Revenue desc limit 1 ;\")\nmtopcust=fetch(mtopcustomer,n=-1)\ntopcustomercurrentmonth<-mtopcust$Name\ntopcustomerlname<-mtopcust$lastname\n\n################ New Customer Revenue % ####################################\nmnewCustmerval=dbSendQuery(mydb,\"SELECT COUNT(*) AS grand_count,sum(Grand_Total) as Revenue FROM( SELECT customer_email,\n                           SUM(sales_flat_order.grand_total) as Grand_Total \n                           FROM sales_flat_order WHERE sales_flat_order.status='complete' \n                           AND year(sales_flat_order.updated_at)=2016 and \n                           month(sales_flat_order.updated_at)=3 GROUP BY \n                           customer_email HAVING COUNT(*) = 1)s\")\nmnewCustmerRev=fetch(mnewCustmerval,n=-1)\n\nmtotalrev<-dbSendQuery(mydb,\"select sum(grand_total) as Total from sales_flat_order \n                       where `status`='complete' and \n                       year(updated_at)=2016 and month(updated_at)=3;\")\nmtotalrev<-fetch(mtotalrev,n=-1)\nmNewCustmerper=round(((mnewCustmerRev$`sum(Grand_Total)`/mtotalrev$Total)*100),2)\n\nmRepeatCustmerval=dbSendQuery(mydb,\"SELECT COUNT(*) AS grand_count,sum(Grand_Total) as Revenue FROM( SELECT customer_email,\n                              SUM(sales_flat_order.grand_total) as Grand_Total \n                              FROM sales_flat_order WHERE sales_flat_order.status='complete' \n                              AND year(sales_flat_order.updated_at)=2016 and \n                              month(sales_flat_order.updated_at)=3 GROUP BY \n                              customer_email HAVING COUNT(*) > 1)s\")\nmRepeatCustmerRev<-fetch(mRepeatCustmerval,n=-1)\nmRepeatCustmerper<-round(((mRepeatCustmerRev$`sum(Grand_Total)`/mtotalrev$Total)*100),2)\n\n# print(mRepeatCustmerper)\n####################Order picking per cuurent year##############\nordercurrentyear=dbSendQuery(mydb,'select count(*) as ordercount,year(updated_at) as year from sales_flat_order where year(updated_at)>=2015  and status NOT LIKE \"canceled\"\n                             AND sales_flat_order.status NOT LIKE \"closed\"\n                             AND sales_flat_order.status NOT LIKE \"fraud\"\n                             AND sales_flat_order.status NOT LIKE \"holded\"\n                             AND sales_flat_order.status NOT LIKE \"paypal_canceled_reversal\" group by year(updated_at)')\norderperyear=fetch(ordercurrentyear,n=-1)\norder15=orderperyear[grep(\"2015\", orderperyear$year ,ignore.case=T),1]\norder16=orderperyear[grep(\"2016\", orderperyear$year ,ignore.case=T),1]\n# orderrate=((order16-order15)/order15)*100\n\n################################quarter wise year calculations######################################################\n#####################-----------------------growth/fall in sales in the years(2016 & 2015) up to 3 months----------------#################---\nquartersales=dbSendQuery(mydb,'select year(sales_flat_order.created_at) as year,\n                         sum(sales_flat_order.grand_total) as sales \n                         from sales_flat_order\n                         where (month(sales_flat_order.created_at)>=1 and month(sales_flat_order.created_at)<=3)\n                         and year(sales_flat_order.created_at)>=2015  group by year ;')\nyquartersalesin201516=fetch(quartersales,n=-1)\nquartersalesin2015=yquartersalesin201516[grep(\"2015\", yquartersalesin201516$year ,ignore.case=T),2]\nquartersalesin2016=yquartersalesin201516[grep(\"2016\", yquartersalesin201516$year ,ignore.case=T),2]\nsalesq1<-cbind(quartersalesin2015,quartersalesin2016)\n# quartersalesinyear201516=round(((quartersalesin2016-quartersalesin2015)/quartersalesin2015),2)*100  \n\n#######################-------------------comparision ofnumber of visitors in the current year(2016) with previousyear(2015)---------------\nquartervisitors201516=dbSendQuery(mydb,'select count(*) as visitors ,year(log_visitor.first_visit_at) as year  from log_visitor\n                                       where year(log_visitor.first_visit_at) >=2015\n                                       and (month(log_visitor.first_visit_at)>=1 and month(log_visitor.first_visit_at)<=3) group by year')\nyvisitorsinquarter201516=fetch(quartervisitors201516,n=-1)\nquartervisitorsinyear2015=yvisitorsinquarter201516[grep(\"2015\", yvisitorsinquarter201516$year ,ignore.case=T),1]\nquartervisitorsinyear2016=yvisitorsinquarter201516[grep(\"2016\", yvisitorsinquarter201516$year ,ignore.case=T),1]\nvisitorsq1<-cbind(quartervisitorsinyear2016,quartervisitorsinyear2015)\n\n################--------------------Order picking per (2015-2016) only for quarter-------------------##############\norderquarteryear=dbSendQuery(mydb,'select count(*) as ordercount ,year(sales_flat_order.updated_at) as year\n                             from sales_flat_order where year(updated_at)>=2015  and status NOT LIKE \"canceled\"\n                             AND sales_flat_order.status NOT LIKE \"closed\"\n                             AND sales_flat_order.status NOT LIKE \"fraud\"\n                             AND sales_flat_order.status NOT LIKE \"holded\"\n                             AND sales_flat_order.status NOT LIKE \"paypal_canceled_reversal\" \n                             and (month(sales_flat_order.updated_at)>=1 and month(sales_flat_order.updated_at)<=3)\n                             group by year(updated_at)')\norderquarterperyear201516=fetch(orderquarteryear,n=-1)\nquarterorder2015<-orderquarterperyear201516[grep(\"2015\", orderquarterperyear201516$year ,ignore.case=T),1]\nquarterorder2016=orderquarterperyear201516[grep(\"2016\", orderquarterperyear201516$year ,ignore.case=T),1]\nq1order<-cbind(quarterorder2016,quarterorder2015)\n# orderratein201516=((quarterorder2016-quarterorder2015)/quarterorder2015)*100\n\n##############-----------------avg order value for the years 2015-2016(quarterwise)-------------------##########################\nYAvg_Order201516=dbSendQuery(mydb,'select sum(grand_total)/count(*) as AvgOrderValue ,year(sales_flat_order.updated_at) as year\n                                  from sales_flat_order where status=\"complete\" and year(sales_flat_order.updated_at)>=2015\n                                  and (month(sales_flat_order.updated_at)>=1 and month(sales_flat_order.updated_at)<=3)  group by year')\nYAvg_Value201516=fetch(YAvg_Order201516,n=-1)\nyavgvalue2015=YAvg_Value201516[grep(\"2015\", YAvg_Value201516$year ,ignore.case=T),1]\nyavgvalue2016=YAvg_Value201516[grep(\"2016\", YAvg_Value201516$year ,ignore.case=T),1]\nq1avgorder<-cbind(yavgvalue2016,yavgvalue2015)\n# Avg_Inc201516=((yavgvalue2016-yavgvalue2015)/yavgvalue2015)*100\n\n#########(for inventory)\n###########-----------------Average inventory sold in a year per month(quarter wise)-----------------------\nyavgInvent=dbSendQuery(mydb,'select sum(sales_flat_order.total_qty_ordered) as AvgInventory,\n                           year(sales_flat_order.created_at ) as year\n                           from  sales_flat_order\n                           where sales_flat_order.status= \"complete\" and year(sales_flat_order.created_at)>=2015 \n                           and (month(sales_flat_order.created_at)>=1 and month(sales_flat_order.created_at)<=3)\n                           group by year ;')\nyInvent=fetch(yavgInvent,n=-1)\nyInvent2016<-yInvent[grep(\"2016\", yInvent$year ,ignore.case=T),1]\nyInvent2015<-yInvent[grep(\"2015\", yInvent$year ,ignore.case=T),1]\nyavginvent2016=(yInvent2016)/3\nyavginvent2015=(yInvent2015)/3\nquartercomparisionof201516=((yavginvent2016-yavginvent2015)/yavginvent2015)*100\n\n################################Prediction######################################\n\n###############Revenue in quarter 1###############\nRevenueinq1<-c(177305.1500,156696.6500,167589.9700)\nMonth<-c(\"Jan\",\"Feb\",\"March\")\nq1dataforRevenue<-data.frame(Revenueinq1,Month)\n\n###############Revenue in quarter2(2013-2015) analysis########################\ntrends=dbSendQuery(mydb,\"select sum(grand_total) as Revenue ,Month(created_at) as Month,Year(created_at) as Year  from sales_flat_order  \n                         where (Month(created_at) >=4 and Month(created_at)<=12) \n                         and (Year(created_at)>=2013 and year(created_at)<=2015) \n                         group by  Year(created_at),month(created_at)\")\ntrendsinallYears=fetch(trends,n=-1)\ntrendsinq2201315<-trendsinallYears %>% group_by(Year) %>% filter(Month==c(4,5,6))   \nindexq2 <- sample(1:nrow(trendsinq2201315),size = 0.7*nrow(trendsinq2201315)) \ntraindatainq2 <- trendsinq2201315[indexq2,] \ntestdatainq2 <- trendsinq2201315 [-indexq2,]\nlminq2<-lm(Revenue~Month+Year,traindatainq2)\npredictioninq2<-predict(lminq2,testdatainq2)\nnewdata<-data.frame(Year=c(2016),Month=c(4:6))\np2<-predict(lminq2,newdata)\nPredictedRevenueinq2<-c(223652,238919,254186)\nMonth<-c(\"April\",\"May\",\"June\")\nq2dataforRevenue<-data.frame(PredictedRevenueinq2,Month)\n\n###############Revenue in quarter3(2013-2015) analysis########################\ntrendsinq3201315<-trendsinallYears %>% group_by(Year) %>% filter(Month==c(7,8,9))  \nindexq3 <- sample(1:nrow(trendsinq3201315),size = 0.7*nrow(trendsinq3201315)) \ntraindatainq3 <- trendsinq3201315[indexq3,] \ntestdatainq3<- trendsinq3201315 [-indexq3,]\nlminq3<-lm(Revenue~Month+Year,traindatainq3)\npredictioninq3<-predict(lminq3,testdatainq3)\nnewdata2<-data.frame(Year=c(2016),Month=c(7:9))\np3<-predict(lminq3,newdata2)\nPredictedRevenueinq3<-c(271401.3 ,288000.2,304599.1)\nMonth<-c(\"July\",\"August\",\"September\")\nq3dataforRevenue<-data.frame(PredictedRevenueinq3,Month)\n\n###############Revenue in quarter4(2013-2015) analysis########################\ntrendsinq4201315<-trendsinallYears %>% group_by(Year) %>% filter(Month==c(10,11,12)) \nindexq4 <- sample(1:nrow(trendsinq4201315),size = 0.7*nrow(trendsinq4201315)) \ntraindatainq4 <- trendsinq4201315[indexq4,] \ntestdatainq4<- trendsinq4201315 [-indexq4,]\nlminq4<-lm(Revenue~Month+Year,traindatainq4)\npredictioninq4<-predict(lminq3,testdatainq4)\nnewdata3<-data.frame(Year=c(2016),Month=c(10:12))\np4<-predict(lminq4,newdata3)\nPredictedRevenueinq4<-c(303619.9,281593.8 ,259567.8)\nMonth<-c(\"October\",\"November\",\"December\")\nq4dataforRevenue<-data.frame(PredictedRevenueinq4,Month)\n\n###############Total revenues in all quarters(sum)##########\nTotalRevenueinQ1<-sum(Revenueinq1)\nTotalRevenueinQ2<-sum(PredictedRevenueinq2)\nTotalRevenueinQ3<-sum(PredictedRevenueinq3)\nTotalRevenueinQ4<-sum(PredictedRevenueinq4)\n\n ##########number of visitors in q1##############\nvisitorsq1<-c(55371,59321,49380)\nMonth<-c(\"Jan\",\"Feb\",\"March\")\nq1dataforVisitors<-data.frame(visitorsq1,Month)\n\n###########number of visitors in q2(2013-15)#####################\nvisitors=dbSendQuery(mydb,'select count(*) as visitors, year(log_visitor.first_visit_at) as year,\n                           month(log_visitor.first_visit_at) as month from log_visitor\n                          where (year(log_visitor.first_visit_at)>=2013 and year(log_visitor.first_visit_at)<=2015)\n                         and (month(log_visitor.first_visit_at)>=4 and month(log_visitor.first_visit_at)<=12)\n                         group by year(log_visitor.first_visit_at),month(log_visitor.first_visit_at)')\nvis=fetch(visitors,n=-1)\nvisitorsinq2201315<-vis %>% group_by(year) %>% filter(month==c(4,5,6))   \n visitorsq2 <- sample(1:nrow(visitorsinq2201315),size = 0.7*nrow(visitorsinq2201315))\n visitorstraindataq2 <- visitorsinq2201315[visitorsq2,]\n visitorstestdataq2<- visitorsinq2201315 [-visitorsq2,]\nvislminq2<-lm(visitors~month+year,visitorstraindataq2)\nvispredictioninq2<-predict(vislminq2,visitorstestdataq2)\nnewdataV1<-data.frame(year=c(2016),month=c(4:6))\n p2<-predict(vislminq2,newdataV1)\nPreictedVisitorsinq2<-c(46626.97,49271.78,51916.59)\n Month<-c(\"April\",\"May\",\"June\")\n q2dataforVisitors<-data.frame(PreictedVisitorsinq2,Month)\n \n###########number of visitors in q3(2013-15)#####################\n visitorsinq3201315<-vis %>% group_by(year) %>% filter(month==c(7,8,9)) \nvisitorsq3 <- sample(1:nrow(visitorsinq3201315),size = 0.7*nrow(visitorsinq3201315)) \nvisitorstraindataq3 <- visitorsinq3201315[visitorsq3,] \nvisitorstestdataq3<- visitorsinq3201315 [-visitorsq3,]\nvislminq3<-lm(visitors~month+year,visitorstraindataq3)\nvispredictioninq3<-predict(vislminq3,visitorstestdataq3)\nnewdataV3<-data.frame(year=c(2016),month=c(7:9))\np3<-predict(vislminq3,newdataV3)\nPreictedVisitorsinq3<-c(54978.67,58169.67,61360.67)\nMonth<-c(\"July\",\"August\",\"September\")\nq3dataforVisitors<-data.frame(PreictedVisitorsinq3,Month)\n\n###########number of visitors in q4(2013-15)#####################\nvisitorsinq4201315<-vis %>% group_by(year) %>% filter(month==c(10,11,12)) \nvisitorsq4 <- sample(1:nrow(visitorsinq4201315),size = 0.7*nrow(visitorsinq4201315)) \nvisitorstraindataq4 <- visitorsinq4201315[visitorsq4,] \nvisitorstestdataq4<- visitorsinq4201315 [-visitorsq4,]\nvislminq4<-lm(visitors~month+year,visitorstraindataq4)\nvispredictioninq4<-predict(vislminq4,visitorstestdataq4)\nnewdataV4<-data.frame(year=c(2016),month=c(10:12))\np4<-predict(vislminq4,newdataV4)\nPreictedVisitorsinq4<-c(74081.98 ,78146.90,82211.82)\nMonth<-c(\"October\",\"November\",\"December\")\nq4dataforVisitors<-data.frame(PreictedVisitorsinq4,Month)\n\n###############Total number of visitors in all quarters(sum)##########\ntotalNumberofVisitorsinQ1<-(sum(visitorsq1)/1000)\ntotalNumberofVisitorsinQ2<-(sum(PreictedVisitorsinq2)/1000)\ntotalNumberofVisitorsinQ3<-(sum(PreictedVisitorsinq3)/1000)\ntotalNumberofVisitorsinQ4<-(sum(PreictedVisitorsinq4)/1000)\n\n##BenchMarking of Ecomerce Ration\nypVisits=dbSendQuery(mydb,\"select count(*)  as Visitor,month(log_visitor.first_visit_at) as Month from log_visitor where year(log_visitor.first_visit_at)>=2015 group by month(log_visitor.first_visit_at);\")\nypVisitsval=fetch(ypVisits,n=-1)\nypTransactions=dbSendQuery(mydb,\"select count(*) as Count ,month(sales_flat_order.created_at) as Month from sales_flat_order where status='complete' and year(sales_flat_order.created_at)>=2015 group by month(sales_flat_order.created_at);\")\nypTrValue=fetch(ypTransactions,n=-1)\nypERatio=(ypTrValue/ypVisitsval)*100\n\n####Visits by month and sales graph############\nMVisits2016=dbSendQuery(mydb,\"select month(first_visit_at) as Month,count(*) as Count from log_visitor where year(first_visit_at)=2016 group by month(first_visit_at);\")\nMVisitscount2016=fetch(MVisits2016,n=-1)\nMsales2016=dbSendQuery(mydb,\"select sum(sales_flat_order.grand_total) as Sales from sales_flat_order where year(sales_flat_order.created_at)=2016 group by month(sales_flat_order.created_at);\")\nMsalesval2016=fetch(Msales2016,n=-1)\nMonth<-c(\"Jan\",\"Feb\",\"Mar\")\nVisits<-MVisitscount2016$Count\nSales<-round(Msalesval2016$Sales)\nMVisitsSales<-data.frame(Month,Visits,Sales)\nMVisitsSales$Month <- factor(MVisitsSales$Month, levels = MVisitsSales[[\"Month\"]])\n\n#############Visits for 2015 by montly graph###################\nMVisits2015=dbSendQuery(mydb,\"select month(first_visit_at) as Month,count(*) as Count from log_visitor where year(first_visit_at)=2015 group by month(first_visit_at);\")\nMVisitscount2015=fetch(MVisits2015,n=-1)\nMsales2015=dbSendQuery(mydb,\"select sum(sales_flat_order.grand_total) as Sales from sales_flat_order where year(sales_flat_order.created_at)=2015 group by month(sales_flat_order.created_at);\")\nMsalesval2015=fetch(Msales2015,n=-1)\nMonth2015<-c(\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"June\",\"July\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\")\nVisits2015<-MVisitscount2015$Count\nSales2015<-round(Msalesval2015$Sales)\nMVisitsSales2015<-data.frame(Month2015,Visits2015,Sales2015)\nMVisitsSales2015$Month2015 <- factor(MVisitsSales2015$Month2015, levels = MVisitsSales2015[[\"Month2015\"]])\n\n\n\n\n\n\n\n",
    "created" : 1487085862284.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "622946738",
    "id" : "5D0B3DCB",
    "lastKnownWriteTime" : 1491420304,
    "last_content_update" : 1491420304848,
    "path" : "H:/RWorkspace/UpdatedSourcecode/SLC_POC/Slc_Connect.R",
    "project_path" : "Slc_Connect.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}