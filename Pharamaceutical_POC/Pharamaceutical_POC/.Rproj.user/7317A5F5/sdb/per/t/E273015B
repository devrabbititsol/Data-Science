{
    "collab_server" : "",
    "contents" : "library(shiny)\nlibrary(shinydashboard)\nlibrary(googleVis)\nlibrary(highcharter)\nlibrary(ggiraph)\nlibrary(ggplot2)\nlibrary(ggmap)\n\nlibrary(rsconnect)\n\n\nserver <- function(input, output) {\n  output$maxphar <- renderValueBox({\n    valueBox(\n      paste(maxno.ofcommphar),paste(\"Community Pharmacies\"), icon = icon(\"glyphicon glyphicon-star\",lib=\"glyphicon\"),\n      color = \"aqua\"\n    )\n     }) \n  output$mediser <- renderValueBox({\n    valueBox(\n      paste(round(sum(patientser$d))), \"Patient Group Direction Top Service\",icon = icon(\"glyphicon glyphicon-open\",lib=\"glyphicon\"), \n      color = \"purple\")\n    \n  })\n  output$avgitems <- renderValueBox({\n    valueBox(\n      paste(avgitems),paste(\"AvgMonthlyItemsDispencedPerPharmacy\"), icon = icon(\"glyphicon glyphicon-asterisk\",lib=\"glyphicon\"),\n      color = \"red\"\n    )\n  })\n  output$TotalMur <- renderValueBox({\n    \n    valueBox(paste(max(Murser$Total.MURs)),\"Mur Service Top City(London)\",color = \"teal\",icon = icon(\"glyphicon glyphicon-record\",lib=\"glyphicon\"))\n    \n  })\n  output$TotalcommunityPharmacies<-renderValueBox({\n    \n    valueBox(\n      paste(\"0.27\",\"%\"), \"Community Pharmacies Growth\", icon = icon(\"glyphicon glyphicon-tree-conifer\",lib=\"glyphicon\"),\n      color = \"olive\")\n    \n  })\n  output$AvgMitems<-renderHighchart({\n  \n          highchart() %>%\n          hc_xAxis(categories = locationpharma$England) %>%\n          hc_add_series(name=\"AvgMonthlyItemsPerPharmacy\",data = locationpharma$Averagemonthlyitemsperpharmacy, type = \"column\",color=\"purple\",\n                        showInLegend = FALSE )\n  })\n  output$Pharmaciesgrowth<- renderGvis({\n    Region<-diff1314$Region\n    PreviousYear<-diff1314$CommunityPharmacies13\n    CurrentYear<-diff1314$CommunityPharmacies2014\n    #Growth<-paste(diff1314$Pharmagrowth,upArrow)\n    Growth<-c(paste(0.23,upArrow),paste(0.22,upArrow),paste(0.29,upArrow),paste(0.27,upArrow),paste(0.15,upArrow))\n    pharmadiff<- data.frame(Region,CurrentYear,PreviousYear,Growth)\n    Pharmaciesgrowthchart<-gvisTable(pharmadiff,options=list(height=\"300px\"))\n    return(Pharmaciesgrowthchart)\n    \n  })\n  output$PharmaandItemsdispenced<-renderPlotly({\n   \n    m <- list(\n      l = 50,\n      r = 50,\n      b = 100,\n      t = 100,\n      pad = 3\n    )\n    y <- list(\n      title = \"\"\n      \n    )\n    x <- list(\n      title = \"Years\"\n      \n    )\n    \n    plot_ly(pharmaitemsdispenced\n            , x = ~pharmaitemsdispenced$Year) %>%\n      add_bars(y=~pharmaitemsdispenced$`0-2000`, name = \"0-2000\", visible = T,color=\"pink\") %>%\n      add_bars(y=~pharmaitemsdispenced$`2000-4000`, name = \"2000-4000\",visible=T,color=\"purple\")%>%\n      add_bars(y=~pharmaitemsdispenced$`4000-6000`, name = \"4000-6000\", visible = T,color=\"skyblue\") %>%\n      add_bars(y=~pharmaitemsdispenced$`6000-8000`, name = \"6000-8000\", visible = T,color=\"orange\") %>%\n      add_bars(y=~pharmaitemsdispenced$`8000-10000`, name = \"8000-10000\", visible = T,color=\"grey\") %>%\n      add_bars(y=~pharmaitemsdispenced$`10000+`, name = \"10000+\", visible = T) %>%\n      \n      layout( margin=m, xaxis=x,yaxis=y)\n  })\n  output$AppDec<-renderPlotly({\n    \n    colors <- c('rgb(211,94,96)', 'rgb(128,133,133)', 'rgb(144,103,167)', 'rgb(171,104,87)', 'rgb(114,147,203)')\n    \n    p <- plot_ly( marker = list(colors = colors,width=2)) %>%\n      add_pie(data = decision, labels = decision$Applications, values = decision$NewPremises,\n              name = \"NewPremises\", domain = list(x = c(0, 0.4), y = c(0.4, 1))) %>%\n      add_pie(data =decision , labels = decision$Applications, values = decision$AdditionalPremises,\n              name = \"AdditionalPremises\", domain = list(x = c(0.6, 1), y = c(0.4, 1))) %>%\n      \n      layout(title = \"Decisions on applications relating to NHS\", showlegend = T,\n             xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),\n             yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))\n    p\n  })\n  \n  output$populationwisepharmacies<-renderPlotly({\n    m <- list(\n      l = 50,\n      r = 50,\n      b = 100,\n      t = 100,\n      pad = 3\n    )\n    y <- list(\n      title = \"Pharmacies\"\n      \n    )\n    x <- list(\n      title = \"Regions\"\n      \n    )\n    library(plotly)\n    set.seed(100)\n    #d <- diamonds[sample(nrow(diamonds), 1000), ]\n    plot_ly(locationpharma, x = ~England, y = ~Pharmaciesper100000population,type = \"bar\",color = ~England)%>%\n      layout(margin=m,xaxis=x,yaxis=y,showlegend=F)\n  })\n  output$contractorsdiff<- renderGvis({\n    revqty<- select(msalebrand16mar,Brand,Revenue,LastMonthSales,SalesGrowth)\n    revqtychart<-gvisTable(revqty,options=list(height=\"300px\"))\n    return(revqtychart)\n    \n  })\n  \n  \n \n  \n  \n  \n  output$ypharmmacies<- renderGvis({\n    Years<-pharmaciesandavgdispences$Year\n     Pharmacies<-pharmaciesandavgdispences$Numberofcommunitypharmacies\n    pharma1<-data.frame(cbind(Years,Pharmacies))\n    ypharmmacieschart<-gvisColumnChart(pharma1,xvar = \"Years\",yvar = \"Pharmacies\",options =list(seriesType=\"bars\",colors=\"['66CCFF']\",height=\"300px\",width=\"300px\"))\n    return(ypharmmacieschart)\n\n  })\n  \n \n  output$locationwisepharma <- renderHighchart({\n    \n    highchart() %>% \n      hc_chart(backgroundColor = \"#\") %>% \n      hc_title(text = \"Location Wise No.of Pharmacies \", style = list(color = \"#CCC\")) %>% \nhc_xAxis(categories =locationpharma$England) %>% \n      hc_yAxis(labels = list(style = list(color = \"#CCC\")),title = list(text = \"No.Of Pharmacies\"),\n               gridLineColor = \"#111111\") %>% \n      hc_series(\n        list(\n          data =  locationpharma$Numberofcommunitypharmacies,name=\"No.Of Pharmacies\",\n          type = \"areaspline\",\n          marker = list(enabled = FALSE),\n          color =  list(\n            linearGradient = list(x1 = 0, y1 = 1, x2 = 0, y2 = 0),\n            stops = list(\n              list(0, \"transparent\"),\n              list(0.33, \"yellow\"),\n              list(0.66, \"red\"),\n              list(1, \"#ccc\")\n            )\n          ),\n          fillColor = list(\n            linearGradient = list(x1 = 0, y1 = 1, x2 = 0, y2 = 0),\n            stops = list(\n              list(0, \"transparent\"),\n              list(0.1, \"yellow\"),\n              list(0.5, \"red\"),\n              list(1, \"black\")\n            )\n          )\n        )\n      ) %>% \n      hc_add_theme(hc_theme_null())\n    \n\n  })\n  output$plotIris<- renderGvis({\n    # ilsales<- select(InventsalesbyRegion,Revenue,Location)\n    #yInventorysalesbyRegion <- yIsalesbyRegion\n    openclose<-openclose\n    openclose<-na.omit(openclose)\n    yilgeostate <- gvisBubbleChart(openclose,\"England\",\"CommunityPharmaciesOpening1314\",options=list(height=\"300px\",region=\"England\",displayMode=\"regions\",resolution=\"provinces\",height=\"400px\",colors=\"['#5B2C6F']\"))\n    return(yilgeostate)\n    \n  })\n  output$Mitemsperpharm<-renderPlotly(\n    {\n      p<- plot_ly(locationpharma, labels = locationpharma$England, values = locationpharma$Averagemonthlyitemsperpharmacy, type = \"pie\",name = \"Items\", showlegend = F) %>%\n        layout(title = \"Avg Items per Pharmacy\",xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))\n      p\n      #p<-plotly(locationpharma,labels=locationpharma$England,values=locationpharma$Averagemonthlyitemsperpharmacy)\n      \n    }\n  )\n  output$Ycontractors<-renderPlotly({\n    p <- plot_ly(ycontractors, x = ~ycontractors$Year, y = ~ycontractors$IndependentContractors, type = 'bar', name = 'Independent Contractors', marker = list(color = 'rgb(49,130,189)')) %>%\n      add_trace(y = ~ycontractors$MultipleContractors, name = 'Multiple Contractors', marker = list(height=\"300px\",color = 'rgb(8,48,107)')) %>%\n      layout(xaxis = list(title = \"\", tickangle = -45),\n             yaxis = list(title = \"\"),\n             margin = list(b = 100),\n             barmode = 'group')\n  })\n  \n  output$lcontractors<-renderPlotly({\n    m <- list(\n      l = 50,\n      r = 50,\n      b = 80,\n      t = 100,\n      pad = 3\n    )\n    y <- list(\n      title = \"Contractors\"\n      \n    )\n    x <- list(\n      title = \"Region Names\"\n      \n    )\n    \n    plot_ly(lcontractors\n            , x = ~lcontractors$England) %>%\n      add_lines(y=~lcontractors$IndependentContractors14, name = \"IndependentContractors\", visible = T) %>%\n      add_lines(y=~lcontractors$MultipleContractors14, name = \"MultipleContractors\",visible=T)%>%\n    \n      layout( margin=m, xaxis=x,yaxis=y,showlegend=F)\n\n  })\n  output$Esplsp <- renderHighchart({\n    Year<-prescridata$Year\n    PrescriptionItems<-prescridata$Prescription.items.dispensed..millions.\n    df<-data.frame(PrescriptionItems,Year)\n    # gg_crime <- ggplot(df, aes(x = PrescriptionItems, y =Year , color = c(1:10),options=list(height=\"300px\") )) + \n    #   geom_point_interactive(\n    #     aes( data_id = Year, tooltip = PrescriptionItems), size = 4.5 ) + \n    #   scale_colour_gradient(low = \"#999999\", high = \"#FF3333\") + \n    #   theme_minimal()\n    # \n    # ggiraph(code = print(gg_crime),height_svg = 4,\n    #         hover_css = \"fill-opacity:.3;cursor:pointer;\")\n    highchart() %>%\n      hc_add_theme(hc_theme_darkunica())%>%\n      hc_xAxis(categories=df$Year) %>%\n      hc_add_series(name=\"Pharmacies\",data =df$PrescriptionItems , \n                    showInLegend = FALSE ,color=\"skyblue\")\n  })\n  \n  output$EspLSpLSP <- renderPlotly({\n    cites<-as.list(Esplsplsp$England)\n    Espcontra<-as.list(Esplsplsp$ESPLPScontractors)\n    otercontru<-as.list(Esplsplsp$otherLPcontractors)\n    m <- list(\n      l = 50,\n      r = 50,\n      b = 90,\n      t = 100,\n      pad = 3\n    )\n    y <- list(\n      title = \"ESPLSP Contractors\"\n      \n    )\n    x <- list(\n      title = \"Regions\"\n      \n    )\n    \n    \n    plot_ly(Esplsplsp, x = ~cites) %>%\n      add_polygons(y=~Esplsplsp$otherLPcontractors, name = \"OterLspcontractors\") %>%\n      add_bars(y=~Esplsplsp$ESPLPScontractors, name = \"EspContractors\", visible = T)  %>%\n      add_paths(y=~Esplsplsp$otherLPcontractors, name = \"OterLspcontractors\", visible = T) %>%\n      layout( margin = m,xaxis=x,yaxis=y,title=\"ESPLSPContractors\")\n    \n    \n  })\n  \n  \n  output$Mur <- renderPlotly({\n    city<- Murser$Area\n    communityphar<-Murser$Number.of.community.pharmacies.2013.14\n    Murservices<- Murser$Percentage.of.Pharmacies.providing.MUR.services\n    m <- list(\n      l = 50,\n      r = 50,\n      b = 90,\n      t = 100,\n      pad = 3\n    )\n    y <- list(\n      title = \" MURServices\"\n      \n    )\n    x <- list(\n      title = \"England\"\n      \n    )\n    \n    \n    plot_ly(Murser, x = ~Murser$Area) %>%\n      \n      \n      add_trace(y=~Murser$PharmaciesprovidingMURservices1, name = \"Mur Services\", visible = T)%>%\n      layout( margin = m,xaxis=x,yaxis=y,title=\"MURServices\")\n    \n    \n    \n  })\n \n  output$pharmaranges1<-renderPlotly({\n    \n    m <- list(\n      l = 50,\n      r = 50,\n      b = 100,\n      t = 100,\n      pad = 4\n    )\n    y <- list(\n      title = \"\"\n\n    )\n    x <- list(\n      title = \"Years\"\n\n    )\n    plot_ly(Yno.ofphar,x = ~Yno.ofphar$Year) %>%\n      add_bars(y=~Yno.ofphar$`0-2000`, name = \"0-2000\", visible = T) %>%\n      add_bars(y=~Yno.ofphar$`2000-4000`, name = \"2000-4000\",visible=T) %>%\n      add_bars(y=~Yno.ofphar$`4000-6000`, name = \"4000-6000\", visible = T) %>%\n      add_bars(y=~Yno.ofphar$`6000-8000`, name = \"6000-8000\", visible = T) %>%\n      add_bars(y=~Yno.ofphar$`8000-10000`, name = \"8000-10000\", visible = T) %>%\n      add_bars(y=~Yno.ofphar$`10000+`, name = \"10000+\", visible = T)%>%\n      layout(margin = m,title=\"Year Wise Pharmacies Range\",xaxis=x,yaxis=y, height = \"260px\")\n\n\n      \n  })\n\n\n\noutput$indvsmul<- renderHighchart({\n \n ind<-as.integer(indvsmul$independentcontructors)\n    \n    mul<-as.integer(indvsmul$multiplecontructors)\n    \n    \n    \n    \n     names<-c(\"indpendentcontructors\",\"multiplecontructors\")\n     names=as.data.frame(names)\n     cont<-data.frame(rbind(ind,mul))\n     contdata<-cbind(names,cont)\n     \n    \n    \n     highchart(width = 50, height = 50) %>%\n       hc_title(text = \"Independent Vs Multiple Contractors\") %>%\n\n       hc_chart(type = \"pie\", options3d = list(enabled = TRUE, alpha = 70, beta = 0,color = 'rgb(255, 110, 176)')) %>%\n       hc_plotOptions(pie = list(depth = 70)) %>%\n       hc_add_series_labels_values(contdata$names,contdata$rbind.ind..mul.) %>%\n       hc_add_theme(hc_theme(\n         chart = list(\n          backgroundColor = NULL\n\n         )\n       ))\n})\n\n\noutput$PharmaandItemsdispenced<-renderPlotly({\n\n  m <- list(\n    l = 50,\n    r = 50,\n    b = 100,\n    t = 100,\n    pad = 3\n  )\n  y <- list(\n    title = \"\"\n    \n  )\n  x <- list(\n    title = \"Years\"\n    \n  )\n  \n  plot_ly(pharmaitemsdispenced\n          , x = ~pharmaitemsdispenced$Year) %>%\n    add_bars(y=~pharmaitemsdispenced$`0-2000`, name = \"0-2000\", visible = T,color=\"pink\") %>%\n    add_bars(y=~pharmaitemsdispenced$`2000-4000`, name = \"2000-4000\",visible=T,color=\"purple\")%>%\n    add_bars(y=~pharmaitemsdispenced$`4000-6000`, name = \"4000-6000\", visible = T,color=\"skyblue\") %>%\n    add_bars(y=~pharmaitemsdispenced$`6000-8000`, name = \"6000-8000\", visible = T,color=\"orange\") %>%\n    add_bars(y=~pharmaitemsdispenced$`8000-10000`, name = \"8000-10000\", visible = T,color=\"grey\") %>%\n    add_bars(y=~pharmaitemsdispenced$`10000+`, name = \"10000+\", visible = T) %>%\n    \n    layout( margin=m, xaxis=x,yaxis=y,height=\"260px\")\n})\noutput$AppDec<-renderPlotly({\n  \n  colors <- c('rgb(211,94,96)', 'rgb(128,133,133)', 'rgb(144,103,167)', 'rgb(171,104,87)', 'rgb(114,147,203)')\n  \n  p <- plot_ly( marker = list(colors = colors,width=1)) %>%\n    add_pie(data = decision, labels = decision$Applications, values = decision$NewPremises,\n            name = \"NewPremises\", domain = list(x = c(0, 0.4), y = c(0.1, 1.5))) %>%\n    add_pie(data =decision , labels = decision$Applications, values = decision$AdditionalPremises,\n            name = \"AdditionalPremises\", domain = list(x = c(0.6, 1), y = c(0.1, 1.5))) %>%\n    \n    layout(title = \"Decisions on applications relating to NHS\", showlegend = T,\n           xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),\n           yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))\n  p\n})\noutput$Appstatus<-renderPlotly({\n  p <- plot_ly() %>%\n    add_pie(data = applicationstatus14, labels = applicationstatus14$Decisions, values = applicationstatus14$Controlledarea,\n            name = \"NewPremises\", domain = list(x = c(0, 0.4), y = c(0.4, 1))) %>%\n    add_pie(data =applicationstatus14 , labels = applicationstatus14$Decisions, values = applicationstatus14$Noncontrolledarea,\n            name = \"AdditionalPremises\", domain = list(x = c(0.6, 1), y = c(0.4, 1))) %>%\n    \n    layout(title = \"Decisions on application on appeal\", showlegend = F,\n           xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),\n           yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))\n  p\n  \n})\noutput$pharmaciesprov<-renderHighchart({\n  highchart() %>%\n    hc_add_theme(hc_theme_ffx())%>%\n    hc_xAxis(categories=PharmprovidingMurservice$Year) %>%\n    hc_add_series(name=\"Pharmacies\",data = PharmprovidingMurservice$PharmaciesprovidingMURservices, \n                  showInLegend = FALSE )\n})\n}\n",
    "created" : 1494325602302.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2338924852",
    "id" : "E273015B",
    "lastKnownWriteTime" : 1494330582,
    "last_content_update" : 1494330582082,
    "path" : "C:/Users/ADMIN/Desktop/Pharamaceutical2/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}